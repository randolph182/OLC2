
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc2_Tarea1;

import java_cup.runtime.*;
import olc2_tarea1.nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\004\007\005\001\002\000\004\002\022\001" +
    "\002\000\012\004\011\005\012\006\014\007\005\001\002" +
    "\000\004\002\000\001\002\000\014\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\001\002\000\014\004\011\005\012" +
    "\006\014\007\005\010\021\001\002\000\004\011\ufffa\001" +
    "\002\000\004\011\ufff9\001\002\000\004\011\016\001\002" +
    "\000\004\011\ufff8\001\002\000\014\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\001\002\000\004\012\017\001\002" +
    "\000\014\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\001" +
    "\002\000\014\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\001\002\000\016\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\012\003\014\004\007\005\006\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\014\005" +
    "\017\006\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static nodo raiz = new nodo();
    int countNodo =0;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= B 
            {
              Object RESULT =null;
		int nB1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nB1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nB1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            nodo tmp = new nodo(); 
            tmp.etiqueta = "S";
            nodo tmp2 = (nodo)nB1;
            tmp.addHijo(tmp2);
            tmp.idNodo = countNodo;
            countNodo++;
            raiz = tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // B ::= tLlvOpn L tLlvCls 
            {
              Object RESULT =null;
		int nLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            nodo tmp = new nodo();
            tmp.etiqueta = "B";
            nodo tmp2 = (nodo)nL;
            tmp.addHijo(tmp2);
            tmp.idNodo = countNodo;
            countNodo++;
            RESULT = tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= L INS 
            {
              Object RESULT =null;
		int nLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nInsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nInsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nIns = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            nodo tmp = (nodo)nL;
            nodo tmp2 = (nodo)nIns;
            tmp.addHijo(tmp2);
            tmp.idNodo = countNodo;
            countNodo++;
            RESULT = tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= INS 
            {
              Object RESULT =null;
		int nInsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nInsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nIns = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            nodo tmp = new nodo();
            tmp.etiqueta = "L";
            nodo tmp2 = (nodo)nIns;
            tmp.addHijo(tmp2);
            tmp.idNodo = countNodo;
            countNodo++;
            RESULT = tmp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INS ::= T tId tPComa 
            {
              Object RESULT =null;
		int nTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nId = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                nodo ins = new nodo();
                ins.etiqueta = "INS";

                nodo id = new nodo();
                id.etiqueta = "ID";
                id.valor = (String)nId;
                id.idNodo = countNodo;
                countNodo++;

                nodo tmpNT = (nodo)nT;
                ins.addHijo(tmpNT);
                ins.addHijo(id);

                ins.idNodo = countNodo;
                countNodo++;
                RESULT = ins;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INS ::= B 
            {
              Object RESULT =null;
		int nBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nB = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                nodo ins = new nodo();
                ins.etiqueta = "INS";
                nodo tmp = (nodo)nB;
                ins.addHijo(tmp);
                ins.idNodo = countNodo;
                countNodo++;
                RESULT = ins;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T ::= tInt 
            {
              Object RESULT =null;
		
                nodo tmp = new nodo();
                tmp.etiqueta = "T";
                tmp.valor = "int";
                tmp.idNodo = countNodo;
                countNodo++;
                RESULT = tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // T ::= tBool 
            {
              Object RESULT =null;
		
                nodo tmp = new nodo();
                tmp.etiqueta = "T";
                tmp.valor = "bool";
                tmp.idNodo = countNodo;
                countNodo++;
                RESULT = tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // T ::= tChar 
            {
              Object RESULT =null;
		
                nodo tmp = new nodo();
                tmp.etiqueta = "T";
                tmp.valor = "char";
                tmp.idNodo = countNodo;
                countNodo++;
                RESULT = tmp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
