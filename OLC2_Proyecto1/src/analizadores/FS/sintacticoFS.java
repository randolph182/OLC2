
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.FS;

import java_cup.runtime.*;
import java.util.LinkedList;
import FuncionScript.AST.Expresiones.*;
import FuncionScript.AST.Expresiones.Operacion.*;
import FuncionScript.Entorno.*;
import FuncionScript.AST.Instrucciones.*;
import FuncionScript.AST.*;
import FuncionScript.ErroresFS.ManejadorErroresFS;
import FuncionScript.AST.Instrucciones.Condicionales.*;
import FuncionScript.AST.Expresiones.InterfazUsuario.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticoFS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\036\006\000\002\036\007\000" +
    "\002\036\007\000\002\036\007\000\002\036\007\000\002" +
    "\036\007\000\002\031\006\000\002\033\003\000\002\033" +
    "\002\000\002\032\005\000\002\032\003\000\002\024\005" +
    "\000\002\024\004\000\002\025\012\000\002\027\003\000" +
    "\002\027\002\000\002\026\005\000\002\026\003\000\002" +
    "\030\004\000\002\023\004\000\002\020\011\000\002\021" +
    "\004\000\002\021\003\000\002\022\010\000\002\022\007" +
    "\000\002\017\011\000\002\017\015\000\002\017\013\000" +
    "\002\015\006\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\014\006\000\002\037" +
    "\011\000\002\012\005\000\002\013\005\000\002\011\007" +
    "\000\002\003\005\000\002\010\003\000\002\010\005\000" +
    "\002\034\003\000\002\034\005\000\002\035\003\000\002" +
    "\035\002\000\002\004\005\000\002\004\003\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\007\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\043\006\000\002\044\010\000" +
    "\002\040\006\000\002\041\010\000\002\042\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\024\003\031\004\025\023\034\027\020\045" +
    "\006\055\011\056\026\062\007\063\023\001\002\000\030" +
    "\002\ufffe\003\ufffe\004\ufffe\023\ufffe\027\ufffe\045\ufffe\052" +
    "\ufffe\055\ufffe\056\ufffe\062\ufffe\063\ufffe\001\002\000\004" +
    "\007\325\001\002\000\004\016\312\001\002\000\032\005" +
    "\067\006\062\007\307\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\004\002\306\001\002\000\004\016\263\001\002\000\030" +
    "\002\ufffd\003\ufffd\004\ufffd\023\ufffd\027\ufffd\045\ufffd\052" +
    "\ufffd\055\ufffd\056\ufffd\062\ufffd\063\ufffd\001\002\000\030" +
    "\002\ufff4\003\ufff4\004\ufff4\023\ufff4\027\ufff4\045\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\062\ufff4\063\ufff4\001\002\000\026" +
    "\002\000\003\031\004\025\023\034\027\020\045\006\055" +
    "\011\056\026\062\007\063\023\001\002\000\030\002\ufffa" +
    "\003\ufffa\004\ufffa\023\ufffa\027\ufffa\045\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\062\ufffa\063\ufffa\001\002\000\030\002\ufff6" +
    "\003\ufff6\004\ufff6\023\ufff6\027\ufff6\045\ufff6\052\ufff6\055" +
    "\ufff6\056\ufff6\062\ufff6\063\ufff6\001\002\000\030\002\ufff7" +
    "\003\ufff7\004\ufff7\023\ufff7\027\ufff7\045\ufff7\052\ufff7\055" +
    "\ufff7\056\ufff7\062\ufff7\063\ufff7\001\002\000\004\023\250" +
    "\001\002\000\004\007\245\001\002\000\030\002\ufffc\003" +
    "\ufffc\004\ufffc\023\ufffc\027\ufffc\045\ufffc\052\ufffc\055\ufffc" +
    "\056\ufffc\062\ufffc\063\ufffc\001\002\000\004\023\227\001" +
    "\002\000\030\002\ufff9\003\ufff9\004\ufff9\023\ufff9\027\ufff9" +
    "\045\ufff9\052\ufff9\055\ufff9\056\ufff9\062\ufff9\063\ufff9\001" +
    "\002\000\004\016\223\001\002\000\004\007\222\001\002" +
    "\000\030\002\ufff5\003\ufff5\004\ufff5\023\ufff5\027\ufff5\045" +
    "\ufff5\052\ufff5\055\ufff5\056\ufff5\062\ufff5\063\ufff5\001\002" +
    "\000\030\002\ufff8\003\ufff8\004\ufff8\023\ufff8\027\ufff8\045" +
    "\ufff8\052\ufff8\055\ufff8\056\ufff8\062\ufff8\063\ufff8\001\002" +
    "\000\006\007\220\052\221\001\002\000\030\002\ufffb\003" +
    "\ufffb\004\ufffb\023\ufffb\027\ufffb\045\ufffb\052\ufffb\055\ufffb" +
    "\056\ufffb\062\ufffb\063\ufffb\001\002\000\030\002\ufff0\003" +
    "\ufff0\004\ufff0\023\ufff0\027\ufff0\045\ufff0\052\ufff0\055\ufff0" +
    "\056\ufff0\062\ufff0\063\ufff0\001\002\000\026\015\041\016" +
    "\040\024\037\025\043\041\046\042\044\043\042\044\036" +
    "\064\045\066\047\001\002\000\030\002\ufff3\003\ufff3\004" +
    "\ufff3\023\ufff3\027\ufff3\045\ufff3\052\ufff3\055\ufff3\056\ufff3" +
    "\062\ufff3\063\ufff3\001\002\000\030\005\uffcd\006\uffcd\011" +
    "\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\061\uffcd" +
    "\074\uffcd\077\uffcd\001\002\000\004\007\217\001\002\000" +
    "\032\005\067\006\062\011\072\016\053\017\uffe5\020\066" +
    "\021\054\022\052\023\070\061\065\074\060\077\061\001" +
    "\002\000\030\005\067\006\062\011\072\016\053\020\066" +
    "\021\054\022\052\023\070\061\065\074\060\077\061\001" +
    "\002\000\030\005\uffce\006\uffce\011\uffce\016\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\061\uffce\074\uffce\077\uffce\001" +
    "\002\000\004\007\212\001\002\000\030\005\uffcf\006\uffcf" +
    "\011\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\061" +
    "\uffcf\074\uffcf\077\uffcf\001\002\000\030\005\067\006\062" +
    "\011\072\016\053\020\066\021\054\022\052\023\070\061" +
    "\065\074\060\077\061\001\002\000\030\005\uffd0\006\uffd0" +
    "\011\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\061" +
    "\uffd0\074\uffd0\077\uffd0\001\002\000\014\067\145\070\147" +
    "\071\144\072\142\073\143\001\002\000\030\005\067\006" +
    "\062\011\072\016\053\020\066\021\054\022\052\023\070" +
    "\061\065\074\060\077\061\001\002\000\050\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\017\uffa5\030\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\047" +
    "\uffa5\050\uffa5\057\uffa5\060\uffa5\065\uffa5\001\002\000\050" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\017" +
    "\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\047\uffac\050\uffac\057\uffac\060\uffac\065\uffac\001" +
    "\002\000\030\005\067\006\062\011\072\016\053\020\066" +
    "\021\054\022\052\023\070\061\065\074\060\077\061\001" +
    "\002\000\050\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\017\uffab\030\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\047\uffab\050\uffab\057\uffab\060\uffab" +
    "\065\uffab\001\002\000\050\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\017\uffa4\030\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\047\uffa4\050\uffa4\057" +
    "\uffa4\060\uffa4\065\uffa4\001\002\000\050\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\017\uffa1\030\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\047\uffa1" +
    "\050\uffa1\057\uffa1\060\uffa1\065\uffa1\001\002\000\050\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\017\uffa0" +
    "\030\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\047\uffa0\050\uffa0\057\uffa0\060\uffa0\065\uffa0\001\002" +
    "\000\004\016\200\001\002\000\004\016\175\001\002\000" +
    "\050\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\017\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\047\uffa6\050\uffa6\057\uffa6\060\uffa6\065\uffa6" +
    "\001\002\000\050\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\017\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\047\uffa3\050\uffa3\057\uffa3\060" +
    "\uffa3\065\uffa3\001\002\000\050\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\017\uffa2\030\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\047\uffa2\050\uffa2" +
    "\057\uffa2\060\uffa2\065\uffa2\001\002\000\030\005\067\006" +
    "\062\011\072\016\053\020\066\021\054\022\052\023\070" +
    "\061\065\074\060\077\061\001\002\000\050\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\017\uffad\030\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\047" +
    "\uffad\050\uffad\057\uffad\060\uffad\065\uffad\001\002\000\050" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\017" +
    "\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\047\uffa7\050\uffa7\057\uffa7\060\uffa7\065\uffa7\001" +
    "\002\000\062\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\016\040\017\uffaa\024\136\025\135\030\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\047\uffaa" +
    "\050\uffaa\057\uffaa\060\uffaa\064\134\065\uffaa\066\133\001" +
    "\002\000\040\007\132\010\106\011\110\012\111\013\105" +
    "\014\074\032\100\033\075\034\102\035\076\036\104\037" +
    "\103\047\077\057\101\060\107\001\002\000\030\005\067" +
    "\006\062\011\072\016\053\020\066\021\054\022\052\023" +
    "\070\061\065\074\060\077\061\001\002\000\050\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\017\uffbe\030" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\047\uffbe\050\uffbe\057\uffbe\060\uffbe\065\uffbe\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\050\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\074" +
    "\017\uffba\030\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\047\uffba\050\uffba\057\uffba\060\uffba\065\uffba" +
    "\001\002\000\050\007\uffbc\010\uffbc\011\uffbc\012\111\013" +
    "\105\014\074\017\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\047\uffbc\050\uffbc\057\uffbc\060" +
    "\uffbc\065\uffbc\001\002\000\050\007\uffb1\010\106\011\110" +
    "\012\111\013\105\014\074\017\uffb1\030\uffb1\032\100\033" +
    "\075\034\102\035\076\036\104\037\103\047\uffb1\050\uffb1" +
    "\057\101\060\uffb1\065\uffb1\001\002\000\050\007\uffbd\010" +
    "\uffbd\011\uffbd\012\111\013\105\014\074\017\uffbd\030\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\047" +
    "\uffbd\050\uffbd\057\uffbd\060\uffbd\065\uffbd\001\002\000\050" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\074\017" +
    "\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\047\uffbb\050\uffbb\057\uffbb\060\uffbb\065\uffbb\001" +
    "\002\000\050\007\uffb8\010\106\011\110\012\111\013\105" +
    "\014\074\017\uffb8\030\uffb8\032\100\033\075\034\102\035" +
    "\076\036\uffb8\037\uffb8\047\uffb8\050\uffb8\057\uffb8\060\uffb8" +
    "\065\uffb8\001\002\000\050\007\uffb7\010\106\011\110\012" +
    "\111\013\105\014\074\017\uffb7\030\uffb7\032\100\033\075" +
    "\034\102\035\076\036\uffb7\037\uffb7\047\uffb7\050\uffb7\057" +
    "\uffb7\060\uffb7\065\uffb7\001\002\000\050\007\uffb3\010\106" +
    "\011\110\012\111\013\105\014\074\017\uffb3\030\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\047\uffb3" +
    "\050\uffb3\057\uffb3\060\uffb3\065\uffb3\001\002\000\050\007" +
    "\uffb2\010\106\011\110\012\111\013\105\014\074\017\uffb2" +
    "\030\uffb2\032\100\033\075\034\102\035\076\036\104\037" +
    "\103\047\uffb2\050\uffb2\057\uffb2\060\uffb2\065\uffb2\001\002" +
    "\000\050\007\uffb4\010\106\011\110\012\111\013\105\014" +
    "\074\017\uffb4\030\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\047\uffb4\050\uffb4\057\uffb4\060\uffb4\065" +
    "\uffb4\001\002\000\040\010\106\011\110\012\111\013\105" +
    "\014\074\032\100\033\075\034\102\035\076\036\104\037" +
    "\103\047\077\050\125\057\101\060\107\001\002\000\030" +
    "\005\067\006\062\011\072\016\053\020\066\021\054\022" +
    "\052\023\070\061\065\074\060\077\061\001\002\000\050" +
    "\007\uffaf\010\106\011\110\012\111\013\105\014\074\017" +
    "\uffaf\030\uffaf\032\100\033\075\034\102\035\076\036\104" +
    "\037\103\047\uffaf\050\uffaf\057\101\060\107\065\uffaf\001" +
    "\002\000\050\007\uffb5\010\106\011\110\012\111\013\105" +
    "\014\074\017\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\047\uffb5\050\uffb5\057\uffb5\060\uffb5" +
    "\065\uffb5\001\002\000\050\007\uffb6\010\106\011\110\012" +
    "\111\013\105\014\074\017\uffb6\030\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\047\uffb6\050\uffb6\057" +
    "\uffb6\060\uffb6\065\uffb6\001\002\000\050\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\074\017\uffb9\030\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\047\uffb9" +
    "\050\uffb9\057\uffb9\060\uffb9\065\uffb9\001\002\000\030\002" +
    "\uffd1\003\uffd1\004\uffd1\023\uffd1\027\uffd1\045\uffd1\052\uffd1" +
    "\055\uffd1\056\uffd1\062\uffd1\063\uffd1\001\002\000\020\067" +
    "\145\070\147\071\144\072\142\073\143\075\146\100\141" +
    "\001\002\000\030\005\067\006\062\011\072\016\053\020" +
    "\066\021\054\022\052\023\070\061\065\074\060\077\061" +
    "\001\002\000\050\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\017\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\047\uffa8\050\uffa8\057\uffa8\060" +
    "\uffa8\065\uffa8\001\002\000\050\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\017\uffa9\030\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\047\uffa9\050\uffa9" +
    "\057\uffa9\060\uffa9\065\uffa9\001\002\000\040\010\106\011" +
    "\110\012\111\013\105\014\074\032\100\033\075\034\102" +
    "\035\076\036\104\037\103\047\077\057\101\060\107\065" +
    "\140\001\002\000\050\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\017\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\047\uffed\050\uffed\057\uffed" +
    "\060\uffed\065\uffed\001\002\000\004\016\171\001\002\000" +
    "\004\016\167\001\002\000\004\016\165\001\002\000\004" +
    "\016\163\001\002\000\004\016\161\001\002\000\004\016" +
    "\152\001\002\000\004\016\150\001\002\000\004\017\151" +
    "\001\002\000\050\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\017\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\047\uffeb\050\uffeb\057\uffeb\060" +
    "\uffeb\065\uffeb\001\002\000\032\005\067\006\062\011\072" +
    "\016\053\017\uffe5\020\066\021\054\022\052\023\070\061" +
    "\065\074\060\077\061\001\002\000\006\017\uffe6\030\157" +
    "\001\002\000\004\017\156\001\002\000\044\010\106\011" +
    "\110\012\111\013\105\014\074\017\uffe3\030\uffe3\032\100" +
    "\033\075\034\102\035\076\036\104\037\103\047\077\057" +
    "\101\060\107\065\uffe3\001\002\000\050\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\017\uff9c\030\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\047\uff9c" +
    "\050\uff9c\057\uff9c\060\uff9c\065\uff9c\001\002\000\030\005" +
    "\067\006\062\011\072\016\053\020\066\021\054\022\052" +
    "\023\070\061\065\074\060\077\061\001\002\000\044\010" +
    "\106\011\110\012\111\013\105\014\074\017\uffe4\030\uffe4" +
    "\032\100\033\075\034\102\035\076\036\104\037\103\047" +
    "\077\057\101\060\107\065\uffe4\001\002\000\004\017\162" +
    "\001\002\000\050\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\017\uffec\030\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\047\uffec\050\uffec\057\uffec\060" +
    "\uffec\065\uffec\001\002\000\004\017\164\001\002\000\050" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\017" +
    "\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\047\uffea\050\uffea\057\uffea\060\uffea\065\uffea\001" +
    "\002\000\004\017\166\001\002\000\050\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\017\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\047\uffe8" +
    "\050\uffe8\057\uffe8\060\uffe8\065\uffe8\001\002\000\004\017" +
    "\170\001\002\000\050\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\017\uffe9\030\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\047\uffe9\050\uffe9\057\uffe9" +
    "\060\uffe9\065\uffe9\001\002\000\004\021\172\001\002\000" +
    "\004\017\173\001\002\000\050\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\017\uff9e\030\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\047\uff9e\050\uff9e" +
    "\057\uff9e\060\uff9e\065\uff9e\001\002\000\050\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\017\uffb0\030\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\047" +
    "\uffb0\050\uffb0\057\uffb0\060\uffb0\065\uffb0\001\002\000\004" +
    "\021\176\001\002\000\004\017\177\001\002\000\050\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\017\uff9f" +
    "\030\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\047\uff9f\050\uff9f\057\uff9f\060\uff9f\065\uff9f\001\002" +
    "\000\032\005\067\006\062\011\072\016\053\017\uffe5\020" +
    "\066\021\054\022\052\023\070\061\065\074\060\077\061" +
    "\001\002\000\004\017\202\001\002\000\050\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\017\uff9d\030\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\047" +
    "\uff9d\050\uff9d\057\uff9d\060\uff9d\065\uff9d\001\002\000\040" +
    "\010\106\011\110\012\111\013\105\014\074\017\204\032" +
    "\100\033\075\034\102\035\076\036\104\037\103\047\077" +
    "\057\101\060\107\001\002\000\050\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\017\uffae\030\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\047\uffae\050" +
    "\uffae\057\uffae\060\uffae\065\uffae\001\002\000\040\010\106" +
    "\011\110\012\111\013\105\014\074\032\100\033\075\034" +
    "\102\035\076\036\104\037\103\047\077\057\101\060\107" +
    "\065\206\001\002\000\006\007\uffed\015\207\001\002\000" +
    "\030\005\067\006\062\011\072\016\053\020\066\021\054" +
    "\022\052\023\070\061\065\074\060\077\061\001\002\000" +
    "\040\007\211\010\106\011\110\012\111\013\105\014\074" +
    "\032\100\033\075\034\102\035\076\036\104\037\103\047" +
    "\077\057\101\060\107\001\002\000\030\002\uffcb\003\uffcb" +
    "\004\uffcb\023\uffcb\027\uffcb\045\uffcb\052\uffcb\055\uffcb\056" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\030\002\uffc9\003\uffc9" +
    "\004\uffc9\023\uffc9\027\uffc9\045\uffc9\052\uffc9\055\uffc9\056" +
    "\uffc9\062\uffc9\063\uffc9\001\002\000\040\007\214\010\106" +
    "\011\110\012\111\013\105\014\074\032\100\033\075\034" +
    "\102\035\076\036\104\037\103\047\077\057\101\060\107" +
    "\001\002\000\030\002\uffcc\003\uffcc\004\uffcc\023\uffcc\027" +
    "\uffcc\045\uffcc\052\uffcc\055\uffcc\056\uffcc\062\uffcc\063\uffcc" +
    "\001\002\000\004\017\216\001\002\000\050\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7\030\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\047" +
    "\uffe7\050\uffe7\057\uffe7\060\uffe7\065\uffe7\001\002\000\030" +
    "\002\uffca\003\uffca\004\uffca\023\uffca\027\uffca\045\uffca\052" +
    "\uffca\055\uffca\056\uffca\062\uffca\063\uffca\001\002\000\030" +
    "\002\uffef\003\uffef\004\uffef\023\uffef\027\uffef\045\uffef\052" +
    "\uffef\055\uffef\056\uffef\062\uffef\063\uffef\001\002\000\030" +
    "\002\uffee\003\uffee\004\uffee\023\uffee\027\uffee\045\uffee\052" +
    "\uffee\055\uffee\056\uffee\062\uffee\063\uffee\001\002\000\030" +
    "\002\uffda\003\uffda\004\uffda\023\uffda\027\uffda\045\uffda\052" +
    "\uffda\055\uffda\056\uffda\062\uffda\063\uffda\001\002\000\030" +
    "\005\067\006\062\011\072\016\053\020\066\021\054\022" +
    "\052\023\070\061\065\074\060\077\061\001\002\000\040" +
    "\010\106\011\110\012\111\013\105\014\074\017\225\032" +
    "\100\033\075\034\102\035\076\036\104\037\103\047\077" +
    "\057\101\060\107\001\002\000\004\007\226\001\002\000" +
    "\030\002\uffc8\003\uffc8\004\uffc8\023\uffc8\027\uffc8\045\uffc8" +
    "\052\uffc8\055\uffc8\056\uffc8\062\uffc8\063\uffc8\001\002\000" +
    "\004\016\230\001\002\000\006\017\uffde\027\231\001\002" +
    "\000\004\023\244\001\002\000\006\017\uffdc\030\uffdc\001" +
    "\002\000\006\017\uffdf\030\242\001\002\000\004\017\235" +
    "\001\002\000\004\051\236\001\002\000\024\003\031\004" +
    "\025\023\034\027\020\045\006\055\011\056\026\062\007" +
    "\063\023\001\002\000\026\003\031\004\025\023\034\027" +
    "\020\045\006\052\241\055\011\056\026\062\007\063\023" +
    "\001\002\000\030\002\uffff\003\uffff\004\uffff\023\uffff\027" +
    "\uffff\045\uffff\052\uffff\055\uffff\056\uffff\062\uffff\063\uffff" +
    "\001\002\000\030\002\uffe0\003\uffe0\004\uffe0\023\uffe0\027" +
    "\uffe0\045\uffe0\052\uffe0\055\uffe0\056\uffe0\062\uffe0\063\uffe0" +
    "\001\002\000\004\027\231\001\002\000\006\017\uffdd\030" +
    "\uffdd\001\002\000\006\017\uffdb\030\uffdb\001\002\000\030" +
    "\002\ufff2\003\ufff2\004\ufff2\023\ufff2\027\ufff2\045\ufff2\052" +
    "\ufff2\055\ufff2\056\ufff2\062\ufff2\063\ufff2\001\002\000\004" +
    "\007\262\001\002\000\006\015\252\030\251\001\002\000" +
    "\010\007\uffc6\015\uffbf\030\uffbf\001\002\000\004\023\261" +
    "\001\002\000\032\005\067\006\062\011\072\016\053\020" +
    "\066\021\054\022\052\023\070\061\065\064\254\074\060" +
    "\077\061\001\002\000\004\007\uffc5\001\002\000\032\005" +
    "\067\006\062\011\072\016\053\020\066\021\054\022\052" +
    "\023\070\061\065\065\uffc1\074\060\077\061\001\002\000" +
    "\040\007\uffc4\010\106\011\110\012\111\013\105\014\074" +
    "\032\100\033\075\034\102\035\076\036\104\037\103\047" +
    "\077\057\101\060\107\001\002\000\006\030\157\065\uffc2" +
    "\001\002\000\004\065\260\001\002\000\004\007\uffc3\001" +
    "\002\000\006\015\uffc0\030\uffc0\001\002\000\030\002\uffc7" +
    "\003\uffc7\004\uffc7\023\uffc7\027\uffc7\045\uffc7\052\uffc7\055" +
    "\uffc7\056\uffc7\062\uffc7\063\uffc7\001\002\000\030\005\067" +
    "\006\062\011\072\016\053\020\066\021\054\022\052\023" +
    "\070\061\065\074\060\077\061\001\002\000\040\010\106" +
    "\011\110\012\111\013\105\014\074\017\265\032\100\033" +
    "\075\034\102\035\076\036\104\037\103\047\077\057\101" +
    "\060\107\001\002\000\004\051\266\001\002\000\006\053" +
    "\270\054\267\001\002\000\004\050\302\001\002\000\030" +
    "\005\067\006\062\011\072\016\053\020\066\021\054\022" +
    "\052\023\070\061\065\074\060\077\061\001\002\000\010" +
    "\052\uffd7\053\uffd7\054\uffd7\001\002\000\010\052\273\053" +
    "\270\054\267\001\002\000\030\002\uffd9\003\uffd9\004\uffd9" +
    "\023\uffd9\027\uffd9\045\uffd9\052\uffd9\055\uffd9\056\uffd9\062" +
    "\uffd9\063\uffd9\001\002\000\010\052\uffd8\053\uffd8\054\uffd8" +
    "\001\002\000\040\010\106\011\110\012\111\013\105\014" +
    "\074\032\100\033\075\034\102\035\076\036\104\037\103" +
    "\047\077\050\276\057\101\060\107\001\002\000\004\051" +
    "\277\001\002\000\024\003\031\004\025\023\034\027\020" +
    "\045\006\055\011\056\026\062\007\063\023\001\002\000" +
    "\026\003\031\004\025\023\034\027\020\045\006\052\301" +
    "\055\011\056\026\062\007\063\023\001\002\000\010\052" +
    "\uffd6\053\uffd6\054\uffd6\001\002\000\004\051\303\001\002" +
    "\000\024\003\031\004\025\023\034\027\020\045\006\055" +
    "\011\056\026\062\007\063\023\001\002\000\026\003\031" +
    "\004\025\023\034\027\020\045\006\052\305\055\011\056" +
    "\026\062\007\063\023\001\002\000\010\052\uffd5\053\uffd5" +
    "\054\uffd5\001\002\000\004\002\001\001\002\000\030\002" +
    "\uffe1\003\uffe1\004\uffe1\023\uffe1\027\uffe1\045\uffe1\052\uffe1" +
    "\055\uffe1\056\uffe1\062\uffe1\063\uffe1\001\002\000\040\007" +
    "\311\010\106\011\110\012\111\013\105\014\074\032\100" +
    "\033\075\034\102\035\076\036\104\037\103\047\077\057" +
    "\101\060\107\001\002\000\030\002\uffe2\003\uffe2\004\uffe2" +
    "\023\uffe2\027\uffe2\045\uffe2\052\uffe2\055\uffe2\056\uffe2\062" +
    "\uffe2\063\uffe2\001\002\000\030\005\067\006\062\011\072" +
    "\016\053\020\066\021\054\022\052\023\070\061\065\074" +
    "\060\077\061\001\002\000\040\010\106\011\110\012\111" +
    "\013\105\014\074\017\314\032\100\033\075\034\102\035" +
    "\076\036\104\037\103\047\077\057\101\060\107\001\002" +
    "\000\004\051\315\001\002\000\024\003\031\004\025\023" +
    "\034\027\020\045\006\055\011\056\026\062\007\063\023" +
    "\001\002\000\026\003\031\004\025\023\034\027\020\045" +
    "\006\052\317\055\011\056\026\062\007\063\023\001\002" +
    "\000\032\002\uffd4\003\uffd4\004\uffd4\023\uffd4\027\uffd4\045" +
    "\uffd4\046\320\052\uffd4\055\uffd4\056\uffd4\062\uffd4\063\uffd4" +
    "\001\002\000\006\045\006\051\321\001\002\000\024\003" +
    "\031\004\025\023\034\027\020\045\006\055\011\056\026" +
    "\062\007\063\023\001\002\000\030\002\uffd2\003\uffd2\004" +
    "\uffd2\023\uffd2\027\uffd2\045\uffd2\052\uffd2\055\uffd2\056\uffd2" +
    "\062\uffd2\063\uffd2\001\002\000\026\003\031\004\025\023" +
    "\034\027\020\045\006\052\324\055\011\056\026\062\007" +
    "\063\023\001\002\000\030\002\uffd3\003\uffd3\004\uffd3\023" +
    "\uffd3\027\uffd3\045\uffd3\052\uffd3\055\uffd3\056\uffd3\062\uffd3" +
    "\063\uffd3\001\002\000\030\002\ufff1\003\ufff1\004\ufff1\023" +
    "\ufff1\027\ufff1\045\ufff1\052\ufff1\055\ufff1\056\ufff1\062\ufff1" +
    "\063\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\044\002\007\003\011\006\003\007\013\011" +
    "\014\012\021\013\031\014\023\015\027\017\016\020\015" +
    "\023\026\024\012\025\034\031\020\036\004\037\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\307\031\054\036\050\040\062\041\063\043" +
    "\055\044\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\011\006" +
    "\237\011\014\012\021\013\031\014\023\015\027\017\016" +
    "\020\015\023\026\024\012\025\034\031\020\036\004\037" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\246\010\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\154\031\054" +
    "\032\152\033\214\036\050\040\062\041\063\043\055\044" +
    "\056\001\001\000\020\005\212\031\054\036\050\040\062" +
    "\041\063\043\055\044\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\204\031\054" +
    "\036\050\040\062\041\063\043\055\044\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\070\031\054" +
    "\036\050\040\062\041\063\043\055\044\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\202\031\054" +
    "\036\050\040\062\041\063\043\055\044\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\173" +
    "\031\054\036\050\040\062\041\063\043\055\044\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\072\031\054\036\050\040" +
    "\062\041\063\043\055\044\056\001\001\000\002\001\001" +
    "\000\020\005\130\031\054\036\050\040\062\041\063\043" +
    "\055\044\056\001\001\000\020\005\127\031\054\036\050" +
    "\040\062\041\063\043\055\044\056\001\001\000\020\005" +
    "\126\031\054\036\050\040\062\041\063\043\055\044\056" +
    "\001\001\000\020\005\123\031\054\036\050\040\062\041" +
    "\063\043\055\044\056\001\001\000\020\005\122\031\054" +
    "\036\050\040\062\041\063\043\055\044\056\001\001\000" +
    "\020\005\121\031\054\036\050\040\062\041\063\043\055" +
    "\044\056\001\001\000\020\005\120\031\054\036\050\040" +
    "\062\041\063\043\055\044\056\001\001\000\020\005\117" +
    "\031\054\036\050\040\062\041\063\043\055\044\056\001" +
    "\001\000\020\005\116\031\054\036\050\040\062\041\063" +
    "\043\055\044\056\001\001\000\020\005\115\031\054\036" +
    "\050\040\062\041\063\043\055\044\056\001\001\000\020" +
    "\005\114\031\054\036\050\040\062\041\063\043\055\044" +
    "\056\001\001\000\020\005\113\031\054\036\050\040\062" +
    "\041\063\043\055\044\056\001\001\000\020\005\112\031" +
    "\054\036\050\040\062\041\063\043\055\044\056\001\001" +
    "\000\020\005\111\031\054\036\050\040\062\041\063\043" +
    "\055\044\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\125\031\054\036\050\040\062\041\063\043\055\044\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\136\031\054\036\050\040\062\041\063\043" +
    "\055\044\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\154\031\054\032\152" +
    "\033\153\036\050\040\062\041\063\043\055\044\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\157\031\054\036\050\040" +
    "\062\041\063\043\055\044\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\154\031" +
    "\054\032\152\033\200\036\050\040\062\041\063\043\055" +
    "\044\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\207\031\054\036\050\040\062\041" +
    "\063\043\055\044\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\223\031\054\036\050\040\062\041\063\043\055" +
    "\044\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\232\027\233" +
    "\030\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\011\006\003\007\236\011\014\012\021\013\031\014" +
    "\023\015\027\017\016\020\015\023\026\024\012\025\034" +
    "\031\020\036\004\037\032\001\001\000\040\003\011\006" +
    "\237\011\014\012\021\013\031\014\023\015\027\017\016" +
    "\020\015\023\026\024\012\025\034\031\020\036\004\037" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\254\031\054\034" +
    "\252\036\050\040\062\041\063\043\055\044\056\001\001" +
    "\000\002\001\001\000\024\005\154\031\054\032\255\035" +
    "\256\036\050\040\062\041\063\043\055\044\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\263\031\054\036\050\040\062\041\063\043\055\044" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\271\022\270\001\001\000\002\001\001\000\020\005" +
    "\274\031\054\036\050\040\062\041\063\043\055\044\056" +
    "\001\001\000\002\001\001\000\004\022\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\011\006\003\007\277\011\014\012" +
    "\021\013\031\014\023\015\027\017\016\020\015\023\026" +
    "\024\012\025\034\031\020\036\004\037\032\001\001\000" +
    "\040\003\011\006\237\011\014\012\021\013\031\014\023" +
    "\015\027\017\016\020\015\023\026\024\012\025\034\031" +
    "\020\036\004\037\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\011\006\003\007\303\011\014\012" +
    "\021\013\031\014\023\015\027\017\016\020\015\023\026" +
    "\024\012\025\034\031\020\036\004\037\032\001\001\000" +
    "\040\003\011\006\237\011\014\012\021\013\031\014\023" +
    "\015\027\017\016\020\015\023\026\024\012\025\034\031" +
    "\020\036\004\037\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\312\031\054\036\050\040\062\041\063" +
    "\043\055\044\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\011\006\003\007\315\011\014\012\021" +
    "\013\031\014\023\015\027\017\016\020\015\023\026\024" +
    "\012\025\034\031\020\036\004\037\032\001\001\000\040" +
    "\003\011\006\237\011\014\012\021\013\031\014\023\015" +
    "\027\017\016\020\015\023\026\024\012\025\034\031\020" +
    "\036\004\037\032\001\001\000\002\001\001\000\004\017" +
    "\321\001\001\000\042\003\011\006\003\007\322\011\014" +
    "\012\021\013\031\014\023\015\027\017\016\020\015\023" +
    "\026\024\012\025\034\031\020\036\004\037\032\001\001" +
    "\000\002\001\001\000\040\003\011\006\237\011\014\012" +
    "\021\013\031\014\023\015\027\017\016\020\015\023\026" +
    "\024\012\025\034\031\020\036\004\037\032\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST ast;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + s.left +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
         ManejadorErroresFS.getInstance().setErrorSintactico(s.left,s.right+1, "problemas con el caracter = " + s.value);
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
	}
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticoFS$actions {
  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action_part00000000(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 parser.ast = new AST(a);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= AUMENTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Aumento a = (Aumento)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECREMENTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Decremento a = (Decremento)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IMPRIMIR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIG_OP 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Asignacion_Operacion a = (Asignacion_Operacion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= IF 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SWITCH 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAK 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= RETURN 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Return a = (Return)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FUNCION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= FUNCION_LLAMADA tPtoComa 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		FuncionLLamada a = (FuncionLLamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= ARREGLO_LLAMADA tPtoComa 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		ArregloLlamada a = (ArregloLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		AsignacionArreglo a = (AsignacionArreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error tPtoComa 
            {
              nodoAST RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= error tLlvClose 
            {
              nodoAST RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARREGLO_LLAMADA ::= tId tCorchOpen EXPRESION tCorchClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ArregloLlamada(id,exp,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARREGLO_LLAMADA ::= tId tPunto res_Descendente tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,1,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARREGLO_LLAMADA ::= tId tPunto res_Ascendente tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,2,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARREGLO_LLAMADA ::= tId tPunto res_Invertir tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,3,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARREGLO_LLAMADA ::= tId tPunto res_maximo tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,4,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARREGLO_LLAMADA ::= tId tPunto res_minimo tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,5,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION_LLAMADA ::= tId tParOpen TIPO_PARAMETROS tParClose 
            {
              FuncionLLamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> pars = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new FuncionLLamada(pars,id,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCION_LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_PARAMETROS ::= PARAMETROS_CALL 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_PARAMETROS ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS_CALL ::= PARAMETROS_CALL tComa EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; RESULT.add(b);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS_CALL",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS_CALL ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS_CALL",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETURN ::= tReturn EXPRESION tPtoComa 
            {
              Return RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Return(b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETURN ::= tReturn tPtoComa 
            {
              Return RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Return(aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION ::= tFuncion tId tParOpen TIPO_PARAMETROS_FUNCION tParClose tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion(id,par,ins,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_PARAMETROS_FUNCION ::= PARAMETROS 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS_FUNCION",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_PARAMETROS_FUNCION ::= 
            {
              LinkedList<Simbolo> RESULT =null;
		 RESULT = new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS_FUNCION",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= PARAMETROS tComa PARAMETRO 
            {
              LinkedList<Simbolo> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Simbolo> pars = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Simbolo par = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = pars; RESULT.add(par);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Simbolo> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Simbolo par = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(par);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO ::= tVar tId 
            {
              Simbolo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Simbolo(id,new Tipo(Tipo.Primitivo.NULL));
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETRO",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BREAK ::= tBreak tPtoComa 
            {
              Break RESULT =null;
		 RESULT =  new Break(); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= tSelecciona tParOpen EXPRESION tParClose tLlvOpen LST_CASOS tLlvClose 
            {
              Switch RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion control = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> casos = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Switch(control,casos,controlleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LST_CASOS ::= LST_CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> lc = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = lc; RESULT.add(c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_CASOS",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LST_CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_CASOS",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASO ::= tCaso EXPRESION tDosPuntos tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Caso RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Caso(exp,ins,expleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASO ::= tDefecto tDosPuntos tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Caso RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Caso(ins,insleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new If(cond,ins,condleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose tSino tLlvOpen INSTRUCCIONES tLlvClose 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<nodoAST> ins1 = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins2 = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new If(cond,ins1,ins2,condleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-10)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose tSino IF 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int tIfleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int tIfright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		If tIf = (If)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new If(cond,ins,tIf,condleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIG_OP ::= tId TIPO_AO EXPRESION tPtoComa 
            {
              Asignacion_Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Asignacion_Operacion.TipoAO b = (Asignacion_Operacion.TipoAO)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Asignacion_Operacion(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_OP",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_AO ::= tSumaAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.SUMA;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_AO ::= tRestaAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.RESTA;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_AO ::= tMultipliAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.MULTIPLICACION;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_AO ::= tDiviAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.DIVISION;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= tId tIgual EXPRESION tPtoComa 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Asignacion(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION_ARREGLO ::= tId tCorchOpen EXPRESION tCorchClose tIgual EXPRESION tPtoComa 
            {
              AsignacionArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new AsignacionArreglo(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AUMENTO ::= tId tAumen tPtoComa 
            {
              Aumento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		 RESULT = new Aumento(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("AUMENTO",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECREMENTO ::= tId tDecremen tPtoComa 
            {
              Decremento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		 RESULT = new Decremento(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECREMENTO",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IMPRIMIR ::= tImprimir tParOpen EXPRESION tParClose tPtoComa 
            {
              Imprimir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new Imprimir(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= tVar ASIG_VAL tPtoComa 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG_VAL ::= tId 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 Identificador id = new Identificador(a,aleft);
                                                        LinkedList<Identificador> lId = new LinkedList<>();
                                                        lId.add(id);
                                                        RESULT = new Declaracion(lId,aleft);
                                                        
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_VAL",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG_VAL ::= LST_ID tIgual TIPO_DEC_ASIG 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Identificador> a = (LinkedList<Identificador>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        if(b instanceof Expresion){
                                                            RESULT = new Declaracion(a,(Expresion)b,bleft);
                                                        }else{
                                                            RESULT = new Arreglo(a,(LinkedList<Expresion>)b,aleft);
                                                        }
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_VAL",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO_DEC_ASIG ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_DEC_ASIG",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO_DEC_ASIG ::= tCorchOpen TIPO_PARAM_ARREGLO tCorchClose 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_DEC_ASIG",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO_PARAM_ARREGLO ::= PARAMETROS_CALL 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAM_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_PARAM_ARREGLO ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAM_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LST_ID ::= LST_ID tComa tId 
            {
              LinkedList<Identificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Identificador> a = (LinkedList<Identificador>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; Identificador id = new Identificador(b,bleft); RESULT.add(id);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_ID",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LST_ID ::= tId 
            {
              LinkedList<Identificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		  RESULT = new LinkedList<>();
                                                        Identificador id = new Identificador(a,aleft);
                                                        RESULT.add(id);
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_ID",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= tMenos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,Operacion.Operador.NEGACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION tMas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.SUMA,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION tMenos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.RESTA,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION tPor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.MULTIPLICACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION tDiv EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.DIVISION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION tElev EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.ELEVACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION tIgualDoble EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION tDistinto EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.DIFERENTE_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION tMenorQue EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MENOR_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION tMenorIgual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MENOR_IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION tMayorQue EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION tMayorIgual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION tAnd EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,b,Operacion.Operador.AND,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION tOr EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,b,Operacion.Operador.OR,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= tNot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,Operacion.Operador.NOT,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION tInterrogacion EXPRESION tDosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Ternario(cond,t,f,condleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= tParOpen EXPRESION tParClose 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(new Double(a),new Tipo(Tipo.Primitivo.NUMBER),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= tDec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(new Double(a),new Tipo(Tipo.Primitivo.NUMBER),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= tCad 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.STRING),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Identificador(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= tId tAumen 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.AUMENTO,aleft);
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= tId tDecremen 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.DECREMENTO,aleft); 
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= tTrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= tFalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= ARREGLO_LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ArregloLlamada a = (ArregloLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= FUNCION_LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		FuncionLLamada a = (FuncionLLamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= CREAR_VENTANA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearVentana a = (CrearVentana)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= CREAR_CONTENEDOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearContenedor a = (CrearContenedor)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= LEER_GXML 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LeerGxml a = (LeerGxml)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= OBTENER_POR_ETIQUETA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObtenerPorEtiqueta a = (ObtenerPorEtiqueta)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LEER_GXML ::= res_leerGxml tParOpen tCad tParClose 
            {
              LeerGxml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new LeerGxml(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LEER_GXML",33, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OBTENER_POR_ETIQUETA ::= tId tPunto res_obtenerPorEtiqueta tParOpen tCad tParClose 
            {
              ObtenerPorEtiqueta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ObtenerPorEtiqueta(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("OBTENER_POR_ETIQUETA",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CREAR_VENTANA ::= res_crear_ventana tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearVentana RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new CrearVentana(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_VENTANA",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CREAR_CONTENEDOR ::= tId tPunto res_crear_contenedor tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearContenedor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new CrearContenedor(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_CONTENEDOR",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CREAR_TEXTO ::= tId tPunto res_crear_texto tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearTexto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new CrearTexto(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_TEXTO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticoFS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
              return CUP$sintacticoFS$do_action_part00000000(
                               CUP$sintacticoFS$act_num,
                               CUP$sintacticoFS$parser,
                               CUP$sintacticoFS$stack,
                               CUP$sintacticoFS$top);
    }
}

}
