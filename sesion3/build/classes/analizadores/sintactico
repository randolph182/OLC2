// jar en la pagina -> http://www2.cs.tum.edu/projects/cup/
package analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;
//clases que formaran el AST
import AST.Expresiones.*;
import AST.Instrucciones.*;
import AST.Expresiones.Operacion.*;
import AST.*;
import Entorno.*;
//acciones que se programan en el parser
parser code
{:
    public AST ast;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
	}
    

:}


terminal    String tPor;
terminal    String tMas;
terminal    String tNum;
terminal    String tId;
terminal    String tParOpen;
terminal    String tParClose;
terminal    String tInt;
terminal    String tString;
terminal    String tBoolean;
terminal    String tIgual;
terminal    String tImprimir;
terminal    String tPtoComa;
terminal    String tTrue;
terminal    String tFalse;

non terminal   S;
non terminal   LinkedList<nodoAST> INSTRUCCIONES;
non terminal   nodoAST INSTRUCCION;
non terminal   Tipo TIPO;
non terminal   Expresion EXPRESION;
non terminal   Declaracion DECLARACION;
non terminal   Asignacion ASIGNACION;
non terminal   Imprimir IMPRIMIR;


precedence left  tMas;
precedence left  tPor;

/* ******************************************* Gramatica*********************** */
start with S;

S::=                INSTRUCCIONES:a
                        {:
                            parser.ast = new AST(a);
                        :}
                    ;

INSTRUCCIONES::=    INSTRUCCIONES:lstInst INSTRUCCION:inst 
                        {:
                            RESULT = lstInst;
                            RESULT.add(inst);
                        :}
                    |INSTRUCCION:inst
                        {:
                            RESULT = new LinkedList<>();
                            RESULT.add(inst);
                        :}
                    ;

INSTRUCCION::=      DECLARACION:dec tPtoComa {: RESULT = dec;:}
                    | ASIGNACION:asig tPtoComa {: RESULT = asig; :}
                    | IMPRIMIR:imp tPtoComa {: RESULT = imp; :}
                    ;

DECLARACION::=      TIPO:t tId:id tIgual EXPRESION:exp {: RESULT = new Declaracion(t,id,exp,idleft); :}
                    ;

ASIGNACION::=       tId:id tIgual EXPRESION:exp {: RESULT  = new Asignacion(id,exp,idleft); :}
                    ;

IMPRIMIR::=         tImprimir tParOpen EXPRESION:a tParClose {: RESULT = new Imprimir(a,aleft);:}
                    ;

EXPRESION::=        EXPRESION:a tMas EXPRESION:b {: RESULT = new Aritmetica(a,b,Operacion.Operador.SUMA);:}
                    |EXPRESION:a tPor EXPRESION:b {: RESULT = new Aritmetica(a,b,Operacion.Operador.MULTIPLICACION);:}
                    |tId:a {:RESULT = new Identificador(a,aleft);:}
                    |tTrue:a {:RESULT = new Primitivo(a, new Tipo(Tipo.TipoPrimitivo.BOOLEAN)); :}
                    |tFalse:a {:RESULT = new Primitivo(a, new Tipo(Tipo.TipoPrimitivo.BOOLEAN)); :}
                    |tNum:a {:RESULT = new Primitivo(Integer.valueOf(a), new Tipo(Tipo.TipoPrimitivo.INT)); :}
                    ;

TIPO::=             tInt        {:  RESULT = new Tipo(Tipo.TipoPrimitivo.INT);:}
                    |tString    {:  RESULT = new Tipo(Tipo.TipoPrimitivo.STRING);:}
                    |tBoolean   {:  RESULT = new Tipo(Tipo.TipoPrimitivo.BOOLEAN);:}
                    ;
