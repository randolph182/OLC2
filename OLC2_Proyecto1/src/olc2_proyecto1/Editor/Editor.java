/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package olc2_proyecto1.Editor;

import FuncionScript.ErroresFS.ErrorFS;
import FuncionScript.ErroresFS.ManejadorErroresFS;
import GenericXML.ErroresGXML.ManejadorErroresGXML;
import java.io.File;
//import com.sun.xml.internal.txw2.TXW;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import olc2_proyecto1.Editor.TextLineNumber;

/**
 *
 * @author rm
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    
    public static JTextArea consola;
    public Editor() {
        initComponents();
        consola = jtxtConsola;
//        JScrollPane scrollPane = new JScrollPane(jtxtAreaTrabajo);
        TextLineNumber tln = new TextLineNumber(jtxtAreaTrabajo);
//        scrollPane.setRowHeaderView(tln);
        jScrollPane1.setRowHeaderView(tln);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtxtAreaTrabajo = new javax.swing.JTextArea();
        btnCompilar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxtConsola = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMnuItmFS = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtxtAreaTrabajo.setColumns(20);
        jtxtAreaTrabajo.setRows(5);
        jtxtAreaTrabajo.setTabSize(2);
        jScrollPane1.setViewportView(jtxtAreaTrabajo);

        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        jtxtConsola.setBackground(new java.awt.Color(0, 0, 0));
        jtxtConsola.setColumns(20);
        jtxtConsola.setForeground(new java.awt.Color(255, 255, 255));
        jtxtConsola.setRows(5);
        jScrollPane2.setViewportView(jtxtConsola);

        jButton1.setText("CompilaGXML");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Errores");

        jMnuItmFS.setText("Errores FS");
        jMnuItmFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuItmFSActionPerformed(evt);
            }
        });
        jMenu3.add(jMnuItmFS);

        jMenuItem1.setText("Errores GXML");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCompilar)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        ManejadorErroresFS.getInstance().formateraInstancia();
        FileWriter fichero = null;
        PrintWriter pw = null;
        
        try {
            fichero =  new FileWriter("entrada.txt");
            pw = new PrintWriter(fichero);
            //la alternativa mas rapida es  pw.println(txtAreaTrabajo.getText());
            char[] informacion = jtxtAreaTrabajo.getText().toCharArray();
            for (int i = 0; i < jtxtAreaTrabajo.getText().length(); i++) {
                if(informacion[i] == '\n')
                    pw.println("");
                else
                    pw.print(informacion[i]);
            }
        } catch (Exception e) {
            System.out.println("Error en la escritura del archivo en Editor" + e);
        } finally{
            try {
                //si utiliza el finally par asegurarse de haber cerrado el archivo
                if(null != fichero)
                    fichero.close();
                    analizar("entrada.txt"); //ANALIZAMOS EL ARCHIVO DE ENTRADA
            } catch (Exception e) {
                System.out.println("Error al cerrar el archivo en la Clase Editor" + e);
            }
        }
        
    }//GEN-LAST:event_btnCompilarActionPerformed

    private void jMnuItmFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuItmFSActionPerformed
        if(!ManejadorErroresFS.getInstance().generarReporte()){
            JOptionPane.showMessageDialog(null, "no hay datos en la que mostrar o no hubo un problema generando el reporte");
        }else{
            try { 
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler  errFS.html");
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMnuItmFSActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ManejadorErroresGXML.getInstance().formateraInstancia();
        FileWriter fichero = null;
        PrintWriter pw = null;
        
        try {
            fichero =  new FileWriter("entrada2.txt");
            pw = new PrintWriter(fichero);
            //la alternativa mas rapida es  pw.println(txtAreaTrabajo.getText());
            char[] informacion = jtxtAreaTrabajo.getText().toCharArray();
            for (int i = 0; i < jtxtAreaTrabajo.getText().length(); i++) {
                if(informacion[i] == '\n')
                    pw.println("");
                else
                    pw.print(informacion[i]);
            }
        } catch (Exception e) {
            System.out.println("Error en la escritura del archivo en Editor" + e);
        } finally{
            try {
                //si utiliza el finally par asegurarse de haber cerrado el archivo
                if(null != fichero)
                    fichero.close();
                    analizar2("entrada2.txt"); //ANALIZAMOS EL ARCHIVO DE ENTRADA
            } catch (Exception e) {
                System.out.println("Error al cerrar el archivo en la Clase Editor" + e);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(!ManejadorErroresGXML.getInstance().generarReporte()){
            JOptionPane.showMessageDialog(null, "no hay datos en la que mostrar o no hubo un problema generando el reporte gxml");
        }else{
            try { 
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler  errGXML.html");
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMnuItmFS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jtxtAreaTrabajo;
    private javax.swing.JTextArea jtxtConsola;
    // End of variables declaration//GEN-END:variables

    public static void analizar(String path){
        analizadores.FS.sintacticoFS parserFS;
        try {
            consola.setText("");
            parserFS = new analizadores.FS.sintacticoFS(new analizadores.FS.lexicoFS(new FileInputStream(path)));
            parserFS.parse();
            parserFS.ast.ejecutar();
            
//            ManejadorErroresFS e = ManejadorErroresFS.getInstance();
//            for(ErrorFS fs:e.getTablaErrores()){   
//                System.out.println("tipo: " +fs.getTipo()+ " descripcion "+ fs.getDescripcion());
//            }
        } catch (Exception e) {
            ManejadorErroresFS.getInstance();
            System.out.println("Error Fatal al trata de analizar el archivo");
            System.out.println("Causa " + e.getCause());
        }
        
        
    }
    
        public static void analizar2(String path){
        analizadores.GXML.sintacticoGXML parserGXML;
        try {
            consola.setText("");
            parserGXML = new analizadores.GXML.sintacticoGXML(new analizadores.GXML.lexicoGXML(new FileInputStream(path)));
            parserGXML.parse();
            
            File archivo = new File("traduccion01.fs");
            FileWriter fichero = null;
            if(archivo.delete()){
                fichero   = new FileWriter("traduccion01.fs",true);
                parserGXML.ast.traducir(fichero);
                if(fichero != null)
                    fichero.close();
            }else
                System.out.println("No se puede crear el archivo para la traduccion");
            
        } catch (Exception e) {
            ManejadorErroresFS.getInstance();
            System.out.println("Error Fatal al trata de analizar el archivo");
            System.out.println("Causa " + e.getCause());
        }
        
        
    }
    
    
    public static void insertarTextoConsola(String informacion){
       
        
        
       if(consola.getText().equals("")){
           consola.append("> "+informacion);
       } else{
           String texto =  consola.getText();
           consola.setText(""); //limpiamos
           texto += "\n";
           texto += "> " + informacion;
           consola.append(texto);
       }
       
       
       
    }
}
