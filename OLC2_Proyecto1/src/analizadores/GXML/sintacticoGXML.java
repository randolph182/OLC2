
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.GXML;

import java_cup.runtime.*;
import java.util.LinkedList;
import FuncionScript.Entorno.*;
import GenericXML.*;
import GenericXML.ErroresGXML.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticoGXML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticoGXML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticoGXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\005\012\000\002\006\013\000" +
    "\002\010\004\000\002\010\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\027\004\000\002\027\003\000\002\030\003" +
    "\000\002\030\004\000\002\016\013\000\002\017\004\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\031\004\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\004\000\002" +
    "\033\013\000\002\034\004\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\046\012\000\002\047\004\000\002" +
    "\047\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\072\004\000\002\072" +
    "\003\000\002\051\004\000\002\051\003\000\002\052\003" +
    "\000\002\052\003\000\002\053\012\000\002\054\004\000" +
    "\002\054\003\000\002\055\012\000\002\056\012\000\002" +
    "\057\012\000\002\060\004\000\002\060\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\013\000\002\063\003\000\002" +
    "\063\003\000\002\064\004\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\066\005\000\002\067\013\000\002\070\005\000\002" +
    "\071\005\000\002\043\005\000\002\044\005\000\002\045" +
    "\007\000\002\042\005\000\002\036\005\000\002\037\005" +
    "\000\002\040\005\000\002\041\005\000\002\011\005\000" +
    "\002\012\005\000\002\013\005\000\002\014\007\000\002" +
    "\015\007\000\002\021\005\000\002\022\005\000\002\023" +
    "\005\000\002\024\005\000\002\025\005\000\002\026\003" +
    "\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\003\005\007\007\001\002\000\010\002" +
    "\000\003\005\007\007\001\002\000\004\010\377\001\002" +
    "\000\004\002\376\001\002\000\006\011\014\013\013\001" +
    "\002\000\010\002\ufffe\003\ufffe\007\ufffe\001\002\000\010" +
    "\002\ufffc\003\ufffc\007\ufffc\001\002\000\010\002\ufffd\003" +
    "\ufffd\007\ufffd\001\002\000\014\014\032\016\023\017\033" +
    "\020\036\021\031\001\002\000\004\010\015\001\002\000" +
    "\004\005\016\001\002\000\004\007\017\001\002\000\004" +
    "\012\020\001\002\000\004\011\021\001\002\000\004\010" +
    "\022\001\002\000\010\002\ufffa\003\ufffa\007\ufffa\001\002" +
    "\000\004\015\374\001\002\000\016\010\ufff7\014\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\001\002\000\016\010\ufff3" +
    "\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\001\002\000" +
    "\016\010\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\001\002\000\016\010\ufff5\014\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\001\002\000\016\010\ufff2\014\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\001\002\000\004\015\370\001" +
    "\002\000\004\015\366\001\002\000\004\015\364\001\002" +
    "\000\016\010\044\014\032\016\023\017\033\020\036\021" +
    "\031\001\002\000\016\010\ufff6\014\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\001\002\000\004\015\037\001\002\000" +
    "\004\022\040\001\002\000\004\005\041\001\002\000\004" +
    "\023\042\001\002\000\016\010\uff8e\014\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\021\uff8e\001\002\000\016\010\ufff8\014\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\001\002\000\006\003" +
    "\046\007\047\001\002\000\006\003\uffef\007\uffef\001\002" +
    "\000\004\010\363\001\002\000\004\024\055\001\002\000" +
    "\006\003\ufff0\007\ufff0\001\002\000\006\003\046\007\052" +
    "\001\002\000\006\012\054\024\055\001\002\000\006\003" +
    "\ufff1\007\ufff1\001\002\000\004\013\361\001\002\000\020" +
    "\014\032\017\033\025\066\026\063\027\060\030\073\031" +
    "\070\001\002\000\022\010\111\014\032\017\033\025\066" +
    "\026\063\027\060\030\073\031\070\001\002\000\022\010" +
    "\uffe4\014\uffe4\017\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\001\002\000\004\015\106\001\002\000\022\010" +
    "\uffe8\014\uffe8\017\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\001\002\000\022\010\uffe9\014\uffe9\017\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\001\002\000\004" +
    "\015\104\001\002\000\022\010\uffe5\014\uffe5\017\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002\000\022" +
    "\010\uffe6\014\uffe6\017\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\001\002\000\004\015\102\001\002\000\022" +
    "\010\uffe7\014\uffe7\017\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\001\002\000\004\015\076\001\002\000\022" +
    "\010\uffeb\014\uffeb\017\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\001\002\000\022\010\uffea\014\uffea\017\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\001\002\000" +
    "\004\015\074\001\002\000\004\006\075\001\002\000\052" +
    "\010\uff89\014\uff89\016\uff89\017\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\043\uff89\044\uff89\045\uff89\053\uff89\055\uff89\056" +
    "\uff89\001\002\000\006\032\100\033\077\001\002\000\050" +
    "\010\uff86\014\uff86\016\uff86\017\uff86\025\uff86\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\043\uff86\044\uff86\045\uff86\055\uff86\056\uff86\001" +
    "\002\000\050\010\uff87\014\uff87\016\uff87\017\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\043\uff87\044\uff87\045\uff87\055\uff87" +
    "\056\uff87\001\002\000\022\010\uff88\014\uff88\017\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\001\002\000\004" +
    "\006\103\001\002\000\052\010\uff8c\014\uff8c\016\uff8c\017" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\043\uff8c\044\uff8c\045" +
    "\uff8c\053\uff8c\055\uff8c\056\uff8c\001\002\000\004\006\105" +
    "\001\002\000\052\010\uff8b\014\uff8b\016\uff8b\017\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\043\uff8b\044\uff8b\045\uff8b\053" +
    "\uff8b\055\uff8b\056\uff8b\001\002\000\004\006\107\001\002" +
    "\000\052\010\uff8a\014\uff8a\016\uff8a\017\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\035\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\043\uff8a\044\uff8a\045\uff8a\053\uff8a\055" +
    "\uff8a\056\uff8a\001\002\000\022\010\uffec\014\uffec\017\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\001\002\000" +
    "\006\003\117\007\116\001\002\000\006\003\uffdd\007\uffdd" +
    "\001\002\000\006\003\uffdf\007\uffdf\001\002\000\006\003" +
    "\uffe0\007\uffe0\001\002\000\006\003\uffe2\007\uffe2\001\002" +
    "\000\014\034\130\042\126\051\125\052\131\054\127\001" +
    "\002\000\004\010\360\001\002\000\006\003\117\007\123" +
    "\001\002\000\006\003\uffde\007\uffde\001\002\000\006\003" +
    "\uffe1\007\uffe1\001\002\000\016\012\132\034\130\042\126" +
    "\051\125\052\131\054\127\001\002\000\006\003\uffe3\007" +
    "\uffe3\001\002\000\022\016\023\025\066\026\063\027\060" +
    "\030\073\035\141\055\342\056\340\001\002\000\036\016" +
    "\023\017\033\025\066\026\063\027\060\030\073\035\141" +
    "\036\207\037\201\040\206\041\173\043\256\044\244\045" +
    "\136\001\002\000\020\025\066\026\063\027\060\030\073" +
    "\035\141\045\136\053\137\001\002\000\022\017\033\025" +
    "\066\026\063\035\141\036\207\037\201\040\206\041\173" +
    "\001\002\000\020\025\066\026\063\027\060\030\073\035" +
    "\141\045\136\053\137\001\002\000\004\024\133\001\002" +
    "\000\004\010\134\001\002\000\006\003\uffed\007\uffed\001" +
    "\002\000\022\010\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\035\uff9f\045\uff9f\053\uff9f\001\002\000\004\015\167\001" +
    "\002\000\004\015\165\001\002\000\022\010\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\035\uffa2\045\uffa2\053\uffa2\001" +
    "\002\000\004\015\163\001\002\000\022\010\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\035\uffa3\045\uffa3\053\uffa3\001" +
    "\002\000\022\010\152\025\066\026\063\027\060\030\073" +
    "\035\141\045\136\053\137\001\002\000\022\010\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\035\uffa5\045\uffa5\053\uffa5" +
    "\001\002\000\022\010\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\035\uff9e\045\uff9e\053\uff9e\001\002\000\022\010\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\035\uffa0\045\uffa0\053" +
    "\uffa0\001\002\000\022\010\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\035\uffa4\045\uffa4\053\uffa4\001\002\000\022\010" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\035\uffa1\045\uffa1" +
    "\053\uffa1\001\002\000\022\010\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\035\uffa6\045\uffa6\053\uffa6\001\002\000\006" +
    "\005\154\007\155\001\002\000\004\007\uffa8\001\002\000" +
    "\004\007\uffa7\001\002\000\004\034\130\001\002\000\004" +
    "\007\157\001\002\000\004\012\160\001\002\000\004\052" +
    "\161\001\002\000\004\010\162\001\002\000\006\003\uffa9" +
    "\007\uffa9\001\002\000\004\004\164\001\002\000\046\010" +
    "\uff96\016\uff96\017\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\043\uff96\044" +
    "\uff96\045\uff96\053\uff96\055\uff96\056\uff96\001\002\000\004" +
    "\004\166\001\002\000\022\010\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\035\uff9d\045\uff9d\053\uff9d\001\002\000\004" +
    "\022\170\001\002\000\004\005\171\001\002\000\004\023" +
    "\172\001\002\000\042\010\uff97\016\uff97\017\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\043\uff97\044\uff97\045\uff97\053\uff97\001\002" +
    "\000\004\015\226\001\002\000\024\010\uffd9\017\uffd9\025" +
    "\uffd9\026\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\001\002\000\024\010\220\017\033\025\066\026\063\035" +
    "\141\036\207\037\201\040\206\041\173\001\002\000\024" +
    "\010\uffd8\017\uffd8\025\uffd8\026\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\001\002\000\024\010\uffd6\017\uffd6" +
    "\025\uffd6\026\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\001\002\000\024\010\uffd7\017\uffd7\025\uffd7\026\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000" +
    "\004\015\215\001\002\000\024\010\uffd2\017\uffd2\025\uffd2" +
    "\026\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001" +
    "\002\000\024\010\uffd3\017\uffd3\025\uffd3\026\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\001\002\000\024\010" +
    "\uffd4\017\uffd4\025\uffd4\026\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\001\002\000\024\010\uffd1\017\uffd1\025" +
    "\uffd1\026\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\001\002\000\004\015\213\001\002\000\004\015\211\001" +
    "\002\000\024\010\uffd5\017\uffd5\025\uffd5\026\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000\004\004" +
    "\212\001\002\000\040\010\uff95\016\uff95\017\uff95\025\uff95" +
    "\026\uff95\027\uff95\030\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\043\uff95\044\uff95\045\uff95\001\002\000\006" +
    "\032\100\033\077\001\002\000\040\010\uff93\016\uff93\017" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\043\uff93\044\uff93\045\uff93\001" +
    "\002\000\004\006\216\001\002\000\040\010\uff94\016\uff94" +
    "\017\uff94\025\uff94\026\uff94\027\uff94\030\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\043\uff94\044\uff94\045\uff94" +
    "\001\002\000\024\010\uffda\017\uffda\025\uffda\026\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\001\002\000\004" +
    "\005\221\001\002\000\004\007\222\001\002\000\004\012" +
    "\223\001\002\000\004\034\224\001\002\000\004\010\225" +
    "\001\002\000\006\003\uffdb\007\uffdb\001\002\000\006\032" +
    "\100\033\077\001\002\000\040\010\uff92\016\uff92\017\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\043\uff92\044\uff92\045\uff92\001\002" +
    "\000\022\010\231\025\066\026\063\027\060\030\073\035" +
    "\141\045\136\053\137\001\002\000\006\005\154\007\155" +
    "\001\002\000\004\007\233\001\002\000\004\012\234\001" +
    "\002\000\004\054\235\001\002\000\004\010\236\001\002" +
    "\000\006\003\uff9c\007\uff9c\001\002\000\040\010\uffcc\016" +
    "\uffcc\017\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\001\002\000\040\010\uffc0\016\uffc0\017\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\001\002\000\040" +
    "\010\uffca\016\uffca\017\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\043\uffca" +
    "\044\uffca\045\uffca\001\002\000\040\010\uffcb\016\uffcb\017" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb\001" +
    "\002\000\040\010\uffcd\016\uffcd\017\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\001\002\000\004\015\330" +
    "\001\002\000\040\010\uffc1\016\uffc1\017\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000\040\010" +
    "\uffc3\016\uffc3\017\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\001\002\000\040\010\uffc9\016\uffc9\017\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002" +
    "\000\040\010\uffc4\016\uffc4\017\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\001\002\000\040\010\uffc6\016" +
    "\uffc6\017\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\001\002\000\040\010\uffc5\016\uffc5\017\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5\001\002\000\040" +
    "\010\uffce\016\uffce\017\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\043\uffce" +
    "\044\uffce\045\uffce\001\002\000\040\010\263\016\023\017" +
    "\033\025\066\026\063\027\060\030\073\035\141\036\207" +
    "\037\201\040\206\041\173\043\256\044\244\045\136\001" +
    "\002\000\040\010\uffc7\016\uffc7\017\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\001\002\000\004\015\261" +
    "\001\002\000\040\010\uffc2\016\uffc2\017\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\043\uffc2\044\uffc2\045\uffc2\001\002\000\040\010" +
    "\uffc8\016\uffc8\017\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\001\002\000\004\006\262\001\002\000\040" +
    "\010\uff99\016\uff99\017\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\043\uff99" +
    "\044\uff99\045\uff99\001\002\000\004\007\270\001\002\000" +
    "\040\010\uffcf\016\uffcf\017\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\001\002\000\004\007\uffbb\001\002" +
    "\000\004\007\uffba\001\002\000\004\012\325\001\002\000" +
    "\010\012\uffbe\046\276\050\275\001\002\000\004\007\273" +
    "\001\002\000\004\007\uffbc\001\002\000\010\012\uffbf\046" +
    "\276\050\275\001\002\000\004\007\uffbd\001\002\000\004" +
    "\010\317\001\002\000\004\010\277\001\002\000\004\007" +
    "\300\001\002\000\004\047\306\001\002\000\004\007\uffb7" +
    "\001\002\000\004\007\303\001\002\000\006\012\305\047" +
    "\306\001\002\000\004\007\uffb8\001\002\000\004\046\315" +
    "\001\002\000\004\010\307\001\002\000\004\005\310\001" +
    "\002\000\004\007\311\001\002\000\004\012\312\001\002" +
    "\000\004\047\313\001\002\000\004\010\314\001\002\000" +
    "\004\007\uffb6\001\002\000\004\010\316\001\002\000\004" +
    "\007\uffb9\001\002\000\004\005\320\001\002\000\004\007" +
    "\321\001\002\000\004\012\322\001\002\000\004\050\323" +
    "\001\002\000\004\010\324\001\002\000\004\007\uffb5\001" +
    "\002\000\004\042\326\001\002\000\004\010\327\001\002" +
    "\000\006\003\uffd0\007\uffd0\001\002\000\004\006\331\001" +
    "\002\000\040\010\uff98\016\uff98\017\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\043\uff98\044\uff98\045\uff98\001\002\000\024\010\uffaf" +
    "\016\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\035\uffaf\055" +
    "\uffaf\056\uffaf\001\002\000\024\010\uffad\016\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\035\uffad\055\uffad\056\uffad\001" +
    "\002\000\024\010\uffaa\016\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\035\uffaa\055\uffaa\056\uffaa\001\002\000\024\010" +
    "\352\016\023\025\066\026\063\027\060\030\073\035\141" +
    "\055\342\056\340\001\002\000\024\010\uffae\016\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\035\uffae\055\uffae\056\uffae" +
    "\001\002\000\024\010\uffb1\016\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\035\uffb1\055\uffb1\056\uffb1\001\002\000\004" +
    "\015\350\001\002\000\024\010\uffac\016\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\035\uffac\055\uffac\056\uffac\001\002" +
    "\000\004\015\346\001\002\000\024\010\uffb2\016\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\035\uffb2\055\uffb2\056\uffb2" +
    "\001\002\000\024\010\uffb0\016\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\035\uffb0\055\uffb0\056\uffb0\001\002\000\024" +
    "\010\uffab\016\uffab\025\uffab\026\uffab\027\uffab\030\uffab\035" +
    "\uffab\055\uffab\056\uffab\001\002\000\004\004\347\001\002" +
    "\000\024\010\uff9b\016\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\035\uff9b\055\uff9b\056\uff9b\001\002\000\006\032\100" +
    "\033\077\001\002\000\024\010\uff9a\016\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\035\uff9a\055\uff9a\056\uff9a\001\002" +
    "\000\004\007\354\001\002\000\024\010\uffb3\016\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\035\uffb3\055\uffb3\056\uffb3" +
    "\001\002\000\004\012\355\001\002\000\004\051\356\001" +
    "\002\000\004\010\357\001\002\000\006\003\uffb4\007\uffb4" +
    "\001\002\000\006\003\uffdc\007\uffdc\001\002\000\004\010" +
    "\362\001\002\000\010\002\ufff9\003\ufff9\007\ufff9\001\002" +
    "\000\006\003\uffee\007\uffee\001\002\000\004\004\365\001" +
    "\002\000\050\010\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\035" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\001\002\000\004\004\367\001\002\000\030\010" +
    "\uff91\014\uff91\016\uff91\017\uff91\020\uff91\021\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\001\002\000\004\022" +
    "\371\001\002\000\004\005\372\001\002\000\004\023\373" +
    "\001\002\000\016\010\uff8d\014\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\001\002\000\004\004\375\001\002\000\052" +
    "\010\uff90\014\uff90\016\uff90\017\uff90\020\uff90\021\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\043\uff90\044\uff90\045\uff90\055\uff90\056" +
    "\uff90\001\002\000\004\002\001\001\002\000\010\002\ufffb" +
    "\003\ufffb\007\ufffb\001\002\000\010\002\uffff\003\uffff\007" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\014\002\005\003\003\004\007\005\011\006" +
    "\010\001\001\000\010\004\377\005\011\006\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\023\010\033\011\034\012\026\013\025\014\024\015" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\042\011\034\012\026\013\025\014" +
    "\024\015\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\044\027\050" +
    "\030\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\044\030\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\071\013\063\017\055\020\070\021\061" +
    "\022\060\023\066\024\064\025\056\001\001\000\022\011" +
    "\071\013\063\020\107\021\061\022\060\023\066\024\064" +
    "\025\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\117\032\114\033" +
    "\121\046\113\057\112\062\120\067\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\123" +
    "\033\121\046\113\057\112\062\120\067\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\336\021\335\022\332\023\340\024" +
    "\344\042\331\060\334\061\342\070\343\071\333\001\001" +
    "\000\042\012\242\013\251\021\241\022\240\023\246\024" +
    "\257\036\254\037\250\040\247\041\245\042\236\043\256" +
    "\044\244\045\237\047\253\050\252\001\001\000\024\021" +
    "\141\022\137\023\147\024\145\042\146\045\144\064\227" +
    "\065\143\066\134\001\001\000\026\013\204\021\177\022" +
    "\176\034\174\035\173\036\207\037\203\040\202\041\201" +
    "\042\175\001\001\000\024\021\141\022\137\023\147\024" +
    "\145\042\146\045\144\064\142\065\143\066\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\141\022\137\023\147\024\145\042\146\045\144\065\150" +
    "\066\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\152\063\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\204\021\177\022\176\035" +
    "\216\036\207\037\203\040\202\041\201\042\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\226\001\001" +
    "\000\002\001\001\000\022\021\141\022\137\023\147\024" +
    "\145\042\146\045\144\065\150\066\134\001\001\000\006" +
    "\033\152\063\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\012\242\013\251\021\241\022\240\023\246\024" +
    "\257\036\254\037\250\040\247\041\245\042\236\043\256" +
    "\044\244\045\237\050\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\051\270\052\271\053" +
    "\264\056\265\072\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\052\273\053\264\056\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\054\301\055\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\012\336\021\335\022\332\023\340\024\344" +
    "\042\331\061\352\070\343\071\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public AST ast;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + s.left +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
        ManejadorErroresGXML.getInstance().setErrorSintactico(s.left,s.right+1, "problemas con el caracter = " + s.value);
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
    }
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticoGXML$actions {
  private final sintacticoGXML parser;

  /** Constructor */
  CUP$sintacticoGXML$actions(sintacticoGXML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action_part00000000(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGXML$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGXML$parser.done_parsing();
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LISTADO_ETIQUETAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		parser.ast = new AST(a);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTADO_ETIQUETAS ::= LISTADO_ETIQUETAS ETIQUETAS 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTADO_ETIQUETAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTADO_ETIQUETAS ::= ETIQUETAS 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTADO_ETIQUETAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ETIQUETAS ::= ETQ_IMPORTAR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = null;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ETIQUETAS ::= ETQ_VENTANA 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Ventana a = (Ventana)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ETIQUETAS ::= error res_MayorQue 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ETQ_IMPORTAR ::= res_MenorQue res_importar res_MayorQue tTexto res_MenorQue res_slash res_importar res_MayorQue 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		System.out.println(t);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ETQ_VENTANA ::= res_MenorQue res_ventana ELEMENTOS_VENTANA res_MayorQue LST_CUERPO_VENTANA res_MenorQue res_slash res_ventana res_MayorQue 
            {
              Ventana RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<nodoAST> b = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		RESULT = new Ventana(a,b,aleft); 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELEMENTOS_VENTANA ::= ELEMENTOS_VENTANA ELEMENTO_VENTANA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELEMENTOS_VENTANA ::= ELEMENTO_VENTANA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTO_VENTANA ::= ELEMENTO_ID 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTO_VENTANA ::= ELEMENTO_TIPO 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO_VENTANA ::= ELEMENTO_COLOR 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO_VENTANA ::= ELEMENTO_ACCION_INICIAL 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO_VENTANA ::= ELEMENTO_ACCION_FINAL 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LST_CUERPO_VENTANA ::= LST_CUERPO_VENTANA CUERPO_VENTANA 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_CUERPO_VENTANA",21, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LST_CUERPO_VENTANA ::= CUERPO_VENTANA 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_CUERPO_VENTANA",21, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_VENTANA ::= ETQ_CONTENEDOR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Contenedor a = (Contenedor)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_VENTANA",22, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_VENTANA ::= error res_MayorQue 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_VENTANA",22, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ETQ_CONTENEDOR ::= res_MenorQue res_contenedor ELEMENTOS_CONTENEDOR res_MayorQue LST_CUERPO_CONTENEDOR res_MenorQue res_slash res_contenedor res_MayorQue 
            {
              Contenedor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<nodoAST> b = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		RESULT = new Contenedor(a,b,aleft);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTOS_CONTENEDOR ::= ELEMENTOS_CONTENEDOR ELEMENTO_CONTENEDOR 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTOS_CONTENEDOR ::= ELEMENTO_CONTENEDOR 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO_CONTENEDOR ::= ELEMENTO_ID 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO_CONTENEDOR ::= ELEMENTO_X 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELEMENTO_CONTENEDOR ::= ELEMENTO_Y 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELEMENTO_CONTENEDOR ::= ELEMENTO_ALTO 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTO_CONTENEDOR ::= ELEMENTO_ANCHO 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO_CONTENEDOR ::= ELEMENTO_COLOR 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO_CONTENEDOR ::= ELEMENTO_BORDE 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LST_CUERPO_CONTENEDOR ::= LST_CUERPO_CONTENEDOR CUERPO_CONTENEDOR 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = null;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_CUERPO_CONTENEDOR",23, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LST_CUERPO_CONTENEDOR ::= CUERPO_CONTENEDOR 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = null;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_CUERPO_CONTENEDOR",23, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_CONTENEDOR ::= ETQ_TEXTO 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTENEDOR",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_CONTENEDOR ::= ETQ_CONTROL 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTENEDOR",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_CONTENEDOR ::= ETQ_MULTIMEDIA 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTENEDOR",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_CONTENEDOR ::= ETQ_BOTON 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTENEDOR",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_CONTENEDOR ::= ETQ_ENVIAR 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTENEDOR",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_CONTENEDOR ::= error res_MayorQue 
            {
              nodoAST RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTENEDOR",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ETQ_TEXTO ::= res_MenorQue res_texto ELEMENTOS_TEXTO res_MayorQue tTexto res_MenorQue res_slash res_texto res_MayorQue 
            {
              Object RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		 System.out.println(tex);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_TEXTO",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTOS_TEXTO ::= ELEMENTOS_TEXTO ELEMENTO_TEXTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",26, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTOS_TEXTO ::= ELEMENTO_TEXTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",26, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO_TEXTO ::= ELEMENTO_NOMBRE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO_TEXTO ::= ELEMENTO_X 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO_TEXTO ::= ELEMENTO_Y 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO_TEXTO ::= ELEMENTO_FUENTE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO_TEXTO ::= ELEMENTO_TAM 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO_TEXTO ::= ELEMENTO_NEGRITA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO_TEXTO ::= ELEMENTO_CURSIVA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO_TEXTO ::= ELEMENTO_COLOR 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ETQ_CONTROL ::= res_MenorQue res_control ELEMENTOS_CONTROL res_MayorQue TIPO_CUERPO_CONTROL res_slash res_control res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_CONTROL",36, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTOS_CONTROL ::= ELEMENTOS_CONTROL ELEMENTO_CONTROL 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROL",37, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTOS_CONTROL ::= ELEMENTO_CONTROL 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROL",37, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_CONTROL ::= ELEMENTO_TIPO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_CONTROL ::= ELEMENTO_NOMBRE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_CONTROL ::= ELEMENTO_X 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_CONTROL ::= ELEMENTO_Y 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_CONTROL ::= ELEMENTO_ALTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO_CONTROL ::= ELEMENTO_ANCHO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO_CONTROL ::= ELEMENTO_FUENTE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO_CONTROL ::= ELEMENTO_TAM 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO_CONTROL ::= ELEMENTO_COLOR 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO_CONTROL ::= ELEMENTO_NEGRITA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO_CONTROL ::= ELEMENTO_CURSIVA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO_CONTROL ::= ELEMENTO_MAXIMO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO_CONTROL ::= ELEMENTO_MINIMO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO_CONTROL ::= ELEMENTO_ACCION 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_CUERPO_CONTROL ::= LST_CUERPO_CONTROL res_MenorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_CONTROL",56, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_CUERPO_CONTROL ::= res_MenorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_CONTROL",56, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LST_CUERPO_CONTROL ::= LST_CUERPO_CONTROL CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_CUERPO_CONTROL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LST_CUERPO_CONTROL ::= CUERPO_CONTROL 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_CUERPO_CONTROL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO_CONTROL ::= ETQ_LISTA_DATOS 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTROL",40, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_CONTROL ::= ETQ_DEFECTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CUERPO_CONTROL",40, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ETQ_LISTA_DATOS ::= res_MenorQue res_listaDatos res_MayorQue LST_ETQS_DATO res_MenorQue res_slash res_listaDatos res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_LISTA_DATOS",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LST_ETQS_DATO ::= LST_ETQS_DATO ETQ_DATO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_ETQS_DATO",42, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LST_ETQS_DATO ::= ETQ_DATO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LST_ETQS_DATO",42, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ETQ_DATO ::= res_MenorQue res_dato res_MayorQue tTexto res_MenorQue res_slash res_dato res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_DATO",43, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ETQ_DEFECTO ::= res_MenorQue res_defecto res_MayorQue tTexto res_MenorQue res_slash res_defecto res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_DEFECTO",44, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ETQ_MULTIMEDIA ::= res_MenorQue res_multimedia ELEMENTOS_MULTIMEDIA res_MayorQue res_MenorQue res_slash res_multimedia res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_MULTIMEDIA",45, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELEMENTOS_MULTIMEDIA ::= ELEMENTOS_MULTIMEDIA ELEMENTO_MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",46, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELEMENTOS_MULTIMEDIA ::= ELEMENTO_MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",46, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_TIPO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_PATH 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_NOMBRE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_X 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_Y 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_ALTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_ANCHO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_MULTIMEDIA ::= ELEMENTO_AUTO_REPRODUCCION 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",47, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ETQ_BOTON ::= res_MenorQue res_boton ELEMENTOS_BOTON res_MayorQue CONTENIDO_BOTON res_MenorQue res_slash res_boton res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_BOTON",48, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_BOTON ::= ETQ_TEXTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_BOTON",49, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_BOTON ::= tTexto 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_BOTON",49, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTOS_BOTON ::= ELEMENTOS_BOTON ELEMENTO_BOTON 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",50, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTOS_BOTON ::= ELEMENTO_BOTON 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",50, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTO_BOTON ::= ELEMENTO_NOMBRE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTO_BOTON ::= ELEMENTO_X 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTO_BOTON ::= ELEMENTO_Y 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTO_BOTON ::= ELEMENTO_ALTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTO_BOTON ::= ELEMENTO_ANCHO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTO_BOTON ::= ELEMENTO_REFERENCIA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTO_BOTON ::= ELEMENTO_ACCION 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",51, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTO_REFERENCIA ::= res_referencia res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_REFERENCIA",52, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ETQ_ENVIAR ::= res_MenorQue res_enviar ELEMENTOS_BOTON res_MayorQue CONTENIDO_BOTON res_MenorQue res_slash res_enviar res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_ENVIAR",53, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTO_PATH ::= res_path res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",54, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTO_AUTO_REPRODUCCION ::= res_auto_reproduccion res_Igual BOOLEANO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_AUTO_REPRODUCCION",55, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTO_MAXIMO ::= res_maximo res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MAXIMO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTO_MINIMO ::= res_minimo res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MINIMO",34, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELEMENTO_ACCION ::= res_accion res_Igual res_llvOpen tTexto res_llvClose 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCION",35, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELEMENTO_NOMBRE ::= res_nombre res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NOMBRE",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTO_FUENTE ::= res_fuente res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_FUENTE",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELEMENTO_TAM ::= res_tam res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TAM",29, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTO_NEGRITA ::= res_negrita res_Igual BOOLEANO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_NEGRITA",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTO_CURSIVA ::= res_cursiva res_Igual BOOLEANO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CURSIVA",31, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEMENTO_ID ::= res_id res_Igual tCad 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.STRING),Simbolo.ROLGXML.ID);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ID",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTO_TIPO ::= res_tipo res_Igual tCad 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.STRING),Simbolo.ROLGXML.TIPO);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TIPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELEMENTO_COLOR ::= res_color res_Igual tCad 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.STRING),Simbolo.ROLGXML.COLOR);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_COLOR",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELEMENTO_ACCION_INICIAL ::= res_accionInicial res_Igual res_llvOpen tTexto res_llvClose 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.STRING),Simbolo.ROLGXML.ACCION_INICIAL);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCION_INICIAL",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELEMENTO_ACCION_FINAL ::= res_accionFinal res_Igual res_llvOpen tTexto res_llvClose 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.STRING),Simbolo.ROLGXML.ACCION_FINAL);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCION_FINAL",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELEMENTO_X ::= res_x res_Igual tNumerico 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.NUMBER),Simbolo.ROLGXML.X);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_X",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ELEMENTO_Y ::= res_y res_Igual tNumerico 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.NUMBER),Simbolo.ROLGXML.Y);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_Y",16, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ELEMENTO_ALTO ::= res_alto res_Igual tNumerico 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.NUMBER),Simbolo.ROLGXML.ALTO);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ALTO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ELEMENTO_ANCHO ::= res_ancho res_Igual tNumerico 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.NUMBER),Simbolo.ROLGXML.ANCHO);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ANCHO",18, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ELEMENTO_BORDE ::= res_borde res_Igual BOOLEANO 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		 RESULT = new  Simbolo(a,a,new Tipo(Tipo.Primitivo.BOOLEAN),Simbolo.ROLGXML.BORDE);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BORDE",19, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BOOLEANO ::= res_verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("BOOLEANO",20, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BOOLEANO ::= res_falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("BOOLEANO",20, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticoGXML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
              return CUP$sintacticoGXML$do_action_part00000000(
                               CUP$sintacticoGXML$act_num,
                               CUP$sintacticoGXML$parser,
                               CUP$sintacticoGXML$stack,
                               CUP$sintacticoGXML$top);
    }
}

}
