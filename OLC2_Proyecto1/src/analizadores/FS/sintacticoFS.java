
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.FS;

import java_cup.runtime.*;
import java.util.LinkedList;
import FuncionScript.AST.Expresiones.*;
import FuncionScript.AST.Expresiones.Operacion.*;
import FuncionScript.Entorno.*;
import FuncionScript.AST.Instrucciones.*;
import FuncionScript.AST.*;
import FuncionScript.ErroresFS.ManejadorErroresFS;
import FuncionScript.AST.Instrucciones.Condicionales.*;
import FuncionScript.AST.Expresiones.InterfazUsuario.*;
import FuncionScript.AST.Instrucciones.InterfazUsuario.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticoFS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\004\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\036\006\000\002\036\007\000\002\036\007\000" +
    "\002\036\007\000\002\036\007\000\002\036\007\000\002" +
    "\031\006\000\002\033\003\000\002\033\002\000\002\032" +
    "\005\000\002\032\003\000\002\024\005\000\002\024\004" +
    "\000\002\025\012\000\002\027\003\000\002\027\002\000" +
    "\002\026\005\000\002\026\003\000\002\030\004\000\002" +
    "\023\004\000\002\020\011\000\002\021\004\000\002\021" +
    "\003\000\002\022\010\000\002\022\007\000\002\017\011" +
    "\000\002\017\015\000\002\017\013\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\014\005\000\002\037\010\000\002\012" +
    "\004\000\002\013\004\000\002\011\006\000\002\003\004" +
    "\000\002\010\003\000\002\010\005\000\002\034\003\000" +
    "\002\034\005\000\002\035\003\000\002\035\002\000\002" +
    "\004\005\000\002\004\003\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\007\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\047\010\000\002\046\011\000\002\042\011" +
    "\000\002\045\005\000\002\043\006\000\002\044\010\000" +
    "\002\065\010\000\002\040\006\000\002\041\010\000\002" +
    "\050\011\000\002\051\010\000\002\060\012\000\002\060" +
    "\003\000\002\052\010\000\002\061\012\000\002\061\003" +
    "\000\002\053\010\000\002\062\012\000\002\062\003\000" +
    "\002\054\010\000\002\063\012\000\002\063\003\000\002" +
    "\055\010\000\002\064\012\000\002\064\003\000\002\056" +
    "\010\000\002\057\012\000\002\057\003\000\002\066\012" +
    "\000\002\067\007\000\002\071\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\026\003\030\004\010\023\041\027\045\045" +
    "\022\055\052\056\012\062\042\063\035\115\044\001\002" +
    "\000\006\007\uffef\017\uffef\001\002\000\006\007\uffe6\017" +
    "\uffe6\001\002\000\006\007\uffe8\017\uffe8\001\002\000\006" +
    "\007\uffe2\017\uffe2\001\002\000\004\016\u0157\001\002\000" +
    "\004\002\u0156\001\002\000\004\007\u0155\001\002\000\006" +
    "\007\uffed\017\uffed\001\002\000\032\002\ufff8\003\ufff8\004" +
    "\ufff8\023\ufff8\027\ufff8\045\ufff8\052\ufff8\055\ufff8\056\ufff8" +
    "\062\ufff8\063\ufff8\115\ufff8\001\002\000\032\002\ufffe\003" +
    "\ufffe\004\ufffe\023\ufffe\027\ufffe\045\ufffe\052\ufffe\055\ufffe" +
    "\056\ufffe\062\ufffe\063\ufffe\115\ufffe\001\002\000\006\007" +
    "\uffe7\017\uffe7\001\002\000\030\002\000\003\030\004\010" +
    "\023\041\027\045\045\022\055\052\056\012\062\042\063" +
    "\035\115\044\001\002\000\004\007\u0154\001\002\000\006" +
    "\007\uffea\017\uffea\001\002\000\004\016\u0149\001\002\000" +
    "\032\002\ufff3\003\ufff3\004\ufff3\023\ufff3\027\ufff3\045\ufff3" +
    "\052\ufff3\055\ufff3\056\ufff3\062\ufff3\063\ufff3\115\ufff3\001" +
    "\002\000\032\002\ufffc\003\ufffc\004\ufffc\023\ufffc\027\ufffc" +
    "\045\ufffc\052\ufffc\055\ufffc\056\ufffc\062\ufffc\063\ufffc\115" +
    "\ufffc\001\002\000\032\002\ufff7\003\ufff7\004\ufff7\023\ufff7" +
    "\027\ufff7\045\ufff7\052\ufff7\055\ufff7\056\ufff7\062\ufff7\063" +
    "\ufff7\115\ufff7\001\002\000\032\002\ufff9\003\ufff9\004\ufff9" +
    "\023\ufff9\027\ufff9\045\ufff9\052\ufff9\055\ufff9\056\ufff9\062" +
    "\ufff9\063\ufff9\115\ufff9\001\002\000\006\007\uffee\017\uffee" +
    "\001\002\000\006\007\u0147\052\u0148\001\002\000\032\002" +
    "\ufff4\003\ufff4\004\ufff4\023\ufff4\027\ufff4\045\ufff4\052\ufff4" +
    "\055\ufff4\056\ufff4\062\ufff4\063\ufff4\115\ufff4\001\002\000" +
    "\006\007\uffeb\017\uffeb\001\002\000\032\002\ufff5\003\ufff5" +
    "\004\ufff5\023\ufff5\027\ufff5\045\ufff5\052\ufff5\055\ufff5\056" +
    "\ufff5\062\ufff5\063\ufff5\115\ufff5\001\002\000\032\002\ufffa" +
    "\003\ufffa\004\ufffa\023\ufffa\027\ufffa\045\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\062\ufffa\063\ufffa\115\ufffa\001\002\000\004" +
    "\023\u0140\001\002\000\006\007\uffec\017\uffec\001\002\000" +
    "\032\002\ufffb\003\ufffb\004\ufffb\023\ufffb\027\ufffb\045\ufffb" +
    "\052\ufffb\055\ufffb\056\ufffb\062\ufffb\063\ufffb\115\ufffb\001" +
    "\002\000\006\007\ufff0\017\ufff0\001\002\000\026\015\u011e" +
    "\016\171\024\u011d\025\u0120\041\u0123\042\u0121\043\u011f\044" +
    "\u011c\064\u0122\066\u0124\001\002\000\032\005\102\006\073" +
    "\007\u0119\011\107\016\057\020\101\021\061\022\056\023" +
    "\103\061\100\074\071\077\072\001\002\000\006\007\uffe3" +
    "\017\uffe3\001\002\000\004\016\u0115\001\002\000\004\023" +
    "\u010b\001\002\000\032\002\ufff6\003\ufff6\004\ufff6\023\ufff6" +
    "\027\ufff6\045\ufff6\052\ufff6\055\ufff6\056\ufff6\062\ufff6\063" +
    "\ufff6\115\ufff6\001\002\000\006\007\uffe4\017\uffe4\001\002" +
    "\000\006\007\uffe9\017\uffe9\001\002\000\006\007\uffe5\017" +
    "\uffe5\001\002\000\004\016\053\001\002\000\030\005\102" +
    "\006\073\011\107\016\057\020\101\021\061\022\056\023" +
    "\103\061\100\074\071\077\072\001\002\000\100\002\uff8a" +
    "\003\uff8a\004\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\017\uff8a\023\uff8a\027\uff8a\030\uff8a\032\uff8a" +
    "\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\045\uff8a\047" +
    "\uff8a\050\uff8a\052\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a" +
    "\062\uff8a\063\uff8a\065\uff8a\115\uff8a\001\002\000\100\002" +
    "\uff99\003\uff99\004\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\017\uff99\023\uff99\027\uff99\030\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\045\uff99" +
    "\047\uff99\050\uff99\052\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\062\uff99\063\uff99\065\uff99\115\uff99\001\002\000\100" +
    "\002\uffa0\003\uffa0\004\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\017\uffa0\023\uffa0\027\uffa0\030\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\045" +
    "\uffa0\047\uffa0\050\uffa0\052\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\062\uffa0\063\uffa0\065\uffa0\115\uffa0\001\002\000" +
    "\030\005\102\006\073\011\107\016\057\020\101\021\061" +
    "\022\056\023\103\061\100\074\071\077\072\001\002\000" +
    "\100\002\uff92\003\uff92\004\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\017\uff92\023\uff92\027\uff92\030" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\045\uff92\047\uff92\050\uff92\052\uff92\055\uff92\056\uff92\057" +
    "\uff92\060\uff92\062\uff92\063\uff92\065\uff92\115\uff92\001\002" +
    "\000\100\002\uff9f\003\uff9f\004\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\017\uff9f\023\uff9f\027\uff9f" +
    "\030\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\052\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\062\uff9f\063\uff9f\065\uff9f\115\uff9f\001" +
    "\002\000\100\002\uff8c\003\uff8c\004\uff8c\007\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\013\uff8c\014\uff8c\017\uff8c\023\uff8c\027" +
    "\uff8c\030\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\045\uff8c\047\uff8c\050\uff8c\052\uff8c\055\uff8c\056" +
    "\uff8c\057\uff8c\060\uff8c\062\uff8c\063\uff8c\065\uff8c\115\uff8c" +
    "\001\002\000\100\002\uff98\003\uff98\004\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\017\uff98\023\uff98" +
    "\027\uff98\030\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\045\uff98\047\uff98\050\uff98\052\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\062\uff98\063\uff98\065\uff98\115" +
    "\uff98\001\002\000\100\002\uff95\003\uff95\004\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\017\uff95\023" +
    "\uff95\027\uff95\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\045\uff95\047\uff95\050\uff95\052\uff95\055" +
    "\uff95\056\uff95\057\uff95\060\uff95\062\uff95\063\uff95\065\uff95" +
    "\115\uff95\001\002\000\100\002\uff94\003\uff94\004\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\017\uff94" +
    "\023\uff94\027\uff94\030\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\045\uff94\047\uff94\050\uff94\052\uff94" +
    "\055\uff94\056\uff94\057\uff94\060\uff94\062\uff94\063\uff94\065" +
    "\uff94\115\uff94\001\002\000\100\002\uff8f\003\uff8f\004\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\017" +
    "\uff8f\023\uff8f\027\uff8f\030\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\045\uff8f\047\uff8f\050\uff8f\052" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\062\uff8f\063\uff8f" +
    "\065\uff8f\115\uff8f\001\002\000\100\002\uff93\003\uff93\004" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93" +
    "\017\uff93\023\uff93\027\uff93\030\uff93\032\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\045\uff93\047\uff93\050\uff93" +
    "\052\uff93\055\uff93\056\uff93\057\uff93\060\uff93\062\uff93\063" +
    "\uff93\065\uff93\115\uff93\001\002\000\100\002\uff91\003\uff91" +
    "\004\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014" +
    "\uff91\017\uff91\023\uff91\027\uff91\030\uff91\032\uff91\033\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\045\uff91\047\uff91\050" +
    "\uff91\052\uff91\055\uff91\056\uff91\057\uff91\060\uff91\062\uff91" +
    "\063\uff91\065\uff91\115\uff91\001\002\000\004\016\u0104\001" +
    "\002\000\004\016\u0101\001\002\000\100\002\uff9a\003\uff9a" +
    "\004\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\017\uff9a\023\uff9a\027\uff9a\030\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\045\uff9a\047\uff9a\050" +
    "\uff9a\052\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\062\uff9a" +
    "\063\uff9a\065\uff9a\115\uff9a\001\002\000\100\002\uff8b\003" +
    "\uff8b\004\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\017\uff8b\023\uff8b\027\uff8b\030\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\045\uff8b\047\uff8b" +
    "\050\uff8b\052\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\062" +
    "\uff8b\063\uff8b\065\uff8b\115\uff8b\001\002\000\100\002\uff97" +
    "\003\uff97\004\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\017\uff97\023\uff97\027\uff97\030\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\045\uff97\047" +
    "\uff97\050\uff97\052\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\062\uff97\063\uff97\065\uff97\115\uff97\001\002\000\100\002" +
    "\uff8e\003\uff8e\004\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\017\uff8e\023\uff8e\027\uff8e\030\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\045\uff8e" +
    "\047\uff8e\050\uff8e\052\uff8e\055\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\062\uff8e\063\uff8e\065\uff8e\115\uff8e\001\002\000\100" +
    "\002\uff96\003\uff96\004\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\014\uff96\017\uff96\023\uff96\027\uff96\030\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\045" +
    "\uff96\047\uff96\050\uff96\052\uff96\055\uff96\056\uff96\057\uff96" +
    "\060\uff96\062\uff96\063\uff96\065\uff96\115\uff96\001\002\000" +
    "\030\005\102\006\073\011\107\016\057\020\101\021\061" +
    "\022\056\023\103\061\100\074\071\077\072\001\002\000" +
    "\100\002\uffa1\003\uffa1\004\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\017\uffa1\023\uffa1\027\uffa1\030" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\045\uffa1\047\uffa1\050\uffa1\052\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\062\uffa1\063\uffa1\065\uffa1\115\uffa1\001\002" +
    "\000\100\002\uff9b\003\uff9b\004\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\017\uff9b\023\uff9b\027\uff9b" +
    "\030\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\045\uff9b\047\uff9b\050\uff9b\052\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\062\uff9b\063\uff9b\065\uff9b\115\uff9b\001" +
    "\002\000\112\002\uff9e\003\uff9e\004\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\016\171\017\uff9e\023" +
    "\uff9e\024\175\025\174\027\uff9e\030\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\045\uff9e\047\uff9e\050" +
    "\uff9e\052\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\062\uff9e" +
    "\063\uff9e\064\173\065\uff9e\066\172\115\uff9e\001\002\000" +
    "\100\002\uff90\003\uff90\004\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\013\uff90\014\uff90\017\uff90\023\uff90\027\uff90\030" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\045\uff90\047\uff90\050\uff90\052\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\062\uff90\063\uff90\065\uff90\115\uff90\001\002" +
    "\000\040\010\123\011\125\012\126\013\122\014\111\017" +
    "\147\032\114\033\112\034\117\035\113\036\121\037\120" +
    "\047\115\057\116\060\124\001\002\000\100\002\uff8d\003" +
    "\uff8d\004\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\017\uff8d\023\uff8d\027\uff8d\030\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\045\uff8d\047\uff8d" +
    "\050\uff8d\052\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\062" +
    "\uff8d\063\uff8d\065\uff8d\115\uff8d\001\002\000\030\005\102" +
    "\006\073\011\107\016\057\020\101\021\061\022\056\023" +
    "\103\061\100\074\071\077\072\001\002\000\100\002\uffb2" +
    "\003\uffb2\004\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\017\uffb2\023\uffb2\027\uffb2\030\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\045\uffb2\047" +
    "\uffb2\050\uffb2\052\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\062\uffb2\063\uffb2\065\uffb2\115\uffb2\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\030\005" +
    "\102\006\073\011\107\016\057\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\100\002" +
    "\uffae\003\uffae\004\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\111\017\uffae\023\uffae\027\uffae\030\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\045\uffae" +
    "\047\uffae\050\uffae\052\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\062\uffae\063\uffae\065\uffae\115\uffae\001\002\000\100" +
    "\002\uffb0\003\uffb0\004\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\126\013\122\014\111\017\uffb0\023\uffb0\027\uffb0\030\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\045" +
    "\uffb0\047\uffb0\050\uffb0\052\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\062\uffb0\063\uffb0\065\uffb0\115\uffb0\001\002\000" +
    "\100\002\uffa5\003\uffa5\004\uffa5\007\uffa5\010\123\011\125" +
    "\012\126\013\122\014\111\017\uffa5\023\uffa5\027\uffa5\030" +
    "\uffa5\032\114\033\112\034\117\035\113\036\121\037\120" +
    "\045\uffa5\047\uffa5\050\uffa5\052\uffa5\055\uffa5\056\uffa5\057" +
    "\116\060\uffa5\062\uffa5\063\uffa5\065\uffa5\115\uffa5\001\002" +
    "\000\100\002\uffb1\003\uffb1\004\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\012\126\013\122\014\111\017\uffb1\023\uffb1\027\uffb1" +
    "\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\045\uffb1\047\uffb1\050\uffb1\052\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\062\uffb1\063\uffb1\065\uffb1\115\uffb1\001" +
    "\002\000\100\002\uffaf\003\uffaf\004\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\111\017\uffaf\023\uffaf\027" +
    "\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\045\uffaf\047\uffaf\050\uffaf\052\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\065\uffaf\115\uffaf" +
    "\001\002\000\100\002\uffac\003\uffac\004\uffac\007\uffac\010" +
    "\123\011\125\012\126\013\122\014\111\017\uffac\023\uffac" +
    "\027\uffac\030\uffac\032\114\033\112\034\117\035\113\036" +
    "\uffac\037\uffac\045\uffac\047\uffac\050\uffac\052\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\062\uffac\063\uffac\065\uffac\115" +
    "\uffac\001\002\000\100\002\uffab\003\uffab\004\uffab\007\uffab" +
    "\010\123\011\125\012\126\013\122\014\111\017\uffab\023" +
    "\uffab\027\uffab\030\uffab\032\114\033\112\034\117\035\113" +
    "\036\uffab\037\uffab\045\uffab\047\uffab\050\uffab\052\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\062\uffab\063\uffab\065\uffab" +
    "\115\uffab\001\002\000\100\002\uffa7\003\uffa7\004\uffa7\007" +
    "\uffa7\010\123\011\125\012\126\013\122\014\111\017\uffa7" +
    "\023\uffa7\027\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\045\uffa7\047\uffa7\050\uffa7\052\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\065" +
    "\uffa7\115\uffa7\001\002\000\100\002\uffa6\003\uffa6\004\uffa6" +
    "\007\uffa6\010\123\011\125\012\126\013\122\014\111\017" +
    "\uffa6\023\uffa6\027\uffa6\030\uffa6\032\114\033\112\034\117" +
    "\035\113\036\121\037\120\045\uffa6\047\uffa6\050\uffa6\052" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6" +
    "\065\uffa6\115\uffa6\001\002\000\040\010\123\011\125\012" +
    "\126\013\122\014\111\032\114\033\112\034\117\035\113" +
    "\036\121\037\120\047\115\050\141\057\116\060\124\001" +
    "\002\000\030\005\102\006\073\011\107\016\057\020\101" +
    "\021\061\022\056\023\103\061\100\074\071\077\072\001" +
    "\002\000\100\002\uffa3\003\uffa3\004\uffa3\007\uffa3\010\123" +
    "\011\125\012\126\013\122\014\111\017\uffa3\023\uffa3\027" +
    "\uffa3\030\uffa3\032\114\033\112\034\117\035\113\036\121" +
    "\037\120\045\uffa3\047\uffa3\050\uffa3\052\uffa3\055\uffa3\056" +
    "\uffa3\057\116\060\124\062\uffa3\063\uffa3\065\uffa3\115\uffa3" +
    "\001\002\000\100\002\uffa8\003\uffa8\004\uffa8\007\uffa8\010" +
    "\123\011\125\012\126\013\122\014\111\017\uffa8\023\uffa8" +
    "\027\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\045\uffa8\047\uffa8\050\uffa8\052\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\062\uffa8\063\uffa8\065\uffa8\115" +
    "\uffa8\001\002\000\100\002\uffa9\003\uffa9\004\uffa9\007\uffa9" +
    "\010\123\011\125\012\126\013\122\014\111\017\uffa9\023" +
    "\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\045\uffa9\047\uffa9\050\uffa9\052\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9\065\uffa9" +
    "\115\uffa9\001\002\000\100\002\uffaa\003\uffaa\004\uffaa\007" +
    "\uffaa\010\123\011\125\012\126\013\122\014\111\017\uffaa" +
    "\023\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\045\uffaa\047\uffaa\050\uffaa\052\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa\065" +
    "\uffaa\115\uffaa\001\002\000\100\002\uffad\003\uffad\004\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\111\017" +
    "\uffad\023\uffad\027\uffad\030\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\045\uffad\047\uffad\050\uffad\052" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\062\uffad\063\uffad" +
    "\065\uffad\115\uffad\001\002\000\004\051\150\001\002\000" +
    "\006\053\151\054\152\001\002\000\030\005\102\006\073" +
    "\011\107\016\057\020\101\021\061\022\056\023\103\061" +
    "\100\074\071\077\072\001\002\000\004\050\157\001\002" +
    "\000\010\052\155\053\151\054\152\001\002\000\010\052" +
    "\uffcb\053\uffcb\054\uffcb\001\002\000\032\002\uffcd\003\uffcd" +
    "\004\uffcd\023\uffcd\027\uffcd\045\uffcd\052\uffcd\055\uffcd\056" +
    "\uffcd\062\uffcd\063\uffcd\115\uffcd\001\002\000\010\052\uffcc" +
    "\053\uffcc\054\uffcc\001\002\000\004\051\160\001\002\000" +
    "\026\003\030\004\010\023\041\027\045\045\022\055\052" +
    "\056\012\062\042\063\035\115\044\001\002\000\030\003" +
    "\030\004\010\023\041\027\045\045\022\052\162\055\052" +
    "\056\012\062\042\063\035\115\044\001\002\000\010\052" +
    "\uffc9\053\uffc9\054\uffc9\001\002\000\032\002\uffff\003\uffff" +
    "\004\uffff\023\uffff\027\uffff\045\uffff\052\uffff\055\uffff\056" +
    "\uffff\062\uffff\063\uffff\115\uffff\001\002\000\040\010\123" +
    "\011\125\012\126\013\122\014\111\032\114\033\112\034" +
    "\117\035\113\036\121\037\120\047\115\050\165\057\116" +
    "\060\124\001\002\000\004\051\166\001\002\000\026\003" +
    "\030\004\010\023\041\027\045\045\022\055\052\056\012" +
    "\062\042\063\035\115\044\001\002\000\030\003\030\004" +
    "\010\023\041\027\045\045\022\052\170\055\052\056\012" +
    "\062\042\063\035\115\044\001\002\000\010\052\uffca\053" +
    "\uffca\054\uffca\001\002\000\032\005\102\006\073\011\107" +
    "\016\057\017\uffd9\020\101\021\061\022\056\023\103\061" +
    "\100\074\071\077\072\001\002\000\044\023\213\067\216" +
    "\070\204\071\217\072\206\073\201\075\211\100\212\102" +
    "\207\104\214\105\202\106\200\107\215\110\210\111\203" +
    "\112\220\113\205\001\002\000\030\005\102\006\073\011" +
    "\107\016\057\020\101\021\061\022\056\023\103\061\100" +
    "\074\071\077\072\001\002\000\100\002\uff9c\003\uff9c\004" +
    "\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\017\uff9c\023\uff9c\027\uff9c\030\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\045\uff9c\047\uff9c\050\uff9c" +
    "\052\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\062\uff9c\063" +
    "\uff9c\065\uff9c\115\uff9c\001\002\000\100\002\uff9d\003\uff9d" +
    "\004\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\017\uff9d\023\uff9d\027\uff9d\030\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\045\uff9d\047\uff9d\050" +
    "\uff9d\052\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\062\uff9d" +
    "\063\uff9d\065\uff9d\115\uff9d\001\002\000\040\010\123\011" +
    "\125\012\126\013\122\014\111\032\114\033\112\034\117" +
    "\035\113\036\121\037\120\047\115\057\116\060\124\065" +
    "\177\001\002\000\100\002\uffe1\003\uffe1\004\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\023" +
    "\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\045\uffe1\047\uffe1\050\uffe1\052\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\062\uffe1\063\uffe1\065\uffe1" +
    "\115\uffe1\001\002\000\004\016\362\001\002\000\004\016" +
    "\360\001\002\000\004\016\344\001\002\000\004\016\330" +
    "\001\002\000\004\016\326\001\002\000\004\016\321\001" +
    "\002\000\004\016\317\001\002\000\004\016\314\001\002" +
    "\000\004\016\300\001\002\000\004\016\271\001\002\000" +
    "\004\016\266\001\002\000\100\002\uff86\003\uff86\004\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\017" +
    "\uff86\023\uff86\027\uff86\030\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\045\uff86\047\uff86\050\uff86\052" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\062\uff86\063\uff86" +
    "\065\uff86\115\uff86\001\002\000\004\016\252\001\002\000" +
    "\004\016\230\001\002\000\004\016\226\001\002\000\004" +
    "\016\224\001\002\000\004\016\221\001\002\000\004\021" +
    "\222\001\002\000\004\017\223\001\002\000\100\002\uff83" +
    "\003\uff83\004\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\017\uff83\023\uff83\027\uff83\030\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\045\uff83\047" +
    "\uff83\050\uff83\052\uff83\055\uff83\056\uff83\057\uff83\060\uff83" +
    "\062\uff83\063\uff83\065\uff83\115\uff83\001\002\000\004\017" +
    "\225\001\002\000\100\002\uffde\003\uffde\004\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\017\uffde\023" +
    "\uffde\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\045\uffde\047\uffde\050\uffde\052\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\062\uffde\063\uffde\065\uffde" +
    "\115\uffde\001\002\000\004\017\227\001\002\000\100\002" +
    "\uffe0\003\uffe0\004\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\017\uffe0\023\uffe0\027\uffe0\030\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\052\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\062\uffe0\063\uffe0\065\uffe0\115\uffe0\001\002\000\006" +
    "\016\232\023\233\001\002\000\004\017\251\001\002\000" +
    "\006\017\uffd2\027\234\001\002\000\004\017\uff74\001\002" +
    "\000\004\023\250\001\002\000\006\017\uffd0\030\uffd0\001" +
    "\002\000\006\017\uffd3\030\246\001\002\000\004\017\240" +
    "\001\002\000\004\015\241\001\002\000\004\032\242\001" +
    "\002\000\004\051\243\001\002\000\026\003\030\004\010" +
    "\023\041\027\045\045\022\055\052\056\012\062\042\063" +
    "\035\115\044\001\002\000\030\003\030\004\010\023\041" +
    "\027\045\045\022\052\245\055\052\056\012\062\042\063" +
    "\035\115\044\001\002\000\004\017\uff75\001\002\000\004" +
    "\027\234\001\002\000\006\017\uffd1\030\uffd1\001\002\000" +
    "\006\017\uffcf\030\uffcf\001\002\000\100\002\uff76\003\uff76" +
    "\004\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014" +
    "\uff76\017\uff76\023\uff76\027\uff76\030\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\045\uff76\047\uff76\050" +
    "\uff76\052\uff76\055\uff76\056\uff76\057\uff76\060\uff76\062\uff76" +
    "\063\uff76\065\uff76\115\uff76\001\002\000\006\016\253\023" +
    "\254\001\002\000\006\017\uffd2\027\234\001\002\000\004" +
    "\017\uff7d\001\002\000\004\017\256\001\002\000\100\002" +
    "\uff7f\003\uff7f\004\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\014\uff7f\017\uff7f\023\uff7f\027\uff7f\030\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\045\uff7f" +
    "\047\uff7f\050\uff7f\052\uff7f\055\uff7f\056\uff7f\057\uff7f\060" +
    "\uff7f\062\uff7f\063\uff7f\065\uff7f\115\uff7f\001\002\000\004" +
    "\017\260\001\002\000\004\015\261\001\002\000\004\032" +
    "\262\001\002\000\004\051\263\001\002\000\026\003\030" +
    "\004\010\023\041\027\045\045\022\055\052\056\012\062" +
    "\042\063\035\115\044\001\002\000\030\003\030\004\010" +
    "\023\041\027\045\045\022\052\265\055\052\056\012\062" +
    "\042\063\035\115\044\001\002\000\004\017\uff7e\001\002" +
    "\000\004\021\267\001\002\000\004\017\270\001\002\000" +
    "\100\002\uff84\003\uff84\004\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\013\uff84\014\uff84\017\uff84\023\uff84\027\uff84\030" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\045\uff84\047\uff84\050\uff84\052\uff84\055\uff84\056\uff84\057" +
    "\uff84\060\uff84\062\uff84\063\uff84\065\uff84\115\uff84\001\002" +
    "\000\032\005\102\006\073\011\107\016\057\017\uffd9\020" +
    "\101\021\061\022\056\023\103\061\100\074\071\077\072" +
    "\001\002\000\006\017\uffda\030\276\001\002\000\004\017" +
    "\275\001\002\000\044\010\123\011\125\012\126\013\122" +
    "\014\111\017\uffd7\030\uffd7\032\114\033\112\034\117\035" +
    "\113\036\121\037\120\047\115\057\116\060\124\065\uffd7" +
    "\001\002\000\100\002\uff81\003\uff81\004\uff81\007\uff81\010" +
    "\uff81\011\uff81\012\uff81\013\uff81\014\uff81\017\uff81\023\uff81" +
    "\027\uff81\030\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\045\uff81\047\uff81\050\uff81\052\uff81\055\uff81" +
    "\056\uff81\057\uff81\060\uff81\062\uff81\063\uff81\065\uff81\115" +
    "\uff81\001\002\000\030\005\102\006\073\011\107\016\057" +
    "\020\101\021\061\022\056\023\103\061\100\074\071\077" +
    "\072\001\002\000\044\010\123\011\125\012\126\013\122" +
    "\014\111\017\uffd8\030\uffd8\032\114\033\112\034\117\035" +
    "\113\036\121\037\120\047\115\057\116\060\124\065\uffd8" +
    "\001\002\000\006\016\301\023\303\001\002\000\006\017" +
    "\uffd2\027\234\001\002\000\004\017\304\001\002\000\004" +
    "\017\uff71\001\002\000\100\002\uff73\003\uff73\004\uff73\007" +
    "\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\017\uff73" +
    "\023\uff73\027\uff73\030\uff73\032\uff73\033\uff73\034\uff73\035" +
    "\uff73\036\uff73\037\uff73\045\uff73\047\uff73\050\uff73\052\uff73" +
    "\055\uff73\056\uff73\057\uff73\060\uff73\062\uff73\063\uff73\065" +
    "\uff73\115\uff73\001\002\000\004\017\306\001\002\000\004" +
    "\015\307\001\002\000\004\032\310\001\002\000\004\051" +
    "\311\001\002\000\026\003\030\004\010\023\041\027\045" +
    "\045\022\055\052\056\012\062\042\063\035\115\044\001" +
    "\002\000\030\003\030\004\010\023\041\027\045\045\022" +
    "\052\313\055\052\056\012\062\042\063\035\115\044\001" +
    "\002\000\004\017\uff72\001\002\000\032\005\102\006\073" +
    "\011\107\016\057\017\uffd9\020\101\021\061\022\056\023" +
    "\103\061\100\074\071\077\072\001\002\000\004\017\316" +
    "\001\002\000\100\002\uff89\003\uff89\004\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\017\uff89\023\uff89" +
    "\027\uff89\030\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036" +
    "\uff89\037\uff89\045\uff89\047\uff89\050\uff89\052\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\062\uff89\063\uff89\065\uff89\115" +
    "\uff89\001\002\000\004\017\320\001\002\000\100\002\uffdd" +
    "\003\uffdd\004\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\017\uffdd\023\uffdd\027\uffdd\030\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\045\uffdd\047" +
    "\uffdd\050\uffdd\052\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\062\uffdd\063\uffdd\065\uffdd\115\uffdd\001\002\000\004\021" +
    "\322\001\002\000\004\030\323\001\002\000\004\021\324" +
    "\001\002\000\004\017\325\001\002\000\100\002\uff6d\003" +
    "\uff6d\004\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d" +
    "\014\uff6d\017\uff6d\023\uff6d\027\uff6d\030\uff6d\032\uff6d\033" +
    "\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\045\uff6d\047\uff6d" +
    "\050\uff6d\052\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\062" +
    "\uff6d\063\uff6d\065\uff6d\115\uff6d\001\002\000\004\017\327" +
    "\001\002\000\100\002\uffdf\003\uffdf\004\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\017\uffdf\023\uffdf" +
    "\027\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\045\uffdf\047\uffdf\050\uffdf\052\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\065\uffdf\115" +
    "\uffdf\001\002\000\006\016\331\023\333\001\002\000\006" +
    "\017\uffd2\027\234\001\002\000\004\017\334\001\002\000" +
    "\004\017\uff6e\001\002\000\100\002\uff70\003\uff70\004\uff70" +
    "\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70\017" +
    "\uff70\023\uff70\027\uff70\030\uff70\032\uff70\033\uff70\034\uff70" +
    "\035\uff70\036\uff70\037\uff70\045\uff70\047\uff70\050\uff70\052" +
    "\uff70\055\uff70\056\uff70\057\uff70\060\uff70\062\uff70\063\uff70" +
    "\065\uff70\115\uff70\001\002\000\004\017\336\001\002\000" +
    "\004\015\337\001\002\000\004\032\340\001\002\000\004" +
    "\051\341\001\002\000\026\003\030\004\010\023\041\027" +
    "\045\045\022\055\052\056\012\062\042\063\035\115\044" +
    "\001\002\000\030\003\030\004\010\023\041\027\045\045" +
    "\022\052\343\055\052\056\012\062\042\063\035\115\044" +
    "\001\002\000\004\017\uff6f\001\002\000\006\016\345\023" +
    "\347\001\002\000\006\017\uffd2\027\234\001\002\000\004" +
    "\017\350\001\002\000\004\017\uff7a\001\002\000\100\002" +
    "\uff7c\003\uff7c\004\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c" +
    "\013\uff7c\014\uff7c\017\uff7c\023\uff7c\027\uff7c\030\uff7c\032" +
    "\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\045\uff7c" +
    "\047\uff7c\050\uff7c\052\uff7c\055\uff7c\056\uff7c\057\uff7c\060" +
    "\uff7c\062\uff7c\063\uff7c\065\uff7c\115\uff7c\001\002\000\004" +
    "\017\352\001\002\000\004\015\353\001\002\000\004\032" +
    "\354\001\002\000\004\051\355\001\002\000\026\003\030" +
    "\004\010\023\041\027\045\045\022\055\052\056\012\062" +
    "\042\063\035\115\044\001\002\000\030\003\030\004\010" +
    "\023\041\027\045\045\022\052\357\055\052\056\012\062" +
    "\042\063\035\115\044\001\002\000\004\017\uff7b\001\002" +
    "\000\004\017\361\001\002\000\100\002\uffdc\003\uffdc\004" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\017\uffdc\023\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\045\uffdc\047\uffdc\050\uffdc" +
    "\052\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063" +
    "\uffdc\065\uffdc\115\uffdc\001\002\000\006\016\363\023\365" +
    "\001\002\000\006\017\uffd2\027\234\001\002\000\004\017" +
    "\366\001\002\000\004\017\uff77\001\002\000\100\002\uff79" +
    "\003\uff79\004\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\017\uff79\023\uff79\027\uff79\030\uff79\032\uff79" +
    "\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\045\uff79\047" +
    "\uff79\050\uff79\052\uff79\055\uff79\056\uff79\057\uff79\060\uff79" +
    "\062\uff79\063\uff79\065\uff79\115\uff79\001\002\000\004\017" +
    "\370\001\002\000\004\015\371\001\002\000\004\032\372" +
    "\001\002\000\004\051\373\001\002\000\026\003\030\004" +
    "\010\023\041\027\045\045\022\055\052\056\012\062\042" +
    "\063\035\115\044\001\002\000\030\003\030\004\010\023" +
    "\041\027\045\045\022\052\375\055\052\056\012\062\042" +
    "\063\035\115\044\001\002\000\004\017\uff78\001\002\000" +
    "\004\017\377\001\002\000\100\002\uffdb\003\uffdb\004\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\017" +
    "\uffdb\023\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\045\uffdb\047\uffdb\050\uffdb\052" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb" +
    "\065\uffdb\115\uffdb\001\002\000\100\002\uffa4\003\uffa4\004" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\017\uffa4\023\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\045\uffa4\047\uffa4\050\uffa4" +
    "\052\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\062\uffa4\063" +
    "\uffa4\065\uffa4\115\uffa4\001\002\000\004\021\u0102\001\002" +
    "\000\004\017\u0103\001\002\000\100\002\uff85\003\uff85\004" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\017\uff85\023\uff85\027\uff85\030\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\045\uff85\047\uff85\050\uff85" +
    "\052\uff85\055\uff85\056\uff85\057\uff85\060\uff85\062\uff85\063" +
    "\uff85\065\uff85\115\uff85\001\002\000\032\005\102\006\073" +
    "\011\107\016\057\017\uffd9\020\101\021\061\022\056\023" +
    "\103\061\100\074\071\077\072\001\002\000\004\017\u0106" +
    "\001\002\000\100\002\uff82\003\uff82\004\uff82\007\uff82\010" +
    "\uff82\011\uff82\012\uff82\013\uff82\014\uff82\017\uff82\023\uff82" +
    "\027\uff82\030\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\037\uff82\045\uff82\047\uff82\050\uff82\052\uff82\055\uff82" +
    "\056\uff82\057\uff82\060\uff82\062\uff82\063\uff82\065\uff82\115" +
    "\uff82\001\002\000\040\010\123\011\125\012\126\013\122" +
    "\014\111\017\u0108\032\114\033\112\034\117\035\113\036" +
    "\121\037\120\047\115\057\116\060\124\001\002\000\100" +
    "\002\uffa2\003\uffa2\004\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\017\uffa2\023\uffa2\027\uffa2\030\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\045" +
    "\uffa2\047\uffa2\050\uffa2\052\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\062\uffa2\063\uffa2\065\uffa2\115\uffa2\001\002\000" +
    "\006\007\uffbb\017\uffbb\001\002\000\006\015\u010d\030\u010c" +
    "\001\002\000\012\007\uffba\015\uffb3\017\uffba\030\uffb3\001" +
    "\002\000\004\023\u0114\001\002\000\032\005\102\006\073" +
    "\011\107\016\057\020\101\021\061\022\056\023\103\061" +
    "\100\064\u010f\074\071\077\072\001\002\000\006\007\uffb9" +
    "\017\uffb9\001\002\000\032\005\102\006\073\011\107\016" +
    "\057\020\101\021\061\022\056\023\103\061\100\065\uffb5" +
    "\074\071\077\072\001\002\000\042\007\uffb8\010\123\011" +
    "\125\012\126\013\122\014\111\017\uffb8\032\114\033\112" +
    "\034\117\035\113\036\121\037\120\047\115\057\116\060" +
    "\124\001\002\000\006\030\276\065\uffb6\001\002\000\004" +
    "\065\u0113\001\002\000\006\007\uffb7\017\uffb7\001\002\000" +
    "\006\015\uffb4\030\uffb4\001\002\000\004\021\u0116\001\002" +
    "\000\004\017\u0117\001\002\000\004\007\u0118\001\002\000" +
    "\032\002\uff6b\003\uff6b\004\uff6b\023\uff6b\027\uff6b\045\uff6b" +
    "\052\uff6b\055\uff6b\056\uff6b\062\uff6b\063\uff6b\115\uff6b\001" +
    "\002\000\032\002\uffd5\003\uffd5\004\uffd5\023\uffd5\027\uffd5" +
    "\045\uffd5\052\uffd5\055\uffd5\056\uffd5\062\uffd5\063\uffd5\115" +
    "\uffd5\001\002\000\040\007\u011b\010\123\011\125\012\126" +
    "\013\122\014\111\032\114\033\112\034\117\035\113\036" +
    "\121\037\120\047\115\057\116\060\124\001\002\000\032" +
    "\002\uffd6\003\uffd6\004\uffd6\023\uffd6\027\uffd6\045\uffd6\052" +
    "\uffd6\055\uffd6\056\uffd6\062\uffd6\063\uffd6\115\uffd6\001\002" +
    "\000\030\005\uffc1\006\uffc1\011\uffc1\016\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\061\uffc1\074\uffc1\077\uffc1\001\002" +
    "\000\006\007\uffbe\017\uffbe\001\002\000\030\005\102\006" +
    "\073\011\107\016\057\020\101\021\061\022\056\023\103" +
    "\061\100\074\071\077\072\001\002\000\030\005\uffc2\006" +
    "\uffc2\011\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\061\uffc2\074\uffc2\077\uffc2\001\002\000\006\007\uffbd\017" +
    "\uffbd\001\002\000\030\005\uffc3\006\uffc3\011\uffc3\016\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\061\uffc3\074\uffc3\077" +
    "\uffc3\001\002\000\030\005\102\006\073\011\107\016\057" +
    "\020\101\021\061\022\056\023\103\061\100\074\071\077" +
    "\072\001\002\000\030\005\uffc4\006\uffc4\011\uffc4\016\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\061\uffc4\074\uffc4\077" +
    "\uffc4\001\002\000\040\067\216\070\204\071\217\072\206" +
    "\073\201\076\u0129\101\u0127\103\u012a\104\214\105\202\106" +
    "\200\107\215\110\210\111\203\114\u0128\001\002\000\030" +
    "\005\102\006\073\011\107\016\057\020\101\021\061\022" +
    "\056\023\103\061\100\074\071\077\072\001\002\000\042" +
    "\007\uffc5\010\123\011\125\012\126\013\122\014\111\017" +
    "\uffc5\032\114\033\112\034\117\035\113\036\121\037\120" +
    "\047\115\057\116\060\124\001\002\000\004\016\u0137\001" +
    "\002\000\004\016\u0135\001\002\000\004\016\u0131\001\002" +
    "\000\004\016\u012b\001\002\000\010\004\010\023\u012d\027" +
    "\045\001\002\000\004\017\u012f\001\002\000\026\015\u011e" +
    "\016\171\024\u011d\025\u0120\041\u0123\042\u0121\043\u011f\044" +
    "\u011c\064\173\066\u012e\001\002\000\032\067\216\070\204" +
    "\071\217\072\206\073\201\104\214\105\202\106\200\107" +
    "\215\110\210\111\203\114\u0128\001\002\000\004\007\u0130" +
    "\001\002\000\032\002\uff80\003\uff80\004\uff80\023\uff80\027" +
    "\uff80\045\uff80\052\uff80\055\uff80\056\uff80\062\uff80\063\uff80" +
    "\115\uff80\001\002\000\032\005\102\006\073\011\107\016" +
    "\057\017\uffd9\020\101\021\061\022\056\023\103\061\100" +
    "\074\071\077\072\001\002\000\004\017\u0133\001\002\000" +
    "\004\007\u0134\001\002\000\032\002\uff87\003\uff87\004\uff87" +
    "\023\uff87\027\uff87\045\uff87\052\uff87\055\uff87\056\uff87\062" +
    "\uff87\063\uff87\115\uff87\001\002\000\004\017\u0136\001\002" +
    "\000\006\007\uff6c\017\uff6c\001\002\000\032\005\102\006" +
    "\073\011\107\016\057\017\uffd9\020\101\021\061\022\056" +
    "\023\103\061\100\074\071\077\072\001\002\000\004\017" +
    "\u0139\001\002\000\004\007\u013a\001\002\000\032\002\uff88" +
    "\003\uff88\004\uff88\023\uff88\027\uff88\045\uff88\052\uff88\055" +
    "\uff88\056\uff88\062\uff88\063\uff88\115\uff88\001\002\000\040" +
    "\010\123\011\125\012\126\013\122\014\111\032\114\033" +
    "\112\034\117\035\113\036\121\037\120\047\115\057\116" +
    "\060\124\065\u013c\001\002\000\006\007\uffe1\015\u013d\001" +
    "\002\000\030\005\102\006\073\011\107\016\057\020\101" +
    "\021\061\022\056\023\103\061\100\074\071\077\072\001" +
    "\002\000\066\002\uffbf\003\uffbf\004\uffbf\010\123\011\125" +
    "\012\126\013\122\014\111\023\uffbf\027\uffbf\032\114\033" +
    "\112\034\117\035\113\036\121\037\120\045\uffbf\047\115" +
    "\052\uffbf\055\uffbf\056\uffbf\057\116\060\124\062\uffbf\063" +
    "\uffbf\115\uffbf\001\002\000\042\007\uffc0\010\123\011\125" +
    "\012\126\013\122\014\111\017\uffc0\032\114\033\112\034" +
    "\117\035\113\036\121\037\120\047\115\057\116\060\124" +
    "\001\002\000\004\016\u0141\001\002\000\006\017\uffd2\027" +
    "\234\001\002\000\004\017\u0143\001\002\000\004\051\u0144" +
    "\001\002\000\026\003\030\004\010\023\041\027\045\045" +
    "\022\055\052\056\012\062\042\063\035\115\044\001\002" +
    "\000\030\003\030\004\010\023\041\027\045\045\022\052" +
    "\u0146\055\052\056\012\062\042\063\035\115\044\001\002" +
    "\000\032\002\uffd4\003\uffd4\004\uffd4\023\uffd4\027\uffd4\045" +
    "\uffd4\052\uffd4\055\uffd4\056\uffd4\062\uffd4\063\uffd4\115\uffd4" +
    "\001\002\000\032\002\ufff2\003\ufff2\004\ufff2\023\ufff2\027" +
    "\ufff2\045\ufff2\052\ufff2\055\ufff2\056\ufff2\062\ufff2\063\ufff2" +
    "\115\ufff2\001\002\000\032\002\ufff1\003\ufff1\004\ufff1\023" +
    "\ufff1\027\ufff1\045\ufff1\052\ufff1\055\ufff1\056\ufff1\062\ufff1" +
    "\063\ufff1\115\ufff1\001\002\000\030\005\102\006\073\011" +
    "\107\016\057\020\101\021\061\022\056\023\103\061\100" +
    "\074\071\077\072\001\002\000\040\010\123\011\125\012" +
    "\126\013\122\014\111\017\u014b\032\114\033\112\034\117" +
    "\035\113\036\121\037\120\047\115\057\116\060\124\001" +
    "\002\000\004\051\u014c\001\002\000\026\003\030\004\010" +
    "\023\041\027\045\045\022\055\052\056\012\062\042\063" +
    "\035\115\044\001\002\000\030\003\030\004\010\023\041" +
    "\027\045\045\022\052\u014e\055\052\056\012\062\042\063" +
    "\035\115\044\001\002\000\034\002\uffc8\003\uffc8\004\uffc8" +
    "\023\uffc8\027\uffc8\045\uffc8\046\u014f\052\uffc8\055\uffc8\056" +
    "\uffc8\062\uffc8\063\uffc8\115\uffc8\001\002\000\006\045\022" +
    "\051\u0150\001\002\000\026\003\030\004\010\023\041\027" +
    "\045\045\022\055\052\056\012\062\042\063\035\115\044" +
    "\001\002\000\032\002\uffc6\003\uffc6\004\uffc6\023\uffc6\027" +
    "\uffc6\045\uffc6\052\uffc6\055\uffc6\056\uffc6\062\uffc6\063\uffc6" +
    "\115\uffc6\001\002\000\030\003\030\004\010\023\041\027" +
    "\045\045\022\052\u0153\055\052\056\012\062\042\063\035" +
    "\115\044\001\002\000\032\002\uffc7\003\uffc7\004\uffc7\023" +
    "\uffc7\027\uffc7\045\uffc7\052\uffc7\055\uffc7\056\uffc7\062\uffc7" +
    "\063\uffc7\115\uffc7\001\002\000\032\002\ufffd\003\ufffd\004" +
    "\ufffd\023\ufffd\027\ufffd\045\ufffd\052\ufffd\055\ufffd\056\ufffd" +
    "\062\ufffd\063\ufffd\115\ufffd\001\002\000\032\002\uffce\003" +
    "\uffce\004\uffce\023\uffce\027\uffce\045\uffce\052\uffce\055\uffce" +
    "\056\uffce\062\uffce\063\uffce\115\uffce\001\002\000\004\002" +
    "\001\001\002\000\030\005\102\006\073\011\107\016\057" +
    "\020\101\021\061\022\056\023\103\061\100\074\071\077" +
    "\072\001\002\000\040\010\123\011\125\012\126\013\122" +
    "\014\111\017\u0159\032\114\033\112\034\117\035\113\036" +
    "\121\037\120\047\115\057\116\060\124\001\002\000\006" +
    "\007\uffbc\017\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0157\000\074\002\010\003\037\006\014\007\016\011" +
    "\012\012\003\013\026\014\035\015\031\017\023\020\036" +
    "\023\033\024\025\025\013\031\020\036\047\037\024\042" +
    "\045\046\032\050\030\051\015\052\004\053\050\054\046" +
    "\055\042\056\005\067\006\070\017\071\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\003\037\006\162\011\012\012" +
    "\003\013\026\014\035\015\031\017\023\020\036\023\033" +
    "\024\025\025\013\031\020\036\047\037\024\042\045\046" +
    "\032\050\030\051\015\052\004\053\050\054\046\055\042" +
    "\056\005\067\006\070\017\071\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0124\001\001\000\044\005\u0119\031\062\036" +
    "\054\040\074\041\076\043\063\044\064\045\067\047\103" +
    "\051\065\052\075\053\105\054\061\055\073\056\053\065" +
    "\066\066\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\u0109\010\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\104\031\062\036\054\040\074\041" +
    "\076\043\063\044\064\045\067\047\103\051\065\052\075" +
    "\053\105\054\061\055\073\056\053\065\066\066\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\u0106\031\062\036\054\040\074\041\076\043" +
    "\063\044\064\045\067\047\103\051\065\052\075\053\105" +
    "\054\061\055\073\056\053\065\066\066\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\377\031\062\036\054\040\074\041\076\043\063\044" +
    "\064\045\067\047\103\051\065\052\075\053\105\054\061" +
    "\055\073\056\053\065\066\066\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\005\107\031" +
    "\062\036\054\040\074\041\076\043\063\044\064\045\067" +
    "\047\103\051\065\052\075\053\105\054\061\055\073\056" +
    "\053\065\066\066\057\001\001\000\002\001\001\000\044" +
    "\005\145\031\062\036\054\040\074\041\076\043\063\044" +
    "\064\045\067\047\103\051\065\052\075\053\105\054\061" +
    "\055\073\056\053\065\066\066\057\001\001\000\044\005" +
    "\144\031\062\036\054\040\074\041\076\043\063\044\064" +
    "\045\067\047\103\051\065\052\075\053\105\054\061\055" +
    "\073\056\053\065\066\066\057\001\001\000\044\005\143" +
    "\031\062\036\054\040\074\041\076\043\063\044\064\045" +
    "\067\047\103\051\065\052\075\053\105\054\061\055\073" +
    "\056\053\065\066\066\057\001\001\000\044\005\142\031" +
    "\062\036\054\040\074\041\076\043\063\044\064\045\067" +
    "\047\103\051\065\052\075\053\105\054\061\055\073\056" +
    "\053\065\066\066\057\001\001\000\044\005\137\031\062" +
    "\036\054\040\074\041\076\043\063\044\064\045\067\047" +
    "\103\051\065\052\075\053\105\054\061\055\073\056\053" +
    "\065\066\066\057\001\001\000\044\005\136\031\062\036" +
    "\054\040\074\041\076\043\063\044\064\045\067\047\103" +
    "\051\065\052\075\053\105\054\061\055\073\056\053\065" +
    "\066\066\057\001\001\000\044\005\135\031\062\036\054" +
    "\040\074\041\076\043\063\044\064\045\067\047\103\051" +
    "\065\052\075\053\105\054\061\055\073\056\053\065\066" +
    "\066\057\001\001\000\044\005\134\031\062\036\054\040" +
    "\074\041\076\043\063\044\064\045\067\047\103\051\065" +
    "\052\075\053\105\054\061\055\073\056\053\065\066\066" +
    "\057\001\001\000\044\005\133\031\062\036\054\040\074" +
    "\041\076\043\063\044\064\045\067\047\103\051\065\052" +
    "\075\053\105\054\061\055\073\056\053\065\066\066\057" +
    "\001\001\000\044\005\132\031\062\036\054\040\074\041" +
    "\076\043\063\044\064\045\067\047\103\051\065\052\075" +
    "\053\105\054\061\055\073\056\053\065\066\066\057\001" +
    "\001\000\044\005\131\031\062\036\054\040\074\041\076" +
    "\043\063\044\064\045\067\047\103\051\065\052\075\053" +
    "\105\054\061\055\073\056\053\065\066\066\057\001\001" +
    "\000\044\005\130\031\062\036\054\040\074\041\076\043" +
    "\063\044\064\045\067\047\103\051\065\052\075\053\105" +
    "\054\061\055\073\056\053\065\066\066\057\001\001\000" +
    "\044\005\127\031\062\036\054\040\074\041\076\043\063" +
    "\044\064\045\067\047\103\051\065\052\075\053\105\054" +
    "\061\055\073\056\053\065\066\066\057\001\001\000\044" +
    "\005\126\031\062\036\054\040\074\041\076\043\063\044" +
    "\064\045\067\047\103\051\065\052\075\053\105\054\061" +
    "\055\073\056\053\065\066\066\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\141\031\062\036\054\040\074\041\076\043\063\044" +
    "\064\045\067\047\103\051\065\052\075\053\105\054\061" +
    "\055\073\056\053\065\066\066\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\152\022" +
    "\153\001\001\000\044\005\163\031\062\036\054\040\074" +
    "\041\076\043\063\044\064\045\067\047\103\051\065\052" +
    "\075\053\105\054\061\055\073\056\053\065\066\066\057" +
    "\001\001\000\002\001\001\000\004\022\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\003\037\006\014\007\160\011\012\012" +
    "\003\013\026\014\035\015\031\017\023\020\036\023\033" +
    "\024\025\025\013\031\020\036\047\037\024\042\045\046" +
    "\032\050\030\051\015\052\004\053\050\054\046\055\042" +
    "\056\005\067\006\070\017\071\022\001\001\000\070\003" +
    "\037\006\162\011\012\012\003\013\026\014\035\015\031" +
    "\017\023\020\036\023\033\024\025\025\013\031\020\036" +
    "\047\037\024\042\045\046\032\050\030\051\015\052\004" +
    "\053\050\054\046\055\042\056\005\067\006\070\017\071" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\037\006\014\007" +
    "\166\011\012\012\003\013\026\014\035\015\031\017\023" +
    "\020\036\023\033\024\025\025\013\031\020\036\047\037" +
    "\024\042\045\046\032\050\030\051\015\052\004\053\050" +
    "\054\046\055\042\056\005\067\006\070\017\071\022\001" +
    "\001\000\070\003\037\006\162\011\012\012\003\013\026" +
    "\014\035\015\031\017\023\020\036\023\033\024\025\025" +
    "\013\031\020\036\047\037\024\042\045\046\032\050\030" +
    "\051\015\052\004\053\050\054\046\055\042\056\005\067" +
    "\006\070\017\071\022\001\001\000\002\001\001\000\050" +
    "\005\273\031\062\032\271\033\375\036\054\040\074\041" +
    "\076\043\063\044\064\045\067\047\103\051\065\052\075" +
    "\053\105\054\061\055\073\056\053\065\066\066\057\001" +
    "\001\000\002\001\001\000\044\005\175\031\062\036\054" +
    "\040\074\041\076\043\063\044\064\045\067\047\103\051" +
    "\065\052\075\053\105\054\061\055\073\056\053\065\066" +
    "\066\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\230\001\001\000\002\001\001\000\010\026\235" +
    "\027\236\030\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\037\006\014\007\243\011\012\012\003\013\026" +
    "\014\035\015\031\017\023\020\036\023\033\024\025\025" +
    "\013\031\020\036\047\037\024\042\045\046\032\050\030" +
    "\051\015\052\004\053\050\054\046\055\042\056\005\067" +
    "\006\070\017\071\022\001\001\000\070\003\037\006\162" +
    "\011\012\012\003\013\026\014\035\015\031\017\023\020" +
    "\036\023\033\024\025\025\013\031\020\036\047\037\024" +
    "\042\045\046\032\050\030\051\015\052\004\053\050\054" +
    "\046\055\042\056\005\067\006\070\017\071\022\001\001" +
    "\000\002\001\001\000\004\030\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\254" +
    "\001\001\000\010\026\235\027\256\030\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\037\006\014\007\263\011\012\012\003" +
    "\013\026\014\035\015\031\017\023\020\036\023\033\024" +
    "\025\025\013\031\020\036\047\037\024\042\045\046\032" +
    "\050\030\051\015\052\004\053\050\054\046\055\042\056" +
    "\005\067\006\070\017\071\022\001\001\000\070\003\037" +
    "\006\162\011\012\012\003\013\026\014\035\015\031\017" +
    "\023\020\036\023\033\024\025\025\013\031\020\036\047" +
    "\037\024\042\045\046\032\050\030\051\015\052\004\053" +
    "\050\054\046\055\042\056\005\067\006\070\017\071\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\273\031\062\032\271" +
    "\033\272\036\054\040\074\041\076\043\063\044\064\045" +
    "\067\047\103\051\065\052\075\053\105\054\061\055\073" +
    "\056\053\065\066\066\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\276\031\062\036\054\040\074\041\076\043\063\044" +
    "\064\045\067\047\103\051\065\052\075\053\105\054\061" +
    "\055\073\056\053\065\066\066\057\001\001\000\002\001" +
    "\001\000\004\064\301\001\001\000\010\026\235\027\304" +
    "\030\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\037\006\014\007" +
    "\311\011\012\012\003\013\026\014\035\015\031\017\023" +
    "\020\036\023\033\024\025\025\013\031\020\036\047\037" +
    "\024\042\045\046\032\050\030\051\015\052\004\053\050" +
    "\054\046\055\042\056\005\067\006\070\017\071\022\001" +
    "\001\000\070\003\037\006\162\011\012\012\003\013\026" +
    "\014\035\015\031\017\023\020\036\023\033\024\025\025" +
    "\013\031\020\036\047\037\024\042\045\046\032\050\030" +
    "\051\015\052\004\053\050\054\046\055\042\056\005\067" +
    "\006\070\017\071\022\001\001\000\002\001\001\000\050" +
    "\005\273\031\062\032\271\033\314\036\054\040\074\041" +
    "\076\043\063\044\064\045\067\047\103\051\065\052\075" +
    "\053\105\054\061\055\073\056\053\065\066\066\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\331\001\001\000" +
    "\010\026\235\027\334\030\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\003\037\006\014\007\341\011\012\012\003\013\026\014" +
    "\035\015\031\017\023\020\036\023\033\024\025\025\013" +
    "\031\020\036\047\037\024\042\045\046\032\050\030\051" +
    "\015\052\004\053\050\054\046\055\042\056\005\067\006" +
    "\070\017\071\022\001\001\000\070\003\037\006\162\011" +
    "\012\012\003\013\026\014\035\015\031\017\023\020\036" +
    "\023\033\024\025\025\013\031\020\036\047\037\024\042" +
    "\045\046\032\050\030\051\015\052\004\053\050\054\046" +
    "\055\042\056\005\067\006\070\017\071\022\001\001\000" +
    "\002\001\001\000\004\061\345\001\001\000\010\026\235" +
    "\027\350\030\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\003\037\006" +
    "\014\007\355\011\012\012\003\013\026\014\035\015\031" +
    "\017\023\020\036\023\033\024\025\025\013\031\020\036" +
    "\047\037\024\042\045\046\032\050\030\051\015\052\004" +
    "\053\050\054\046\055\042\056\005\067\006\070\017\071" +
    "\022\001\001\000\070\003\037\006\162\011\012\012\003" +
    "\013\026\014\035\015\031\017\023\020\036\023\033\024" +
    "\025\025\013\031\020\036\047\037\024\042\045\046\032" +
    "\050\030\051\015\052\004\053\050\054\046\055\042\056" +
    "\005\067\006\070\017\071\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\363\001" +
    "\001\000\010\026\235\027\366\030\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\003\037\006\014\007\373\011\012\012\003\013" +
    "\026\014\035\015\031\017\023\020\036\023\033\024\025" +
    "\025\013\031\020\036\047\037\024\042\045\046\032\050" +
    "\030\051\015\052\004\053\050\054\046\055\042\056\005" +
    "\067\006\070\017\071\022\001\001\000\070\003\037\006" +
    "\162\011\012\012\003\013\026\014\035\015\031\017\023" +
    "\020\036\023\033\024\025\025\013\031\020\036\047\037" +
    "\024\042\045\046\032\050\030\051\015\052\004\053\050" +
    "\054\046\055\042\056\005\067\006\070\017\071\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\005\273\031\062\032\271\033\u0104" +
    "\036\054\040\074\041\076\043\063\044\064\045\067\047" +
    "\103\051\065\052\075\053\105\054\061\055\073\056\053" +
    "\065\066\066\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\005\u010f\031\062\034\u010d\036\054\040\074\041\076" +
    "\043\063\044\064\045\067\047\103\051\065\052\075\053" +
    "\105\054\061\055\073\056\053\065\066\066\057\001\001" +
    "\000\002\001\001\000\050\005\273\031\062\032\u0110\035" +
    "\u0111\036\054\040\074\041\076\043\063\044\064\045\067" +
    "\047\103\051\065\052\075\053\105\054\061\055\073\056" +
    "\053\065\066\066\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\u013e\031\062\036\054\040\074\041\076\043\063\044" +
    "\064\045\067\047\103\051\065\052\075\053\105\054\061" +
    "\055\073\056\053\065\066\066\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\u013a" +
    "\031\062\036\054\040\074\041\076\043\063\044\064\045" +
    "\067\047\103\051\065\052\075\053\105\054\061\055\073" +
    "\056\053\065\066\066\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\u0125\031\062\036\054\040\074" +
    "\041\076\043\063\044\064\045\067\047\103\051\065\052" +
    "\075\053\105\054\061\055\073\056\053\065\066\066\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\037" +
    "\011\012\012\003\013\026\014\035\015\031\031\020\036" +
    "\047\051\015\052\004\053\050\054\046\055\042\056\005" +
    "\067\006\070\u012b\001\001\000\002\001\001\000\004\016" +
    "\u0124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\005\273\031\062\032\271\033\u0131\036" +
    "\054\040\074\041\076\043\063\044\064\045\067\047\103" +
    "\051\065\052\075\053\105\054\061\055\073\056\053\065" +
    "\066\066\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\005\273\031\062\032\271\033\u0137\036\054\040\074" +
    "\041\076\043\063\044\064\045\067\047\103\051\065\052" +
    "\075\053\105\054\061\055\073\056\053\065\066\066\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\u013d" +
    "\031\062\036\054\040\074\041\076\043\063\044\064\045" +
    "\067\047\103\051\065\052\075\053\105\054\061\055\073" +
    "\056\053\065\066\066\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\235\027\u0141" +
    "\030\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\037\006\014\007\u0144\011\012\012\003\013\026" +
    "\014\035\015\031\017\023\020\036\023\033\024\025\025" +
    "\013\031\020\036\047\037\024\042\045\046\032\050\030" +
    "\051\015\052\004\053\050\054\046\055\042\056\005\067" +
    "\006\070\017\071\022\001\001\000\070\003\037\006\162" +
    "\011\012\012\003\013\026\014\035\015\031\017\023\020" +
    "\036\023\033\024\025\025\013\031\020\036\047\037\024" +
    "\042\045\046\032\050\030\051\015\052\004\053\050\054" +
    "\046\055\042\056\005\067\006\070\017\071\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\u0149\031\062\036\054\040\074\041\076\043\063" +
    "\044\064\045\067\047\103\051\065\052\075\053\105\054" +
    "\061\055\073\056\053\065\066\066\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\037\006\014\007" +
    "\u014c\011\012\012\003\013\026\014\035\015\031\017\023" +
    "\020\036\023\033\024\025\025\013\031\020\036\047\037" +
    "\024\042\045\046\032\050\030\051\015\052\004\053\050" +
    "\054\046\055\042\056\005\067\006\070\017\071\022\001" +
    "\001\000\070\003\037\006\162\011\012\012\003\013\026" +
    "\014\035\015\031\017\023\020\036\023\033\024\025\025" +
    "\013\031\020\036\047\037\024\042\045\046\032\050\030" +
    "\051\015\052\004\053\050\054\046\055\042\056\005\067" +
    "\006\070\017\071\022\001\001\000\002\001\001\000\004" +
    "\017\u0150\001\001\000\072\003\037\006\014\007\u0151\011" +
    "\012\012\003\013\026\014\035\015\031\017\023\020\036" +
    "\023\033\024\025\025\013\031\020\036\047\037\024\042" +
    "\045\046\032\050\030\051\015\052\004\053\050\054\046" +
    "\055\042\056\005\067\006\070\017\071\022\001\001\000" +
    "\002\001\001\000\070\003\037\006\162\011\012\012\003" +
    "\013\026\014\035\015\031\017\023\020\036\023\033\024" +
    "\025\025\013\031\020\036\047\037\024\042\045\046\032" +
    "\050\030\051\015\052\004\053\050\054\046\055\042\056" +
    "\005\067\006\070\017\071\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\u0157\031\062\036\054\040\074\041\076\043\063" +
    "\044\064\045\067\047\103\051\065\052\075\053\105\054" +
    "\061\055\073\056\053\065\066\066\057\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST ast;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + s.left +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
         ManejadorErroresFS.getInstance().setErrorSintactico(s.left,s.right+1, "problemas con el caracter = " + s.value);
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
    }
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticoFS$actions {
  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action_part00000000(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 parser.ast = new AST(a);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= POSIBLES_LLAMADAS tPtoComa 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IF 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SWITCH 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= BREAK 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= RETURN 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Return a = (Return)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= FUNCION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		AsignacionArreglo a = (AsignacionArreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CREAR_TEXTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearTexto a = (CrearTexto)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CREAR_CAJA_TEXTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearCajaTexto a = (CrearCajaTexto)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= AL_CLIC 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		AlClic a = (AlClic)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= IMPORTAR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Importar a = (Importar)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= error tPtoComa 
            {
              nodoAST RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= error tLlvClose 
            {
              nodoAST RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // POSIBLES_LLAMADAS ::= DECLARACION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // POSIBLES_LLAMADAS ::= AUMENTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Aumento a = (Aumento)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // POSIBLES_LLAMADAS ::= DECREMENTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Decremento a = (Decremento)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // POSIBLES_LLAMADAS ::= IMPRIMIR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // POSIBLES_LLAMADAS ::= ASIGNACION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // POSIBLES_LLAMADAS ::= ASIG_OP 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Asignacion_Operacion a = (Asignacion_Operacion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // POSIBLES_LLAMADAS ::= FUNCION_LLAMADA 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		FuncionLLamada a = (FuncionLLamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // POSIBLES_LLAMADAS ::= ARREGLO_LLAMADA 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ArregloLlamada a = (ArregloLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // POSIBLES_LLAMADAS ::= MAP 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Map a = (Map)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // POSIBLES_LLAMADAS ::= FILTER 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Filter a = (Filter)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // POSIBLES_LLAMADAS ::= BUSCAR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Buscar a = (Buscar)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // POSIBLES_LLAMADAS ::= REDUCE 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Reduce a = (Reduce)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // POSIBLES_LLAMADAS ::= TODOS 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Todos a = (Todos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // POSIBLES_LLAMADAS ::= ALGUNO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Alguno a = (Alguno)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // POSIBLES_LLAMADAS ::= AL_CARGAR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		AlCargar a = (AlCargar)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",54, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARREGLO_LLAMADA ::= tId tCorchOpen EXPRESION tCorchClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ArregloLlamada(id,exp,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARREGLO_LLAMADA ::= tId tPunto res_Descendente tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,1,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARREGLO_LLAMADA ::= tId tPunto res_Ascendente tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,2,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARREGLO_LLAMADA ::= tId tPunto res_Invertir tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,3,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARREGLO_LLAMADA ::= tId tPunto res_maximo tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,4,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARREGLO_LLAMADA ::= tId tPunto res_minimo tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,5,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION_LLAMADA ::= tId tParOpen TIPO_PARAMETROS tParClose 
            {
              FuncionLLamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> pars = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new FuncionLLamada(pars,id,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCION_LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_PARAMETROS ::= PARAMETROS_CALL 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_PARAMETROS ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROS_CALL ::= PARAMETROS_CALL tComa EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; RESULT.add(b);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS_CALL",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROS_CALL ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS_CALL",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETURN ::= tReturn EXPRESION tPtoComa 
            {
              Return RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Return(b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETURN ::= tReturn tPtoComa 
            {
              Return RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Return(aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= tFuncion tId tParOpen TIPO_PARAMETROS_FUNCION tParClose tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion(id,par,ins,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_PARAMETROS_FUNCION ::= PARAMETROS 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS_FUNCION",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_PARAMETROS_FUNCION ::= 
            {
              LinkedList<Simbolo> RESULT =null;
		 RESULT = new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS_FUNCION",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMETROS ::= PARAMETROS tComa PARAMETRO 
            {
              LinkedList<Simbolo> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Simbolo> pars = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Simbolo par = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = pars; RESULT.add(par);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Simbolo> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Simbolo par = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(par);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETRO ::= tVar tId 
            {
              Simbolo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Simbolo(id,new Tipo(Tipo.Primitivo.NULL));
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETRO",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BREAK ::= tBreak tPtoComa 
            {
              Break RESULT =null;
		 RESULT =  new Break(); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCH ::= tSelecciona tParOpen EXPRESION tParClose tLlvOpen LST_CASOS tLlvClose 
            {
              Switch RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion control = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> casos = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Switch(control,casos,controlleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LST_CASOS ::= LST_CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> lc = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = lc; RESULT.add(c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_CASOS",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LST_CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_CASOS",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASO ::= tCaso EXPRESION tDosPuntos tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Caso RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Caso(exp,ins,expleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASO ::= tDefecto tDosPuntos tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Caso RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Caso(ins,insleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new If(cond,ins,condleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose tSino tLlvOpen INSTRUCCIONES tLlvClose 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<nodoAST> ins1 = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins2 = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new If(cond,ins1,ins2,condleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-10)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose tSino IF 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int tIfleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int tIfright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		If tIf = (If)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new If(cond,ins,tIf,condleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG_OP ::= tId TIPO_AO EXPRESION 
            {
              Asignacion_Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Asignacion_Operacion.TipoAO b = (Asignacion_Operacion.TipoAO)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Asignacion_Operacion(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_OP",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO_AO ::= tSumaAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.SUMA;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO_AO ::= tRestaAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.RESTA;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO_AO ::= tMultipliAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.MULTIPLICACION;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_AO ::= tDiviAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.DIVISION;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= tId tIgual EXPRESION 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION_ARREGLO ::= tId tCorchOpen EXPRESION tCorchClose tIgual EXPRESION 
            {
              AsignacionArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new AsignacionArreglo(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AUMENTO ::= tId tAumen 
            {
              Aumento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Aumento(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("AUMENTO",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECREMENTO ::= tId tDecremen 
            {
              Decremento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Decremento(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECREMENTO",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IMPRIMIR ::= tImprimir tParOpen EXPRESION tParClose 
            {
              Imprimir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Imprimir(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= tVar ASIG_VAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIG_VAL ::= tId 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 Identificador id = new Identificador(a,aleft);
                                                        LinkedList<Identificador> lId = new LinkedList<>();
                                                        lId.add(id);
                                                        RESULT = new Declaracion(lId,aleft);
                                                        
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_VAL",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIG_VAL ::= LST_ID tIgual TIPO_DEC_ASIG 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Identificador> a = (LinkedList<Identificador>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        if(b instanceof Expresion){
                                                            RESULT = new Declaracion(a,(Expresion)b,bleft);
                                                        }else{
                                                            RESULT = new Arreglo(a,(LinkedList<Expresion>)b,aleft);
                                                        }
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_VAL",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO_DEC_ASIG ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_DEC_ASIG",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO_DEC_ASIG ::= tCorchOpen TIPO_PARAM_ARREGLO tCorchClose 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_DEC_ASIG",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO_PARAM_ARREGLO ::= PARAMETROS_CALL 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAM_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO_PARAM_ARREGLO ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAM_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LST_ID ::= LST_ID tComa tId 
            {
              LinkedList<Identificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Identificador> a = (LinkedList<Identificador>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; Identificador id = new Identificador(b,bleft); RESULT.add(id);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_ID",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LST_ID ::= tId 
            {
              LinkedList<Identificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		  RESULT = new LinkedList<>();
                                                        Identificador id = new Identificador(a,aleft);
                                                        RESULT.add(id);
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_ID",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= tMenos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,Operacion.Operador.NEGACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION tMas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.SUMA,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION tMenos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.RESTA,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION tPor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.MULTIPLICACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION tDiv EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.DIVISION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION tElev EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.ELEVACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION tIgualDoble EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION tDistinto EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.DIFERENTE_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION tMenorQue EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MENOR_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION tMenorIgual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MENOR_IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION tMayorQue EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION tMayorIgual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION tAnd EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,b,Operacion.Operador.AND,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION tOr EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,b,Operacion.Operador.OR,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= tNot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,Operacion.Operador.NOT,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION tInterrogacion EXPRESION tDosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Ternario(cond,t,f,condleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= tParOpen EXPRESION tParClose 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(new Double(a),new Tipo(Tipo.Primitivo.NUMBER),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= tDec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(new Double(a),new Tipo(Tipo.Primitivo.NUMBER),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= tCad 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.STRING),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Identificador(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= tId tAumen 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.AUMENTO,aleft);
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= tId tDecremen 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.DECREMENTO,aleft); 
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= tTrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= tFalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= ARREGLO_LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ArregloLlamada a = (ArregloLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= FUNCION_LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		FuncionLLamada a = (FuncionLLamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= CREAR_VENTANA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearVentana a = (CrearVentana)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= CREAR_CONTENEDOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearContenedor a = (CrearContenedor)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= LEER_GXML 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LeerGxml a = (LeerGxml)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= OBTENER_POR_ETIQUETA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObtenerPorEtiqueta a = (ObtenerPorEtiqueta)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= OBTENER_POR_ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObtenerPorId a = (ObtenerPorId)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= OBTENER_POR_NOMBRE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObtenerPorNombre a = (ObtenerPorNombre)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= LLAMADA_OBJETO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObjetoLlamada a = (ObjetoLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= CREAR_BOTON 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearBoton a = (CrearBoton)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= FILTER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Filter a = (Filter)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= BUSCAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Buscar a = (Buscar)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= REDUCE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Reduce a = (Reduce)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= TODOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Todos a = (Todos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= ALGUNO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Alguno a = (Alguno)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= MAP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Map a = (Map)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CREAR_BOTON ::= tId tPunto res_crear_boton tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearBoton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new CrearBoton(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_BOTON",37, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CREAR_CAJA_TEXTO ::= tId tPunto res_crear_caja_texto tParOpen TIPO_PARAMETROS tParClose tPtoComa 
            {
              CrearCajaTexto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new CrearCajaTexto(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_CAJA_TEXTO",36, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CREAR_TEXTO ::= tId tPunto res_crear_texto tParOpen TIPO_PARAMETROS tParClose tPtoComa 
            {
              CrearTexto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new CrearTexto(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_TEXTO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LLAMADA_OBJETO ::= tId tPunto tId 
            {
              ObjetoLlamada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new ObjetoLlamada(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_OBJETO",35, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LEER_GXML ::= res_leerGxml tParOpen tCad tParClose 
            {
              LeerGxml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new LeerGxml(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LEER_GXML",33, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OBTENER_POR_ETIQUETA ::= tId tPunto res_obtenerPorEtiqueta tParOpen tCad tParClose 
            {
              ObtenerPorEtiqueta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ObtenerPorEtiqueta(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("OBTENER_POR_ETIQUETA",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OBTENER_POR_ID ::= tId tPunto res_obtenerPorId tParOpen tCad tParClose 
            {
              ObtenerPorId RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ObtenerPorId(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("OBTENER_POR_ID",51, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CREAR_VENTANA ::= res_crear_ventana tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearVentana RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new CrearVentana(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_VENTANA",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CREAR_CONTENEDOR ::= tId tPunto res_crear_contenedor tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearContenedor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new CrearContenedor(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_CONTENEDOR",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AL_CLIC ::= tId tPunto res_alClick tParOpen POSIBLES_LLAMADAS tParClose tPtoComa 
            {
              AlClic RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new AlClic(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("AL_CLIC",38, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FILTER ::= tId tPunto res_filter tParOpen TIPO_FILTER tParClose 
            {
              Filter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Filter(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FILTER",39, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPO_FILTER ::= tParOpen TIPO_PARAMETROS_FUNCION tParClose tIgual tMayorQue tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion("tmpFilerF",par,ins,parleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_FILTER",46, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPO_FILTER ::= tId 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_FILTER",46, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BUSCAR ::= tId tPunto res_buscar tParOpen TIPO_BUSCAR tParClose 
            {
              Buscar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Buscar(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("BUSCAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO_BUSCAR ::= tParOpen TIPO_PARAMETROS_FUNCION tParClose tIgual tMayorQue tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion("tmpBuscarF",par,ins,parleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_BUSCAR",47, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO_BUSCAR ::= tId 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_BUSCAR",47, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // REDUCE ::= tId tPunto res_reduce tParOpen TIPO_REDUCE tParClose 
            {
              Reduce RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Reduce(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("REDUCE",41, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO_REDUCE ::= tParOpen TIPO_PARAMETROS_FUNCION tParClose tIgual tMayorQue tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion("tmpReduceF",par,ins,parleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_REDUCE",48, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPO_REDUCE ::= tId 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_REDUCE",48, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TODOS ::= tId tPunto res_todos tParOpen TIPO_TODOS tParClose 
            {
              Todos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Todos(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TODOS",42, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TIPO_TODOS ::= tParOpen TIPO_PARAMETROS_FUNCION tParClose tIgual tMayorQue tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion("tmpTodosF",par,ins,parleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_TODOS",49, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TIPO_TODOS ::= tId 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_TODOS",49, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ALGUNO ::= tId tPunto res_alguno tParOpen TIPO_ALGUNO tParClose 
            {
              Alguno RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Alguno(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ALGUNO",43, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TIPO_ALGUNO ::= tParOpen TIPO_PARAMETROS_FUNCION tParClose tIgual tMayorQue tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion("tmpAlgunoF",par,ins,parleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_ALGUNO",50, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TIPO_ALGUNO ::= tId 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_ALGUNO",50, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MAP ::= tId tPunto res_map tParOpen TIPO_MAP tParClose 
            {
              Map RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                RESULT = new Map(a,b,aleft);
            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("MAP",44, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TIPO_MAP ::= tParOpen TIPO_PARAMETROS_FUNCION tParClose tIgual tMayorQue tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion("tmpMapF",par,ins,parleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_MAP",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPO_MAP ::= tId 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_MAP",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OBTENER_POR_NOMBRE ::= tId tPunto res_obtenerPorNombre tParOpen tCad tComa tCad tParClose 
            {
              ObtenerPorNombre RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ObtenerPorNombre(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("OBTENER_POR_NOMBRE",52, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AL_CARGAR ::= tId tPunto res_alCargar tParOpen tParClose 
            {
              AlCargar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		RESULT = new AlCargar(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("AL_CARGAR",53, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IMPORTAR ::= res_Importar tParOpen tCad tParClose tPtoComa 
            {
              Importar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new Importar(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IMPORTAR",55, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticoFS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
              return CUP$sintacticoFS$do_action_part00000000(
                               CUP$sintacticoFS$act_num,
                               CUP$sintacticoFS$parser,
                               CUP$sintacticoFS$stack,
                               CUP$sintacticoFS$top);
    }
}

}
