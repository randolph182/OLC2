/* descargar la ultima version como main.java -> https://www.cs.princeton.edu/~appel/modern/java/JLex/ */
/*------------------- 1era Area: Codigo de usuario ------------------------*/
package analizadores.FS;
import java_cup.runtime.Symbol;
import FuncionScript.ErroresFS.ManejadorErroresFS;
/*----------------- 2da Area: Opciones y declaraciones --------------------*/
%%
%{
//-------------------------------> Codigo de usuario en sintaxis java 
%}

%class lexicoFS      
%public             
%cup               
%char               
%full
%ignorecase         
%line               
%unicode
%state COMENT_MULTI_LINE
%init{
    yyline = 1;     
    yychar = 1;     
%init}
entero = [0-9]+
decimal = [0-9]+"."[0-9]+
id = ["_"A-Za-z]+["_"0-9A-Za-z]*
cadena = [\"\'][^\"\'\n]*[\"\']
ignora = [ \t\r\f\n]+
COMENT_LINE =("//".*\r\n)|("//".*\n)|("//".*\r)

%%
<YYINITIAL> "CrearCajaTexto"      { return new Symbol(sym.res_crear_caja_texto,yyline,yychar, yytext());}
<YYINITIAL> "ObtenerPorEtiqueta"      { return new Symbol(sym.res_obtenerPorEtiqueta,yyline,yychar, yytext());}
<YYINITIAL> "LeerGxml"      { return new Symbol(sym.res_leerGxml,yyline,yychar, yytext());}
<YYINITIAL> "crearTexto"      { return new Symbol(sym.res_crear_texto,yyline,yychar, yytext());}
<YYINITIAL> "crearContenedor"      { return new Symbol(sym.res_crear_contenedor,yyline,yychar, yytext());}
<YYINITIAL> "crearVentana"      { return new Symbol(sym.res_crear_ventana,yyline,yychar, yytext());}
<YYINITIAL> "minimo"      		{ return new Symbol(sym.res_minimo,yyline,yychar, yytext());}
<YYINITIAL> "maximo"      		{ return new Symbol(sym.res_maximo,yyline,yychar, yytext());}
<YYINITIAL> "invertir"      		{ return new Symbol(sym.res_Invertir,yyline,yychar, yytext());}
<YYINITIAL> "ascendente"      		{ return new Symbol(sym.res_Ascendente,yyline,yychar, yytext());}
<YYINITIAL> "descendente"      		{ return new Symbol(sym.res_Descendente,yyline,yychar, yytext());}
<YYINITIAL> "["      		{ return new Symbol(sym.tCorchOpen,yyline,yychar, yytext());}
<YYINITIAL> "]"      		{ return new Symbol(sym.tCorchClose,yyline,yychar, yytext());}
<YYINITIAL> "funcion"      		{ return new Symbol(sym.tFuncion,yyline,yychar, yytext());}
<YYINITIAL> "retornar"      		{ return new Symbol(sym.tReturn,yyline,yychar, yytext());}
<YYINITIAL> "si"      		{ return new Symbol(sym.tSi,yyline,yychar, yytext());}
<YYINITIAL> "sino"      	{ return new Symbol(sym.tSino,yyline,yychar, yytext());}
<YYINITIAL> "detener"      	{ return new Symbol(sym.tBreak,yyline,yychar, yytext());}
<YYINITIAL> "selecciona"    { return new Symbol(sym.tSelecciona,yyline,yychar, yytext());}
<YYINITIAL> "caso"    		{ return new Symbol(sym.tCaso,yyline,yychar, yytext());}
<YYINITIAL> "defecto"    	{ return new Symbol(sym.tDefecto,yyline,yychar, yytext());}
<YYINITIAL> "?"      		{ return new Symbol(sym.tInterrogacion,yyline,yychar, yytext());}
<YYINITIAL> ":"      		{ return new Symbol(sym.tDosPuntos,yyline,yychar, yytext());}
<YYINITIAL> "."      		{ return new Symbol(sym.tPunto,yyline,yychar, yytext());}
<YYINITIAL> "imprimir"      { return new Symbol(sym.tImprimir,yyline,yychar, yytext());}
<YYINITIAL> "var"           { return new Symbol(sym.tVar,yyline,yychar, yytext());}
<YYINITIAL> "="             { return new Symbol(sym.tIgual,yyline,yychar, yytext());}
<YYINITIAL> "verdadero"		{ return new Symbol(sym.tTrue,yyline,yychar, yytext());}
<YYINITIAL> "falso"			{ return new Symbol(sym.tFalse,yyline,yychar, yytext());}
<YYINITIAL> ";" 			{ return new Symbol(sym.tPtoComa,yyline,yychar, yytext());}
<YYINITIAL> "," 			{ return new Symbol(sym.tComa,yyline,yychar, yytext());}
<YYINITIAL> "+"             { return new Symbol(sym.tMas,yyline,yychar, yytext());}
<YYINITIAL> "-"             { return new Symbol(sym.tMenos,yyline,yychar, yytext());}
<YYINITIAL> "/"             { return new Symbol(sym.tDiv,yyline,yychar, yytext());}
<YYINITIAL> "*"             { return new Symbol(sym.tPor,yyline,yychar, yytext());}
<YYINITIAL> "^"             { return new Symbol(sym.tElev,yyline,yychar, yytext());}
<YYINITIAL> "("             { return new Symbol(sym.tParOpen,yyline,yychar, yytext());} 
<YYINITIAL> ")"             { return new Symbol(sym.tParClose,yyline,yychar, yytext());} 

<YYINITIAL> "{"             { return new Symbol(sym.tLlvOpen,yyline,yychar, yytext());} 
<YYINITIAL> "}"             { return new Symbol(sym.tLlvClose,yyline,yychar, yytext());}

<YYINITIAL> "++"      		{ return new Symbol(sym.tAumen,yyline,yychar, yytext());}
<YYINITIAL> "--"      		{ return new Symbol(sym.tDecremen,yyline,yychar, yytext());}
<YYINITIAL> ">"      	{ return new Symbol(sym.tMayorQue,yyline,yychar, yytext());}
<YYINITIAL> "<"      	{ return new Symbol(sym.tMenorQue,yyline,yychar, yytext());}
<YYINITIAL> ">="      	{ return new Symbol(sym.tMayorIgual,yyline,yychar, yytext());}
<YYINITIAL> "<="      	{ return new Symbol(sym.tMenorIgual,yyline,yychar, yytext());}
<YYINITIAL> "=="      	{ return new Symbol(sym.tIgualDoble,yyline,yychar, yytext());}
<YYINITIAL> "!="      	{ return new Symbol(sym.tDistinto,yyline,yychar, yytext());}
<YYINITIAL> "+="      	{ return new Symbol(sym.tSumaAsig,yyline,yychar, yytext());}
<YYINITIAL> "-="      	{ return new Symbol(sym.tRestaAsig,yyline,yychar, yytext());}
<YYINITIAL> "*="      	{ return new Symbol(sym.tMultipliAsig,yyline,yychar, yytext());}
<YYINITIAL> "/="      	{ return new Symbol(sym.tDiviAsig,yyline,yychar, yytext());}

<YYINITIAL> "&&"      	{ return new Symbol(sym.tAnd,yyline,yychar, yytext());}
<YYINITIAL> "||"      	{ return new Symbol(sym.tOr,yyline,yychar, yytext());}
<YYINITIAL> "!"      	{ return new Symbol(sym.tNot,yyline,yychar, yytext());}

<YYINITIAL> {entero}        { return new Symbol(sym.tEntero,yyline,yychar, yytext());}
<YYINITIAL> {cadena}		{ return new Symbol(sym.tCad,yyline,yychar, (yytext()).substring(1,yytext().length()-1));}
<YYINITIAL> {decimal}       { return new Symbol(sym.tDec,yyline,yychar, yytext());}
<YYINITIAL> {id}            { return new Symbol(sym.tId,yyline,yychar, yytext());}
<YYINITIAL> \n              {yychar=1;}
<YYINITIAL> {ignora}		{} 
<YYINITIAL> {COMENT_LINE}	{yychar=1;}
<YYINITIAL> "/*"			{yybegin(COMENT_MULTI_LINE);}
<COMENT_MULTI_LINE> "*"		{}
<COMENT_MULTI_LINE> [^"*/"]		{}
<COMENT_MULTI_LINE> "*/"	{yybegin(YYINITIAL);}						
<YYINITIAL> .	{
           			//System.out.println("Error lexico en : "+yytext() + ", en la linea: "+yyline+", en la columna: "+yychar);
           			ManejadorErroresFS.getInstance().setErrorLexico(yyline,yychar, "problemas con el caracter = " + yytext());
				}
			

