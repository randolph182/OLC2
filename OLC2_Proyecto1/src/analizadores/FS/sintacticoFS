// jar en la pagina -> http://www2.cs.tum.edu/projects/cup/
package analizadores.FS;
import java_cup.runtime.*;
import java.util.LinkedList;

// ************** importaciones de las clases que se utilizaran en el analisis *********
import FuncionScript.AST.Expresiones.*;
import FuncionScript.AST.Expresiones.Operacion.*;
import FuncionScript.Entorno.*;
import FuncionScript.AST.Instrucciones.*;
import FuncionScript.AST.*;
import FuncionScript.ErroresFS.ManejadorErroresFS;
import FuncionScript.AST.Instrucciones.Condicionales.*;
//acciones que se programan en el parser

parser code
{:
    public AST ast;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + s.left +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
         ManejadorErroresFS.getInstance().setErrorSintactico(s.left,s.right+1, "problemas con el caracter " + s.value);
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
	}
    

:}

terminal String tImprimir;
terminal String tTrue;
terminal String tFalse;
terminal String tPtoComa;
terminal String tMas;
terminal String tMenos;
terminal String tDiv;
terminal String tPor;
terminal String tElev;
terminal String tIgual;
terminal String tParOpen;
terminal String tParClose;
terminal String tEntero;
terminal String tCad;
terminal String tDec;
terminal String tId;
terminal String tAumen;
terminal String tDecremen;
terminal String unarioNeg;
terminal String tVar;
terminal String tComa;
terminal String umenos;
terminal Strng tMayorQue,tMenorQue,tMayorIgual,tMenorIgual,tIgualDoble,tDistinto;
terminal String tNulo;
terminal String tSumaAsig,tRestaAsig,tMultipliAsig,tDiviAsig;
terminal String tSi,tSelecciona,tInterrogacion,tDosPuntos;


non terminal S;
non terminal Declaracion DECLARACION;
non terminal LinkedList<Identificador> LST_ID;
non terminal Expresion EXPRESION;
non terminal nodoAST INSTRUCCION;
non terminal LinkedList<nodoAST> INSTRUCCIONES;
non terminal Declaracion ASIG_VAL;
non terminal Imprimir IMPRIMIR;
non terminal Aumento AUMENTO;
non terminal Decremento DECREMENTO;
non terminal Asignacion ASIGNACION;
non terminal Asignacion_Operacion ASIG_OP;
non terminal Asignacion_Operacion.TipoAO TIPO_AO;


precedence right tIgual;

//ternario
precedence left  tInterrogacion,tDosPuntos;
//Operaciones relacionales
precedence left  tIgualDoble,tDistinto;
//Operaciones relacionales
precedence left  tMenorQue,tMenorIgual,tMayorQue,tMayorIgual;
//Operaciones Artimeticas
precedence left  tMas,tMenos;
precedence left  tPor,tDiv;
precedence right  tElev;
precedence left  tAumen,tDecremen;
precedence right  umenos;

/* ******************************************* GRAMATICA **************************************** */
start with S;

S::=	INSTRUCCIONES:a  {: parser.ast = new AST(a);:};

INSTRUCCIONES::= INSTRUCCIONES:a INSTRUCCION:b    {:RESULT = a; RESULT.add(b);:}
                |INSTRUCCION:a         {:RESULT = new LinkedList<>(); RESULT.add(a);:}
                ;

INSTRUCCION::=   DECLARACION:a                      {:RESULT = a;:}
                | AUMENTO:a                         {:RESULT = a;:}
                | DECREMENTO:a                      {:RESULT = a;:}
                | IMPRIMIR:a                        {: RESULT = a;:}
                | ASIGNACION:a                      {: RESULT = a;:}
                | ASIG_OP:a                         {: RESULT = a;:}
                | error tPtoComa
                ;

ASIG_OP::=      tId:a TIPO_AO:b EXPRESION:c tPtoComa {: RESULT = new Asignacion_Operacion(a,b,c,aleft);:}
                ;

TIPO_AO::=      tSumaAsig               {:RESULT = Asignacion_Operacion.TipoAO.SUMA;:}
                |tRestaAsig             {:RESULT = Asignacion_Operacion.TipoAO.RESTA;:}
                |tMultipliAsig          {:RESULT = Asignacion_Operacion.TipoAO.MULTIPLICACION;:}
                |tDiviAsig              {:RESULT = Asignacion_Operacion.TipoAO.DIVISION;:}
                ;               

ASIGNACION::=  tId:a tIgual EXPRESION:b tPtoComa    {:RESULT = new Asignacion(a,b,aleft);:}
                ;

AUMENTO::=      tId:a tAumen tPtoComa              {: RESULT = new Aumento(a,aleft);:}
                ;

DECREMENTO::=   tId:a tDecremen tPtoComa           {: RESULT = new Decremento(a,aleft);:}
                ;

IMPRIMIR::=     tImprimir tParOpen EXPRESION:a tParClose tPtoComa {:RESULT = new Imprimir(a,aleft);:}
                ;                

DECLARACION::=   tVar  ASIG_VAL:a tPtoComa          {:RESULT = a;:}
                ;

ASIG_VAL::=     | tId:a                             {: Identificador id = new Identificador(a,aleft);
                                                        LinkedList<Identificador> lId = new LinkedList<>();
                                                        lId.add(id);
                                                        RESULT = new Declaracion(lId,aleft);
                                                        
                                                    :}

                | LST_ID:a tIgual EXPRESION:b       {:RESULT = new Declaracion(a,b,bleft);:}
                ;

LST_ID::=       LST_ID:a tComa tId:b                {:RESULT = a; Identificador id = new Identificador(b,bleft); RESULT.add(id);:}
                |tId:a                              {:  RESULT = new LinkedList<>();
                                                        Identificador id = new Identificador(a,aleft);
                                                        RESULT.add(id);
                                                    :}
                ;

EXPRESION::=     tMenos EXPRESION:a                 {:RESULT = new Aritmetica(a,Operacion.Operador.NEGACION,aleft);:} %prec umenos
                |EXPRESION:a tMas EXPRESION:b       {:RESULT = new Aritmetica(a,b,Operacion.Operador.SUMA,aleft);:}
                |EXPRESION:a tMenos EXPRESION:b     {:RESULT = new Aritmetica(a,b,Operacion.Operador.RESTA,aleft);:}
                |EXPRESION:a tPor EXPRESION:b       {:RESULT = new Aritmetica(a,b,Operacion.Operador.MULTIPLICACION,aleft);:}
                |EXPRESION:a tDiv EXPRESION:b       {:RESULT = new Aritmetica(a,b,Operacion.Operador.DIVISION,aleft);:}
                |EXPRESION:a tElev EXPRESION:b      {:RESULT = new Aritmetica(a,b,Operacion.Operador.ELEVACION,aleft);:}

                |EXPRESION:a tIgualDoble EXPRESION:b      {:RESULT = new Relacional(a,b,Operacion.Operador.IGUAL_QUE,aleft);:}
                |EXPRESION:a tDistinto EXPRESION:b      {:RESULT = new Relacional(a,b,Operacion.Operador.DIFERENTE_QUE,aleft);:}
                |EXPRESION:a tMenorQue EXPRESION:b      {:RESULT = new Relacional(a,b,Operacion.Operador.MENOR_QUE,aleft);:}
                |EXPRESION:a tMenorIgual EXPRESION:b      {:RESULT = new Relacional(a,b,Operacion.Operador.MENOR_IGUAL_QUE,aleft);:}
                |EXPRESION:a tMayorQue EXPRESION:b      {:RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_QUE,aleft);:}
                |EXPRESION:a tMayorIgual EXPRESION:b      {:RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL_QUE,aleft);:}

                |EXPRESION:cond tInterrogacion EXPRESION:t tDosPuntos EXPRESION:f {: RESULT = new Ternario(cond,t,f,condleft);:}
                |tParOpen EXPRESION:a tParClose     {:RESULT = a;:}
                |tEntero:a                          {:RESULT = new Unario(a,new Tipo(Tipo.Primitivo.NUMBER),aleft);:}
                |tDec:a                             {:RESULT = new Unario(a,new Tipo(Tipo.Primitivo.NUMBER),aleft);:}
                |tCad:a                             {:RESULT = new Unario(a,new Tipo(Tipo.Primitivo.STRING),aleft);:}
                |tId:a                              {:RESULT = new Identificador(a,aleft);:}
                |tId:a tAumen                       {:  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.AUMENTO,aleft);
                                                    :}
                |tId:a tDecremen                    {:  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.DECREMENTO,aleft); 
                                                    :}
                |tTrue:a                            {:RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);:}
                |tFalse:a                           {:RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);:}
                ;