
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.FS;

import java_cup.runtime.*;
import java.util.LinkedList;
import FuncionScript.AST.Expresiones.*;
import FuncionScript.AST.Expresiones.Operacion.*;
import FuncionScript.Entorno.*;
import FuncionScript.AST.Instrucciones.*;
import FuncionScript.AST.*;
import FuncionScript.ErroresFS.ManejadorErroresFS;
import FuncionScript.AST.Instrucciones.Condicionales.*;
import FuncionScript.AST.Expresiones.InterfazUsuario.*;
import FuncionScript.AST.Instrucciones.InterfazUsuario.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticoFS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\036\006\000\002" +
    "\036\007\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\007\000\002\031\006\000\002\033\003" +
    "\000\002\033\002\000\002\032\005\000\002\032\003\000" +
    "\002\024\005\000\002\024\004\000\002\025\012\000\002" +
    "\027\003\000\002\027\002\000\002\026\005\000\002\026" +
    "\003\000\002\030\004\000\002\023\004\000\002\020\011" +
    "\000\002\021\004\000\002\021\003\000\002\022\010\000" +
    "\002\022\007\000\002\017\011\000\002\017\015\000\002" +
    "\017\013\000\002\015\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\014\005" +
    "\000\002\037\010\000\002\012\004\000\002\013\004\000" +
    "\002\011\006\000\002\003\004\000\002\010\003\000\002" +
    "\010\005\000\002\034\003\000\002\034\005\000\002\035" +
    "\003\000\002\035\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\007\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\047\010\000\002\046\011\000\002\042\011\000" +
    "\002\045\005\000\002\043\006\000\002\044\010\000\002" +
    "\040\006\000\002\041\010\000\002\050\011\000\002\051" +
    "\010\000\002\052\010\000\002\053\010\000\002\054\010" +
    "\000\002\055\010\000\002\056\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\024\003\034\004\030\023\040\027\024\045" +
    "\007\055\012\056\031\062\010\063\025\001\002\000\030" +
    "\002\ufff4\003\ufff4\004\ufff4\023\ufff4\027\ufff4\045\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\062\ufff4\063\ufff4\001\002\000\030" +
    "\002\ufffe\003\ufffe\004\ufffe\023\ufffe\027\ufffe\045\ufffe\052" +
    "\ufffe\055\ufffe\056\ufffe\062\ufffe\063\ufffe\001\002\000\006" +
    "\007\uffea\017\uffea\001\002\000\004\016\375\001\002\000" +
    "\032\005\101\006\072\007\372\011\106\016\060\020\100" +
    "\021\061\022\057\023\102\061\077\074\070\077\071\001" +
    "\002\000\004\002\371\001\002\000\004\016\346\001\002" +
    "\000\006\007\ufff1\017\ufff1\001\002\000\030\002\ufff9\003" +
    "\ufff9\004\ufff9\023\ufff9\027\ufff9\045\ufff9\052\ufff9\055\ufff9" +
    "\056\ufff9\062\ufff9\063\ufff9\001\002\000\026\002\000\003" +
    "\034\004\030\023\040\027\024\045\007\055\012\056\031" +
    "\062\010\063\025\001\002\000\006\007\uffee\017\uffee\001" +
    "\002\000\030\002\ufffb\003\ufffb\004\ufffb\023\ufffb\027\ufffb" +
    "\045\ufffb\052\ufffb\055\ufffb\056\ufffb\062\ufffb\063\ufffb\001" +
    "\002\000\030\002\ufffc\003\ufffc\004\ufffc\023\ufffc\027\ufffc" +
    "\045\ufffc\052\ufffc\055\ufffc\056\ufffc\062\ufffc\063\ufffc\001" +
    "\002\000\030\002\ufff6\003\ufff6\004\ufff6\023\ufff6\027\ufff6" +
    "\045\ufff6\052\ufff6\055\ufff6\056\ufff6\062\ufff6\063\ufff6\001" +
    "\002\000\006\007\uffeb\017\uffeb\001\002\000\006\007\ufff0" +
    "\017\ufff0\001\002\000\004\023\334\001\002\000\004\023" +
    "\314\001\002\000\030\002\ufff5\003\ufff5\004\ufff5\023\ufff5" +
    "\027\ufff5\045\ufff5\052\ufff5\055\ufff5\056\ufff5\062\ufff5\063" +
    "\ufff5\001\002\000\006\007\uffed\017\uffed\001\002\000\004" +
    "\016\311\001\002\000\004\007\310\001\002\000\030\002" +
    "\ufffa\003\ufffa\004\ufffa\023\ufffa\027\ufffa\045\ufffa\052\ufffa" +
    "\055\ufffa\056\ufffa\062\ufffa\063\ufffa\001\002\000\006\007" +
    "\uffec\017\uffec\001\002\000\006\007\306\052\307\001\002" +
    "\000\004\007\305\001\002\000\006\007\uffef\017\uffef\001" +
    "\002\000\030\002\ufff7\003\ufff7\004\ufff7\023\ufff7\027\ufff7" +
    "\045\ufff7\052\ufff7\055\ufff7\056\ufff7\062\ufff7\063\ufff7\001" +
    "\002\000\026\015\045\016\044\024\043\025\050\041\052" +
    "\042\047\043\046\044\042\064\051\066\053\001\002\000" +
    "\030\002\ufff8\003\ufff8\004\ufff8\023\ufff8\027\ufff8\045\ufff8" +
    "\052\ufff8\055\ufff8\056\ufff8\062\ufff8\063\ufff8\001\002\000" +
    "\030\005\uffc9\006\uffc9\011\uffc9\016\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\061\uffc9\074\uffc9\077\uffc9\001\002\000" +
    "\006\007\uffc6\017\uffc6\001\002\000\032\005\101\006\072" +
    "\011\106\016\060\017\uffe1\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\uffca" +
    "\006\uffca\011\uffca\016\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\061\uffca\074\uffca\077\uffca\001\002\000\030\005\uffcb" +
    "\006\uffcb\011\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\061\uffcb\074\uffcb\077\uffcb\001\002\000\006\007\uffc5" +
    "\017\uffc5\001\002\000\030\005\101\006\072\011\106\016" +
    "\060\020\100\021\061\022\057\023\102\061\077\074\070" +
    "\077\071\001\002\000\030\005\uffcc\006\uffcc\011\uffcc\016" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\061\uffcc\074\uffcc" +
    "\077\uffcc\001\002\000\022\067\171\070\160\071\172\072" +
    "\162\073\154\076\256\101\257\103\255\001\002\000\030" +
    "\005\101\006\072\011\106\016\060\020\100\021\061\022" +
    "\057\023\102\061\077\074\070\077\071\001\002\000\076" +
    "\002\uff94\003\uff94\004\uff94\007\uff94\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\017\uff94\023\uff94\027\uff94\030\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\045" +
    "\uff94\047\uff94\050\uff94\052\uff94\055\uff94\056\uff94\057\uff94" +
    "\060\uff94\062\uff94\063\uff94\065\uff94\001\002\000\076\002" +
    "\uffa1\003\uffa1\004\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\017\uffa1\023\uffa1\027\uffa1\030\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\045\uffa1" +
    "\047\uffa1\050\uffa1\052\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\062\uffa1\063\uffa1\065\uffa1\001\002\000\076\002\uffa8" +
    "\003\uffa8\004\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\017\uffa8\023\uffa8\027\uffa8\030\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\045\uffa8\047" +
    "\uffa8\050\uffa8\052\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\062\uffa8\063\uffa8\065\uffa8\001\002\000\030\005\101\006" +
    "\072\011\106\016\060\020\100\021\061\022\057\023\102" +
    "\061\077\074\070\077\071\001\002\000\076\002\uffa7\003" +
    "\uffa7\004\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\017\uffa7\023\uffa7\027\uffa7\030\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\045\uffa7\047\uffa7" +
    "\050\uffa7\052\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\062" +
    "\uffa7\063\uffa7\065\uffa7\001\002\000\076\002\uff96\003\uff96" +
    "\004\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\017\uff96\023\uff96\027\uff96\030\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\045\uff96\047\uff96\050" +
    "\uff96\052\uff96\055\uff96\056\uff96\057\uff96\060\uff96\062\uff96" +
    "\063\uff96\065\uff96\001\002\000\076\002\uffa0\003\uffa0\004" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\017\uffa0\023\uffa0\027\uffa0\030\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\045\uffa0\047\uffa0\050\uffa0" +
    "\052\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\062\uffa0\063" +
    "\uffa0\065\uffa0\001\002\000\076\002\uff9d\003\uff9d\004\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\017" +
    "\uff9d\023\uff9d\027\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\045\uff9d\047\uff9d\050\uff9d\052" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\062\uff9d\063\uff9d" +
    "\065\uff9d\001\002\000\076\002\uff9c\003\uff9c\004\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\017\uff9c" +
    "\023\uff9c\027\uff9c\030\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\045\uff9c\047\uff9c\050\uff9c\052\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\060\uff9c\062\uff9c\063\uff9c\065" +
    "\uff9c\001\002\000\076\002\uff99\003\uff99\004\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\017\uff99\023" +
    "\uff99\027\uff99\030\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\045\uff99\047\uff99\050\uff99\052\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\062\uff99\063\uff99\065\uff99" +
    "\001\002\000\076\002\uff9b\003\uff9b\004\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\017\uff9b\023\uff9b" +
    "\027\uff9b\030\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\045\uff9b\047\uff9b\050\uff9b\052\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\062\uff9b\063\uff9b\065\uff9b\001" +
    "\002\000\004\016\250\001\002\000\004\016\245\001\002" +
    "\000\076\002\uffa2\003\uffa2\004\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\017\uffa2\023\uffa2\027\uffa2" +
    "\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\045\uffa2\047\uffa2\050\uffa2\052\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\062\uffa2\063\uffa2\065\uffa2\001\002\000" +
    "\076\002\uff95\003\uff95\004\uff95\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\017\uff95\023\uff95\027\uff95\030" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\045\uff95\047\uff95\050\uff95\052\uff95\055\uff95\056\uff95\057" +
    "\uff95\060\uff95\062\uff95\063\uff95\065\uff95\001\002\000\076" +
    "\002\uff9f\003\uff9f\004\uff9f\007\uff9f\010\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\017\uff9f\023\uff9f\027\uff9f\030\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\045" +
    "\uff9f\047\uff9f\050\uff9f\052\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\062\uff9f\063\uff9f\065\uff9f\001\002\000\076\002" +
    "\uff98\003\uff98\004\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\017\uff98\023\uff98\027\uff98\030\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\045\uff98" +
    "\047\uff98\050\uff98\052\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\062\uff98\063\uff98\065\uff98\001\002\000\076\002\uff9e" +
    "\003\uff9e\004\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\017\uff9e\023\uff9e\027\uff9e\030\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\045\uff9e\047" +
    "\uff9e\050\uff9e\052\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\062\uff9e\063\uff9e\065\uff9e\001\002\000\030\005\101\006" +
    "\072\011\106\016\060\020\100\021\061\022\057\023\102" +
    "\061\077\074\070\077\071\001\002\000\076\002\uffa9\003" +
    "\uffa9\004\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\017\uffa9\023\uffa9\027\uffa9\030\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\045\uffa9\047\uffa9" +
    "\050\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\062" +
    "\uffa9\063\uffa9\065\uffa9\001\002\000\076\002\uffa3\003\uffa3" +
    "\004\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\017\uffa3\023\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\045\uffa3\047\uffa3\050" +
    "\uffa3\052\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\062\uffa3" +
    "\063\uffa3\065\uffa3\001\002\000\110\002\uffa6\003\uffa6\004" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\016\044\017\uffa6\023\uffa6\024\151\025\150\027\uffa6\030" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\045\uffa6\047\uffa6\050\uffa6\052\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\062\uffa6\063\uffa6\064\147\065\uffa6\066\146" +
    "\001\002\000\076\002\uff9a\003\uff9a\004\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\017\uff9a\023\uff9a" +
    "\027\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\045\uff9a\047\uff9a\050\uff9a\052\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\060\uff9a\062\uff9a\063\uff9a\065\uff9a\001" +
    "\002\000\042\007\uffcd\010\122\011\124\012\125\013\121" +
    "\014\110\017\uffcd\032\113\033\111\034\116\035\112\036" +
    "\120\037\117\047\114\057\115\060\123\001\002\000\076" +
    "\002\uff97\003\uff97\004\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\017\uff97\023\uff97\027\uff97\030\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\045" +
    "\uff97\047\uff97\050\uff97\052\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\062\uff97\063\uff97\065\uff97\001\002\000\030\005" +
    "\101\006\072\011\106\016\060\020\100\021\061\022\057" +
    "\023\102\061\077\074\070\077\071\001\002\000\076\002" +
    "\uffba\003\uffba\004\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\014\uffba\017\uffba\023\uffba\027\uffba\030\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\045\uffba" +
    "\047\uffba\050\uffba\052\uffba\055\uffba\056\uffba\057\uffba\060" +
    "\uffba\062\uffba\063\uffba\065\uffba\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\030\005\101" +
    "\006\072\011\106\016\060\020\100\021\061\022\057\023" +
    "\102\061\077\074\070\077\071\001\002\000\076\002\uffb6" +
    "\003\uffb6\004\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\110\017\uffb6\023\uffb6\027\uffb6\030\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\045\uffb6\047" +
    "\uffb6\050\uffb6\052\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\062\uffb6\063\uffb6\065\uffb6\001\002\000\076\002\uffb8\003" +
    "\uffb8\004\uffb8\007\uffb8\010\uffb8\011\uffb8\012\125\013\121" +
    "\014\110\017\uffb8\023\uffb8\027\uffb8\030\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\045\uffb8\047\uffb8" +
    "\050\uffb8\052\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062" +
    "\uffb8\063\uffb8\065\uffb8\001\002\000\076\002\uffad\003\uffad" +
    "\004\uffad\007\uffad\010\122\011\124\012\125\013\121\014" +
    "\110\017\uffad\023\uffad\027\uffad\030\uffad\032\113\033\111" +
    "\034\116\035\112\036\120\037\117\045\uffad\047\uffad\050" +
    "\uffad\052\uffad\055\uffad\056\uffad\057\115\060\uffad\062\uffad" +
    "\063\uffad\065\uffad\001\002\000\076\002\uffb9\003\uffb9\004" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\125\013\121\014\110" +
    "\017\uffb9\023\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\045\uffb9\047\uffb9\050\uffb9" +
    "\052\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063" +
    "\uffb9\065\uffb9\001\002\000\076\002\uffb7\003\uffb7\004\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\110\017" +
    "\uffb7\023\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\045\uffb7\047\uffb7\050\uffb7\052" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062\uffb7\063\uffb7" +
    "\065\uffb7\001\002\000\076\002\uffb4\003\uffb4\004\uffb4\007" +
    "\uffb4\010\122\011\124\012\125\013\121\014\110\017\uffb4" +
    "\023\uffb4\027\uffb4\030\uffb4\032\113\033\111\034\116\035" +
    "\112\036\uffb4\037\uffb4\045\uffb4\047\uffb4\050\uffb4\052\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\062\uffb4\063\uffb4\065" +
    "\uffb4\001\002\000\076\002\uffb3\003\uffb3\004\uffb3\007\uffb3" +
    "\010\122\011\124\012\125\013\121\014\110\017\uffb3\023" +
    "\uffb3\027\uffb3\030\uffb3\032\113\033\111\034\116\035\112" +
    "\036\uffb3\037\uffb3\045\uffb3\047\uffb3\050\uffb3\052\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\065\uffb3" +
    "\001\002\000\076\002\uffaf\003\uffaf\004\uffaf\007\uffaf\010" +
    "\122\011\124\012\125\013\121\014\110\017\uffaf\023\uffaf" +
    "\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\045\uffaf\047\uffaf\050\uffaf\052\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\065\uffaf\001" +
    "\002\000\076\002\uffae\003\uffae\004\uffae\007\uffae\010\122" +
    "\011\124\012\125\013\121\014\110\017\uffae\023\uffae\027" +
    "\uffae\030\uffae\032\113\033\111\034\116\035\112\036\120" +
    "\037\117\045\uffae\047\uffae\050\uffae\052\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\062\uffae\063\uffae\065\uffae\001\002" +
    "\000\040\010\122\011\124\012\125\013\121\014\110\032" +
    "\113\033\111\034\116\035\112\036\120\037\117\047\114" +
    "\050\140\057\115\060\123\001\002\000\030\005\101\006" +
    "\072\011\106\016\060\020\100\021\061\022\057\023\102" +
    "\061\077\074\070\077\071\001\002\000\076\002\uffab\003" +
    "\uffab\004\uffab\007\uffab\010\122\011\124\012\125\013\121" +
    "\014\110\017\uffab\023\uffab\027\uffab\030\uffab\032\113\033" +
    "\111\034\116\035\112\036\120\037\117\045\uffab\047\uffab" +
    "\050\uffab\052\uffab\055\uffab\056\uffab\057\115\060\123\062" +
    "\uffab\063\uffab\065\uffab\001\002\000\076\002\uffb0\003\uffb0" +
    "\004\uffb0\007\uffb0\010\122\011\124\012\125\013\121\014" +
    "\110\017\uffb0\023\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\045\uffb0\047\uffb0\050" +
    "\uffb0\052\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0" +
    "\063\uffb0\065\uffb0\001\002\000\076\002\uffb1\003\uffb1\004" +
    "\uffb1\007\uffb1\010\122\011\124\012\125\013\121\014\110" +
    "\017\uffb1\023\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\052\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\063" +
    "\uffb1\065\uffb1\001\002\000\076\002\uffb2\003\uffb2\004\uffb2" +
    "\007\uffb2\010\122\011\124\012\125\013\121\014\110\017" +
    "\uffb2\023\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\045\uffb2\047\uffb2\050\uffb2\052" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2" +
    "\065\uffb2\001\002\000\076\002\uffb5\003\uffb5\004\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\110\017\uffb5" +
    "\023\uffb5\027\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\045\uffb5\047\uffb5\050\uffb5\052\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5\063\uffb5\065" +
    "\uffb5\001\002\000\040\023\166\067\171\070\160\071\172" +
    "\072\162\073\154\075\163\100\165\102\161\104\167\105" +
    "\157\106\155\107\170\110\164\111\156\001\002\000\030" +
    "\005\101\006\072\011\106\016\060\020\100\021\061\022" +
    "\057\023\102\061\077\074\070\077\071\001\002\000\076" +
    "\002\uffa4\003\uffa4\004\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\017\uffa4\023\uffa4\027\uffa4\030\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\045" +
    "\uffa4\047\uffa4\050\uffa4\052\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\062\uffa4\063\uffa4\065\uffa4\001\002\000\076\002" +
    "\uffa5\003\uffa5\004\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\017\uffa5\023\uffa5\027\uffa5\030\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\045\uffa5" +
    "\047\uffa5\050\uffa5\052\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\062\uffa5\063\uffa5\065\uffa5\001\002\000\040\010\122" +
    "\011\124\012\125\013\121\014\110\032\113\033\111\034" +
    "\116\035\112\036\120\037\117\047\114\057\115\060\123" +
    "\065\153\001\002\000\076\002\uffe9\003\uffe9\004\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\017\uffe9" +
    "\023\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\045\uffe9\047\uffe9\050\uffe9\052\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9\063\uffe9\065" +
    "\uffe9\001\002\000\004\016\242\001\002\000\004\016\237" +
    "\001\002\000\004\016\234\001\002\000\004\016\231\001" +
    "\002\000\004\016\227\001\002\000\004\016\224\001\002" +
    "\000\004\016\222\001\002\000\004\016\213\001\002\000" +
    "\004\016\210\001\002\000\004\016\205\001\002\000\076" +
    "\002\uff90\003\uff90\004\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\014\uff90\017\uff90\023\uff90\027\uff90\030\uff90" +
    "\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\045" +
    "\uff90\047\uff90\050\uff90\052\uff90\055\uff90\056\uff90\057\uff90" +
    "\060\uff90\062\uff90\063\uff90\065\uff90\001\002\000\004\016" +
    "\202\001\002\000\004\016\177\001\002\000\004\016\175" +
    "\001\002\000\004\016\173\001\002\000\004\017\174\001" +
    "\002\000\076\002\uffe6\003\uffe6\004\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\017\uffe6\023\uffe6\027" +
    "\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\045\uffe6\047\uffe6\050\uffe6\052\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\065\uffe6\001\002" +
    "\000\004\017\176\001\002\000\076\002\uffe8\003\uffe8\004" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\017\uffe8\023\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\045\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\063" +
    "\uffe8\065\uffe8\001\002\000\004\023\200\001\002\000\004" +
    "\017\201\001\002\000\076\002\uff87\003\uff87\004\uff87\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\017\uff87" +
    "\023\uff87\027\uff87\030\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\045\uff87\047\uff87\050\uff87\052\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\062\uff87\063\uff87\065" +
    "\uff87\001\002\000\004\023\203\001\002\000\004\017\204" +
    "\001\002\000\076\002\uff8a\003\uff8a\004\uff8a\007\uff8a\010" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\017\uff8a\023\uff8a" +
    "\027\uff8a\030\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\045\uff8a\047\uff8a\050\uff8a\052\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\062\uff8a\063\uff8a\065\uff8a\001" +
    "\002\000\004\021\206\001\002\000\004\017\207\001\002" +
    "\000\076\002\uff8e\003\uff8e\004\uff8e\007\uff8e\010\uff8e\011" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\017\uff8e\023\uff8e\027\uff8e" +
    "\030\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\045\uff8e\047\uff8e\050\uff8e\052\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\062\uff8e\063\uff8e\065\uff8e\001\002\000" +
    "\004\023\211\001\002\000\004\017\212\001\002\000\076" +
    "\002\uff86\003\uff86\004\uff86\007\uff86\010\uff86\011\uff86\012" +
    "\uff86\013\uff86\014\uff86\017\uff86\023\uff86\027\uff86\030\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\045" +
    "\uff86\047\uff86\050\uff86\052\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\062\uff86\063\uff86\065\uff86\001\002\000\032\005" +
    "\101\006\072\011\106\016\060\017\uffe1\020\100\021\061" +
    "\022\057\023\102\061\077\074\070\077\071\001\002\000" +
    "\006\017\uffe2\030\220\001\002\000\004\017\217\001\002" +
    "\000\044\010\122\011\124\012\125\013\121\014\110\017" +
    "\uffdf\030\uffdf\032\113\033\111\034\116\035\112\036\120" +
    "\037\117\047\114\057\115\060\123\065\uffdf\001\002\000" +
    "\076\002\uff8c\003\uff8c\004\uff8c\007\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\017\uff8c\023\uff8c\027\uff8c\030" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\045\uff8c\047\uff8c\050\uff8c\052\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\062\uff8c\063\uff8c\065\uff8c\001\002\000\030" +
    "\005\101\006\072\011\106\016\060\020\100\021\061\022" +
    "\057\023\102\061\077\074\070\077\071\001\002\000\044" +
    "\010\122\011\124\012\125\013\121\014\110\017\uffe0\030" +
    "\uffe0\032\113\033\111\034\116\035\112\036\120\037\117" +
    "\047\114\057\115\060\123\065\uffe0\001\002\000\004\017" +
    "\223\001\002\000\076\002\uffe5\003\uffe5\004\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\017\uffe5\023" +
    "\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\045\uffe5\047\uffe5\050\uffe5\052\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5\065\uffe5" +
    "\001\002\000\032\005\101\006\072\011\106\016\060\017" +
    "\uffe1\020\100\021\061\022\057\023\102\061\077\074\070" +
    "\077\071\001\002\000\004\017\226\001\002\000\076\002" +
    "\uff93\003\uff93\004\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\017\uff93\023\uff93\027\uff93\030\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\045\uff93" +
    "\047\uff93\050\uff93\052\uff93\055\uff93\056\uff93\057\uff93\060" +
    "\uff93\062\uff93\063\uff93\065\uff93\001\002\000\004\017\230" +
    "\001\002\000\076\002\uffe7\003\uffe7\004\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7\023\uffe7" +
    "\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\045\uffe7\047\uffe7\050\uffe7\052\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7\065\uffe7\001" +
    "\002\000\004\023\232\001\002\000\004\017\233\001\002" +
    "\000\076\002\uff89\003\uff89\004\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\013\uff89\014\uff89\017\uff89\023\uff89\027\uff89" +
    "\030\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\045\uff89\047\uff89\050\uff89\052\uff89\055\uff89\056\uff89" +
    "\057\uff89\060\uff89\062\uff89\063\uff89\065\uff89\001\002\000" +
    "\004\023\235\001\002\000\004\017\236\001\002\000\076" +
    "\002\uff85\003\uff85\004\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\014\uff85\017\uff85\023\uff85\027\uff85\030\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\045" +
    "\uff85\047\uff85\050\uff85\052\uff85\055\uff85\056\uff85\057\uff85" +
    "\060\uff85\062\uff85\063\uff85\065\uff85\001\002\000\004\023" +
    "\240\001\002\000\004\017\241\001\002\000\076\002\uff88" +
    "\003\uff88\004\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\017\uff88\023\uff88\027\uff88\030\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\045\uff88\047" +
    "\uff88\050\uff88\052\uff88\055\uff88\056\uff88\057\uff88\060\uff88" +
    "\062\uff88\063\uff88\065\uff88\001\002\000\004\017\243\001" +
    "\002\000\076\002\uffe4\003\uffe4\004\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\017\uffe4\023\uffe4\027" +
    "\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\045\uffe4\047\uffe4\050\uffe4\052\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\062\uffe4\063\uffe4\065\uffe4\001\002" +
    "\000\076\002\uffac\003\uffac\004\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\017\uffac\023\uffac\027\uffac" +
    "\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\045\uffac\047\uffac\050\uffac\052\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\062\uffac\063\uffac\065\uffac\001\002\000" +
    "\004\021\246\001\002\000\004\017\247\001\002\000\076" +
    "\002\uff8f\003\uff8f\004\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\017\uff8f\023\uff8f\027\uff8f\030\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\045" +
    "\uff8f\047\uff8f\050\uff8f\052\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\062\uff8f\063\uff8f\065\uff8f\001\002\000\032\005" +
    "\101\006\072\011\106\016\060\017\uffe1\020\100\021\061" +
    "\022\057\023\102\061\077\074\070\077\071\001\002\000" +
    "\004\017\252\001\002\000\076\002\uff8d\003\uff8d\004\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\017" +
    "\uff8d\023\uff8d\027\uff8d\030\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\045\uff8d\047\uff8d\050\uff8d\052" +
    "\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\062\uff8d\063\uff8d" +
    "\065\uff8d\001\002\000\040\010\122\011\124\012\125\013" +
    "\121\014\110\017\254\032\113\033\111\034\116\035\112" +
    "\036\120\037\117\047\114\057\115\060\123\001\002\000" +
    "\076\002\uffaa\003\uffaa\004\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\017\uffaa\023\uffaa\027\uffaa\030" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\045\uffaa\047\uffaa\050\uffaa\052\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\060\uffaa\062\uffaa\063\uffaa\065\uffaa\001\002\000\004" +
    "\016\270\001\002\000\004\016\264\001\002\000\004\016" +
    "\260\001\002\000\032\005\101\006\072\011\106\016\060" +
    "\017\uffe1\020\100\021\061\022\057\023\102\061\077\074" +
    "\070\077\071\001\002\000\004\017\262\001\002\000\004" +
    "\007\263\001\002\000\030\002\uff92\003\uff92\004\uff92\023" +
    "\uff92\027\uff92\045\uff92\052\uff92\055\uff92\056\uff92\062\uff92" +
    "\063\uff92\001\002\000\032\005\101\006\072\011\106\016" +
    "\060\017\uffe1\020\100\021\061\022\057\023\102\061\077" +
    "\074\070\077\071\001\002\000\004\017\266\001\002\000" +
    "\004\007\267\001\002\000\030\002\uff91\003\uff91\004\uff91" +
    "\023\uff91\027\uff91\045\uff91\052\uff91\055\uff91\056\uff91\062" +
    "\uff91\063\uff91\001\002\000\010\004\030\023\272\027\024" +
    "\001\002\000\004\017\274\001\002\000\026\015\045\016" +
    "\044\024\043\025\050\041\052\042\047\043\046\044\042" +
    "\064\147\066\273\001\002\000\014\067\171\070\160\071" +
    "\172\072\162\073\154\001\002\000\004\007\275\001\002" +
    "\000\030\002\uff8b\003\uff8b\004\uff8b\023\uff8b\027\uff8b\045" +
    "\uff8b\052\uff8b\055\uff8b\056\uff8b\062\uff8b\063\uff8b\001\002" +
    "\000\040\010\122\011\124\012\125\013\121\014\110\032" +
    "\113\033\111\034\116\035\112\036\120\037\117\047\114" +
    "\057\115\060\123\065\277\001\002\000\006\007\uffe9\015" +
    "\300\001\002\000\030\005\101\006\072\011\106\016\060" +
    "\020\100\021\061\022\057\023\102\061\077\074\070\077" +
    "\071\001\002\000\064\002\uffc7\003\uffc7\004\uffc7\010\122" +
    "\011\124\012\125\013\121\014\110\023\uffc7\027\uffc7\032" +
    "\113\033\111\034\116\035\112\036\120\037\117\045\uffc7" +
    "\047\114\052\uffc7\055\uffc7\056\uffc7\057\115\060\123\062" +
    "\uffc7\063\uffc7\001\002\000\042\007\uffc8\010\122\011\124" +
    "\012\125\013\121\014\110\017\uffc8\032\113\033\111\034" +
    "\116\035\112\036\120\037\117\047\114\057\115\060\123" +
    "\001\002\000\004\017\304\001\002\000\076\002\uffe3\003" +
    "\uffe3\004\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\017\uffe3\023\uffe3\027\uffe3\030\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\045\uffe3\047\uffe3" +
    "\050\uffe3\052\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062" +
    "\uffe3\063\uffe3\065\uffe3\001\002\000\030\002\ufffd\003\ufffd" +
    "\004\ufffd\023\ufffd\027\ufffd\045\ufffd\052\ufffd\055\ufffd\056" +
    "\ufffd\062\ufffd\063\ufffd\001\002\000\030\002\ufff3\003\ufff3" +
    "\004\ufff3\023\ufff3\027\ufff3\045\ufff3\052\ufff3\055\ufff3\056" +
    "\ufff3\062\ufff3\063\ufff3\001\002\000\030\002\ufff2\003\ufff2" +
    "\004\ufff2\023\ufff2\027\ufff2\045\ufff2\052\ufff2\055\ufff2\056" +
    "\ufff2\062\ufff2\063\ufff2\001\002\000\030\002\uffd6\003\uffd6" +
    "\004\uffd6\023\uffd6\027\uffd6\045\uffd6\052\uffd6\055\uffd6\056" +
    "\uffd6\062\uffd6\063\uffd6\001\002\000\030\005\101\006\072" +
    "\011\106\016\060\020\100\021\061\022\057\023\102\061" +
    "\077\074\070\077\071\001\002\000\040\010\122\011\124" +
    "\012\125\013\121\014\110\017\313\032\113\033\111\034" +
    "\116\035\112\036\120\037\117\047\114\057\115\060\123" +
    "\001\002\000\006\007\uffc4\017\uffc4\001\002\000\004\016" +
    "\315\001\002\000\006\017\uffda\027\316\001\002\000\004" +
    "\023\331\001\002\000\006\017\uffd8\030\uffd8\001\002\000" +
    "\006\017\uffdb\030\327\001\002\000\004\017\322\001\002" +
    "\000\004\051\323\001\002\000\024\003\034\004\030\023" +
    "\040\027\024\045\007\055\012\056\031\062\010\063\025" +
    "\001\002\000\026\003\034\004\030\023\040\027\024\045" +
    "\007\052\326\055\012\056\031\062\010\063\025\001\002" +
    "\000\030\002\uffff\003\uffff\004\uffff\023\uffff\027\uffff\045" +
    "\uffff\052\uffff\055\uffff\056\uffff\062\uffff\063\uffff\001\002" +
    "\000\030\002\uffdc\003\uffdc\004\uffdc\023\uffdc\027\uffdc\045" +
    "\uffdc\052\uffdc\055\uffdc\056\uffdc\062\uffdc\063\uffdc\001\002" +
    "\000\004\027\316\001\002\000\006\017\uffd9\030\uffd9\001" +
    "\002\000\006\017\uffd7\030\uffd7\001\002\000\006\007\uffc3" +
    "\017\uffc3\001\002\000\006\015\336\030\335\001\002\000" +
    "\012\007\uffc2\015\uffbb\017\uffc2\030\uffbb\001\002\000\004" +
    "\023\345\001\002\000\032\005\101\006\072\011\106\016" +
    "\060\020\100\021\061\022\057\023\102\061\077\064\340" +
    "\074\070\077\071\001\002\000\006\007\uffc1\017\uffc1\001" +
    "\002\000\032\005\101\006\072\011\106\016\060\020\100" +
    "\021\061\022\057\023\102\061\077\065\uffbd\074\070\077" +
    "\071\001\002\000\042\007\uffc0\010\122\011\124\012\125" +
    "\013\121\014\110\017\uffc0\032\113\033\111\034\116\035" +
    "\112\036\120\037\117\047\114\057\115\060\123\001\002" +
    "\000\006\030\220\065\uffbe\001\002\000\004\065\344\001" +
    "\002\000\006\007\uffbf\017\uffbf\001\002\000\006\015\uffbc" +
    "\030\uffbc\001\002\000\030\005\101\006\072\011\106\016" +
    "\060\020\100\021\061\022\057\023\102\061\077\074\070" +
    "\077\071\001\002\000\040\010\122\011\124\012\125\013" +
    "\121\014\110\017\350\032\113\033\111\034\116\035\112" +
    "\036\120\037\117\047\114\057\115\060\123\001\002\000" +
    "\004\051\351\001\002\000\006\053\352\054\353\001\002" +
    "\000\030\005\101\006\072\011\106\016\060\020\100\021" +
    "\061\022\057\023\102\061\077\074\070\077\071\001\002" +
    "\000\004\050\360\001\002\000\010\052\356\053\352\054" +
    "\353\001\002\000\010\052\uffd3\053\uffd3\054\uffd3\001\002" +
    "\000\030\002\uffd5\003\uffd5\004\uffd5\023\uffd5\027\uffd5\045" +
    "\uffd5\052\uffd5\055\uffd5\056\uffd5\062\uffd5\063\uffd5\001\002" +
    "\000\010\052\uffd4\053\uffd4\054\uffd4\001\002\000\004\051" +
    "\361\001\002\000\024\003\034\004\030\023\040\027\024" +
    "\045\007\055\012\056\031\062\010\063\025\001\002\000" +
    "\026\003\034\004\030\023\040\027\024\045\007\052\363" +
    "\055\012\056\031\062\010\063\025\001\002\000\010\052" +
    "\uffd1\053\uffd1\054\uffd1\001\002\000\040\010\122\011\124" +
    "\012\125\013\121\014\110\032\113\033\111\034\116\035" +
    "\112\036\120\037\117\047\114\050\365\057\115\060\123" +
    "\001\002\000\004\051\366\001\002\000\024\003\034\004" +
    "\030\023\040\027\024\045\007\055\012\056\031\062\010" +
    "\063\025\001\002\000\026\003\034\004\030\023\040\027" +
    "\024\045\007\052\370\055\012\056\031\062\010\063\025" +
    "\001\002\000\010\052\uffd2\053\uffd2\054\uffd2\001\002\000" +
    "\004\002\001\001\002\000\030\002\uffdd\003\uffdd\004\uffdd" +
    "\023\uffdd\027\uffdd\045\uffdd\052\uffdd\055\uffdd\056\uffdd\062" +
    "\uffdd\063\uffdd\001\002\000\040\007\374\010\122\011\124" +
    "\012\125\013\121\014\110\032\113\033\111\034\116\035" +
    "\112\036\120\037\117\047\114\057\115\060\123\001\002" +
    "\000\030\002\uffde\003\uffde\004\uffde\023\uffde\027\uffde\045" +
    "\uffde\052\uffde\055\uffde\056\uffde\062\uffde\063\uffde\001\002" +
    "\000\030\005\101\006\072\011\106\016\060\020\100\021" +
    "\061\022\057\023\102\061\077\074\070\077\071\001\002" +
    "\000\040\010\122\011\124\012\125\013\121\014\110\017" +
    "\377\032\113\033\111\034\116\035\112\036\120\037\117" +
    "\047\114\057\115\060\123\001\002\000\004\051\u0100\001" +
    "\002\000\024\003\034\004\030\023\040\027\024\045\007" +
    "\055\012\056\031\062\010\063\025\001\002\000\026\003" +
    "\034\004\030\023\040\027\024\045\007\052\u0102\055\012" +
    "\056\031\062\010\063\025\001\002\000\032\002\uffd0\003" +
    "\uffd0\004\uffd0\023\uffd0\027\uffd0\045\uffd0\046\u0103\052\uffd0" +
    "\055\uffd0\056\uffd0\062\uffd0\063\uffd0\001\002\000\006\045" +
    "\007\051\u0104\001\002\000\024\003\034\004\030\023\040" +
    "\027\024\045\007\055\012\056\031\062\010\063\025\001" +
    "\002\000\030\002\uffce\003\uffce\004\uffce\023\uffce\027\uffce" +
    "\045\uffce\052\uffce\055\uffce\056\uffce\062\uffce\063\uffce\001" +
    "\002\000\026\003\034\004\030\023\040\027\024\045\007" +
    "\052\u0107\055\012\056\031\062\010\063\025\001\002\000" +
    "\030\002\uffcf\003\uffcf\004\uffcf\023\uffcf\027\uffcf\045\uffcf" +
    "\052\uffcf\055\uffcf\056\uffcf\062\uffcf\063\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\054\002\010\003\012\006\004\007\014\011" +
    "\015\012\022\013\035\014\026\015\032\017\017\020\016" +
    "\023\031\024\013\025\040\031\021\036\005\037\036\042" +
    "\020\046\025\050\003\057\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\372\031\062\036\055\040\073\041\075\043\063" +
    "\044\064\045\066\047\102\051\065\052\074\053\104\054" +
    "\061\055\072\056\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\012\006\324\011\015\012\022\013\035\014\026\015\032" +
    "\017\017\020\016\023\031\024\013\025\040\031\021\036" +
    "\005\037\036\042\020\046\025\050\003\057\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\332\010\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\215\031\062\032\213\033\302" +
    "\036\055\040\073\041\075\043\063\044\064\045\066\047" +
    "\102\051\065\052\074\053\104\054\061\055\072\056\054" +
    "\001\001\000\040\005\301\031\062\036\055\040\073\041" +
    "\075\043\063\044\064\045\066\047\102\051\065\052\074" +
    "\053\104\054\061\055\072\056\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\275" +
    "\031\062\036\055\040\073\041\075\043\063\044\064\045" +
    "\066\047\102\051\065\052\074\053\104\054\061\055\072" +
    "\056\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\103\031\062\036\055\040\073\041\075\043\063" +
    "\044\064\045\066\047\102\051\065\052\074\053\104\054" +
    "\061\055\072\056\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\252\031\062\036" +
    "\055\040\073\041\075\043\063\044\064\045\066\047\102" +
    "\051\065\052\074\053\104\054\061\055\072\056\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\243\031\062\036\055" +
    "\040\073\041\075\043\063\044\064\045\066\047\102\051" +
    "\065\052\074\053\104\054\061\055\072\056\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\106\031\062\036\055\040\073\041\075\043\063\044" +
    "\064\045\066\047\102\051\065\052\074\053\104\054\061" +
    "\055\072\056\054\001\001\000\002\001\001\000\040\005" +
    "\144\031\062\036\055\040\073\041\075\043\063\044\064" +
    "\045\066\047\102\051\065\052\074\053\104\054\061\055" +
    "\072\056\054\001\001\000\040\005\143\031\062\036\055" +
    "\040\073\041\075\043\063\044\064\045\066\047\102\051" +
    "\065\052\074\053\104\054\061\055\072\056\054\001\001" +
    "\000\040\005\142\031\062\036\055\040\073\041\075\043" +
    "\063\044\064\045\066\047\102\051\065\052\074\053\104" +
    "\054\061\055\072\056\054\001\001\000\040\005\141\031" +
    "\062\036\055\040\073\041\075\043\063\044\064\045\066" +
    "\047\102\051\065\052\074\053\104\054\061\055\072\056" +
    "\054\001\001\000\040\005\136\031\062\036\055\040\073" +
    "\041\075\043\063\044\064\045\066\047\102\051\065\052" +
    "\074\053\104\054\061\055\072\056\054\001\001\000\040" +
    "\005\135\031\062\036\055\040\073\041\075\043\063\044" +
    "\064\045\066\047\102\051\065\052\074\053\104\054\061" +
    "\055\072\056\054\001\001\000\040\005\134\031\062\036" +
    "\055\040\073\041\075\043\063\044\064\045\066\047\102" +
    "\051\065\052\074\053\104\054\061\055\072\056\054\001" +
    "\001\000\040\005\133\031\062\036\055\040\073\041\075" +
    "\043\063\044\064\045\066\047\102\051\065\052\074\053" +
    "\104\054\061\055\072\056\054\001\001\000\040\005\132" +
    "\031\062\036\055\040\073\041\075\043\063\044\064\045" +
    "\066\047\102\051\065\052\074\053\104\054\061\055\072" +
    "\056\054\001\001\000\040\005\131\031\062\036\055\040" +
    "\073\041\075\043\063\044\064\045\066\047\102\051\065" +
    "\052\074\053\104\054\061\055\072\056\054\001\001\000" +
    "\040\005\130\031\062\036\055\040\073\041\075\043\063" +
    "\044\064\045\066\047\102\051\065\052\074\053\104\054" +
    "\061\055\072\056\054\001\001\000\040\005\127\031\062" +
    "\036\055\040\073\041\075\043\063\044\064\045\066\047" +
    "\102\051\065\052\074\053\104\054\061\055\072\056\054" +
    "\001\001\000\040\005\126\031\062\036\055\040\073\041" +
    "\075\043\063\044\064\045\066\047\102\051\065\052\074" +
    "\053\104\054\061\055\072\056\054\001\001\000\040\005" +
    "\125\031\062\036\055\040\073\041\075\043\063\044\064" +
    "\045\066\047\102\051\065\052\074\053\104\054\061\055" +
    "\072\056\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\140\031\062\036" +
    "\055\040\073\041\075\043\063\044\064\045\066\047\102" +
    "\051\065\052\074\053\104\054\061\055\072\056\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\151\031\062\036\055\040\073\041\075\043\063" +
    "\044\064\045\066\047\102\051\065\052\074\053\104\054" +
    "\061\055\072\056\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\215\031\062\032\213\033" +
    "\214\036\055\040\073\041\075\043\063\044\064\045\066" +
    "\047\102\051\065\052\074\053\104\054\061\055\072\056" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\220\031\062\036" +
    "\055\040\073\041\075\043\063\044\064\045\066\047\102" +
    "\051\065\052\074\053\104\054\061\055\072\056\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\215\031\062\032\213\033\224\036\055\040" +
    "\073\041\075\043\063\044\064\045\066\047\102\051\065" +
    "\052\074\053\104\054\061\055\072\056\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\005" +
    "\215\031\062\032\213\033\250\036\055\040\073\041\075" +
    "\043\063\044\064\045\066\047\102\051\065\052\074\053" +
    "\104\054\061\055\072\056\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\215\031\062\032\213\033\260\036\055\040\073\041" +
    "\075\043\063\044\064\045\066\047\102\051\065\052\074" +
    "\053\104\054\061\055\072\056\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\215" +
    "\031\062\032\213\033\264\036\055\040\073\041\075\043" +
    "\063\044\064\045\066\047\102\051\065\052\074\053\104" +
    "\054\061\055\072\056\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\012\011\015" +
    "\012\022\013\035\014\026\015\032\031\021\036\005\057" +
    "\270\001\001\000\002\001\001\000\004\016\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\300\031\062" +
    "\036\055\040\073\041\075\043\063\044\064\045\066\047" +
    "\102\051\065\052\074\053\104\054\061\055\072\056\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\311\031" +
    "\062\036\055\040\073\041\075\043\063\044\064\045\066" +
    "\047\102\051\065\052\074\053\104\054\061\055\072\056" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\317\027\320\030\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\012\006\004\007" +
    "\323\011\015\012\022\013\035\014\026\015\032\017\017" +
    "\020\016\023\031\024\013\025\040\031\021\036\005\037" +
    "\036\042\020\046\025\050\003\057\034\001\001\000\050" +
    "\003\012\006\324\011\015\012\022\013\035\014\026\015" +
    "\032\017\017\020\016\023\031\024\013\025\040\031\021" +
    "\036\005\037\036\042\020\046\025\050\003\057\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\340\031\062\034\336\036\055\040\073\041" +
    "\075\043\063\044\064\045\066\047\102\051\065\052\074" +
    "\053\104\054\061\055\072\056\054\001\001\000\002\001" +
    "\001\000\044\005\215\031\062\032\341\035\342\036\055" +
    "\040\073\041\075\043\063\044\064\045\066\047\102\051" +
    "\065\052\074\053\104\054\061\055\072\056\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\346\031\062" +
    "\036\055\040\073\041\075\043\063\044\064\045\066\047" +
    "\102\051\065\052\074\053\104\054\061\055\072\056\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\353\022\354\001\001\000\040\005\363\031\062\036\055" +
    "\040\073\041\075\043\063\044\064\045\066\047\102\051" +
    "\065\052\074\053\104\054\061\055\072\056\054\001\001" +
    "\000\002\001\001\000\004\022\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\012\006\004\007\361\011\015\012\022\013" +
    "\035\014\026\015\032\017\017\020\016\023\031\024\013" +
    "\025\040\031\021\036\005\037\036\042\020\046\025\050" +
    "\003\057\034\001\001\000\050\003\012\006\324\011\015" +
    "\012\022\013\035\014\026\015\032\017\017\020\016\023" +
    "\031\024\013\025\040\031\021\036\005\037\036\042\020" +
    "\046\025\050\003\057\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\012\006\004" +
    "\007\366\011\015\012\022\013\035\014\026\015\032\017" +
    "\017\020\016\023\031\024\013\025\040\031\021\036\005" +
    "\037\036\042\020\046\025\050\003\057\034\001\001\000" +
    "\050\003\012\006\324\011\015\012\022\013\035\014\026" +
    "\015\032\017\017\020\016\023\031\024\013\025\040\031" +
    "\021\036\005\037\036\042\020\046\025\050\003\057\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\375" +
    "\031\062\036\055\040\073\041\075\043\063\044\064\045" +
    "\066\047\102\051\065\052\074\053\104\054\061\055\072" +
    "\056\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\012\006\004\007\u0100\011\015\012\022\013\035" +
    "\014\026\015\032\017\017\020\016\023\031\024\013\025" +
    "\040\031\021\036\005\037\036\042\020\046\025\050\003" +
    "\057\034\001\001\000\050\003\012\006\324\011\015\012" +
    "\022\013\035\014\026\015\032\017\017\020\016\023\031" +
    "\024\013\025\040\031\021\036\005\037\036\042\020\046" +
    "\025\050\003\057\034\001\001\000\002\001\001\000\004" +
    "\017\u0104\001\001\000\052\003\012\006\004\007\u0105\011" +
    "\015\012\022\013\035\014\026\015\032\017\017\020\016" +
    "\023\031\024\013\025\040\031\021\036\005\037\036\042" +
    "\020\046\025\050\003\057\034\001\001\000\002\001\001" +
    "\000\050\003\012\006\324\011\015\012\022\013\035\014" +
    "\026\015\032\017\017\020\016\023\031\024\013\025\040" +
    "\031\021\036\005\037\036\042\020\046\025\050\003\057" +
    "\034\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST ast;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + s.left +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
         ManejadorErroresFS.getInstance().setErrorSintactico(s.left,s.right+1, "problemas con el caracter = " + s.value);
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
    }
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticoFS$actions {
  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action_part00000000(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 parser.ast = new AST(a);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> a = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<nodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= POSIBLES_LLAMADAS tPtoComa 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		nodoAST a = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IF 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SWITCH 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= BREAK 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= RETURN 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Return a = (Return)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= FUNCION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ASIGNACION_ARREGLO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		AsignacionArreglo a = (AsignacionArreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CREAR_TEXTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearTexto a = (CrearTexto)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CREAR_CAJA_TEXTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearCajaTexto a = (CrearCajaTexto)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= AL_CLIC 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		AlClic a = (AlClic)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= error tPtoComa 
            {
              nodoAST RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= error tLlvClose 
            {
              nodoAST RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // POSIBLES_LLAMADAS ::= DECLARACION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // POSIBLES_LLAMADAS ::= AUMENTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Aumento a = (Aumento)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // POSIBLES_LLAMADAS ::= DECREMENTO 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Decremento a = (Decremento)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // POSIBLES_LLAMADAS ::= IMPRIMIR 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // POSIBLES_LLAMADAS ::= ASIGNACION 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // POSIBLES_LLAMADAS ::= ASIG_OP 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Asignacion_Operacion a = (Asignacion_Operacion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // POSIBLES_LLAMADAS ::= FUNCION_LLAMADA 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		FuncionLLamada a = (FuncionLLamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // POSIBLES_LLAMADAS ::= ARREGLO_LLAMADA 
            {
              nodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ArregloLlamada a = (ArregloLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("POSIBLES_LLAMADAS",45, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARREGLO_LLAMADA ::= tId tCorchOpen EXPRESION tCorchClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ArregloLlamada(id,exp,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARREGLO_LLAMADA ::= tId tPunto res_Descendente tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,1,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARREGLO_LLAMADA ::= tId tPunto res_Ascendente tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,2,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARREGLO_LLAMADA ::= tId tPunto res_Invertir tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,3,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARREGLO_LLAMADA ::= tId tPunto res_maximo tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,4,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARREGLO_LLAMADA ::= tId tPunto res_minimo tParOpen tParClose 
            {
              ArregloLlamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		 RESULT = new ArregloLlamada(id,5,idleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ARREGLO_LLAMADA",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION_LLAMADA ::= tId tParOpen TIPO_PARAMETROS tParClose 
            {
              FuncionLLamada RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> pars = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new FuncionLLamada(pars,id,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCION_LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_PARAMETROS ::= PARAMETROS_CALL 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_PARAMETROS ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS_CALL ::= PARAMETROS_CALL tComa EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; RESULT.add(b);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS_CALL",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS_CALL ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS_CALL",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETURN ::= tReturn EXPRESION tPtoComa 
            {
              Return RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Return(b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURN ::= tReturn tPtoComa 
            {
              Return RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Return(aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= tFuncion tId tParOpen TIPO_PARAMETROS_FUNCION tParClose tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<Simbolo> par = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Funcion(id,par,ins,idleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_PARAMETROS_FUNCION ::= PARAMETROS 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS_FUNCION",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_PARAMETROS_FUNCION ::= 
            {
              LinkedList<Simbolo> RESULT =null;
		 RESULT = new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAMETROS_FUNCION",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS ::= PARAMETROS tComa PARAMETRO 
            {
              LinkedList<Simbolo> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Simbolo> pars = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Simbolo par = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = pars; RESULT.add(par);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Simbolo> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Simbolo par = (Simbolo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(par);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETRO ::= tVar tId 
            {
              Simbolo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Simbolo(id,new Tipo(Tipo.Primitivo.NULL));
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("PARAMETRO",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BREAK ::= tBreak tPtoComa 
            {
              Break RESULT =null;
		 RESULT =  new Break(); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCH ::= tSelecciona tParOpen EXPRESION tParClose tLlvOpen LST_CASOS tLlvClose 
            {
              Switch RESULT =null;
		int controlleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int controlright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion control = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> casos = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Switch(control,casos,controlleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LST_CASOS ::= LST_CASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> lc = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = lc; RESULT.add(c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_CASOS",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LST_CASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_CASOS",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASO ::= tCaso EXPRESION tDosPuntos tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Caso RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Caso(exp,ins,expleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASO ::= tDefecto tDosPuntos tLlvOpen INSTRUCCIONES tLlvClose 
            {
              Caso RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Caso(ins,insleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new If(cond,ins,condleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose tSino tLlvOpen INSTRUCCIONES tLlvClose 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<nodoAST> ins1 = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<nodoAST> ins2 = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new If(cond,ins1,ins2,condleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-10)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= tSi tParOpen EXPRESION tParClose tLlvOpen INSTRUCCIONES tLlvClose tSino IF 
            {
              If RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<nodoAST> ins = (LinkedList<nodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int tIfleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int tIfright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		If tIf = (If)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new If(cond,ins,tIf,condleft); 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIG_OP ::= tId TIPO_AO EXPRESION 
            {
              Asignacion_Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Asignacion_Operacion.TipoAO b = (Asignacion_Operacion.TipoAO)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Asignacion_Operacion(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_OP",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_AO ::= tSumaAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.SUMA;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_AO ::= tRestaAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.RESTA;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_AO ::= tMultipliAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.MULTIPLICACION;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_AO ::= tDiviAsig 
            {
              Asignacion_Operacion.TipoAO RESULT =null;
		RESULT = Asignacion_Operacion.TipoAO.DIVISION;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_AO",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= tId tIgual EXPRESION 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION_ARREGLO ::= tId tCorchOpen EXPRESION tCorchClose tIgual EXPRESION 
            {
              AsignacionArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new AsignacionArreglo(a,b,c,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AUMENTO ::= tId tAumen 
            {
              Aumento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Aumento(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("AUMENTO",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECREMENTO ::= tId tDecremen 
            {
              Decremento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new Decremento(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECREMENTO",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMPRIMIR ::= tImprimir tParOpen EXPRESION tParClose 
            {
              Imprimir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Imprimir(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= tVar ASIG_VAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIG_VAL ::= tId 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 Identificador id = new Identificador(a,aleft);
                                                        LinkedList<Identificador> lId = new LinkedList<>();
                                                        lId.add(id);
                                                        RESULT = new Declaracion(lId,aleft);
                                                        
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_VAL",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_VAL ::= LST_ID tIgual TIPO_DEC_ASIG 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Identificador> a = (LinkedList<Identificador>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        if(b instanceof Expresion){
                                                            RESULT = new Declaracion(a,(Expresion)b,bleft);
                                                        }else{
                                                            RESULT = new Arreglo(a,(LinkedList<Expresion>)b,aleft);
                                                        }
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ASIG_VAL",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO_DEC_ASIG ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_DEC_ASIG",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_DEC_ASIG ::= tCorchOpen TIPO_PARAM_ARREGLO tCorchClose 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_DEC_ASIG",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_PARAM_ARREGLO ::= PARAMETROS_CALL 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAM_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO_PARAM_ARREGLO ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TIPO_PARAM_ARREGLO",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LST_ID ::= LST_ID tComa tId 
            {
              LinkedList<Identificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Identificador> a = (LinkedList<Identificador>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a; Identificador id = new Identificador(b,bleft); RESULT.add(id);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_ID",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LST_ID ::= tId 
            {
              LinkedList<Identificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		  RESULT = new LinkedList<>();
                                                        Identificador id = new Identificador(a,aleft);
                                                        RESULT.add(id);
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LST_ID",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= tMenos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,Operacion.Operador.NEGACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION tMas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.SUMA,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION tMenos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.RESTA,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION tPor EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.MULTIPLICACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION tDiv EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.DIVISION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION tElev EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Aritmetica(a,b,Operacion.Operador.ELEVACION,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION tIgualDoble EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION tDistinto EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.DIFERENTE_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION tMenorQue EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MENOR_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION tMenorIgual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MENOR_IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION tMayorQue EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION tMayorIgual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL_QUE,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION tAnd EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,b,Operacion.Operador.AND,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION tOr EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,b,Operacion.Operador.OR,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= tNot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Logica(a,Operacion.Operador.NOT,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION tInterrogacion EXPRESION tDosPuntos EXPRESION 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion t = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = new Ternario(cond,t,f,condleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= tParOpen EXPRESION tParClose 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= tEntero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(new Double(a),new Tipo(Tipo.Primitivo.NUMBER),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= tDec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(new Double(a),new Tipo(Tipo.Primitivo.NUMBER),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= tCad 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.STRING),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= tId 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Identificador(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= tId tAumen 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.AUMENTO,aleft);
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= tId tDecremen 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		  Identificador id = new Identificador(a,aleft);
                                                        RESULT = new Aritmetica(id,Operacion.Operador.DECREMENTO,aleft); 
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= tTrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= tFalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new Unario(a,new Tipo(Tipo.Primitivo.BOOLEAN),aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= ARREGLO_LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ArregloLlamada a = (ArregloLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		 RESULT = a; 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= FUNCION_LLAMADA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		FuncionLLamada a = (FuncionLLamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= CREAR_VENTANA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearVentana a = (CrearVentana)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= CREAR_CONTENEDOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearContenedor a = (CrearContenedor)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= LEER_GXML 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LeerGxml a = (LeerGxml)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= OBTENER_POR_ETIQUETA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObtenerPorEtiqueta a = (ObtenerPorEtiqueta)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= LLAMADA_OBJETO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		ObjetoLlamada a = (ObjetoLlamada)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= CREAR_BOTON 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		CrearBoton a = (CrearBoton)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= FILTER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Filter a = (Filter)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= BUSCAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Buscar a = (Buscar)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= REDUCE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Reduce a = (Reduce)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= TODOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Todos a = (Todos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ALGUNO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Alguno a = (Alguno)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= MAP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Map a = (Map)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CREAR_BOTON ::= tId tPunto res_crear_boton tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearBoton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new CrearBoton(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_BOTON",37, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CREAR_CAJA_TEXTO ::= tId tPunto res_crear_caja_texto tParOpen TIPO_PARAMETROS tParClose tPtoComa 
            {
              CrearCajaTexto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new CrearCajaTexto(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_CAJA_TEXTO",36, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CREAR_TEXTO ::= tId tPunto res_crear_texto tParOpen TIPO_PARAMETROS tParClose tPtoComa 
            {
              CrearTexto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new CrearTexto(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_TEXTO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LLAMADA_OBJETO ::= tId tPunto tId 
            {
              ObjetoLlamada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT = new ObjetoLlamada(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_OBJETO",35, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LEER_GXML ::= res_leerGxml tParOpen tCad tParClose 
            {
              LeerGxml RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new LeerGxml(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LEER_GXML",33, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OBTENER_POR_ETIQUETA ::= tId tPunto res_obtenerPorEtiqueta tParOpen tCad tParClose 
            {
              ObtenerPorEtiqueta RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new ObtenerPorEtiqueta(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("OBTENER_POR_ETIQUETA",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CREAR_VENTANA ::= res_crear_ventana tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearVentana RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new CrearVentana(a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_VENTANA",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CREAR_CONTENEDOR ::= tId tPunto res_crear_contenedor tParOpen TIPO_PARAMETROS tParClose 
            {
              CrearContenedor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		 RESULT = new CrearContenedor(b,a,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CREAR_CONTENEDOR",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // AL_CLIC ::= tId tPunto res_alClick tParOpen POSIBLES_LLAMADAS tParClose tPtoComa 
            {
              AlClic RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		nodoAST b = (nodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		RESULT = new AlClic(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("AL_CLIC",38, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FILTER ::= tId tPunto res_filter tParOpen tId tParClose 
            {
              Filter RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Filter(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FILTER",39, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BUSCAR ::= tId tPunto res_buscar tParOpen tId tParClose 
            {
              Buscar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Buscar(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("BUSCAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // REDUCE ::= tId tPunto res_reduce tParOpen tId tParClose 
            {
              Reduce RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Reduce(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("REDUCE",41, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TODOS ::= tId tPunto res_todos tParOpen tId tParClose 
            {
              Todos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Todos(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TODOS",42, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ALGUNO ::= tId tPunto res_alguno tParOpen tId tParClose 
            {
              Alguno RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Alguno(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ALGUNO",43, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MAP ::= tId tPunto res_map tParOpen tId tParClose 
            {
              Map RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = new Map(a,b,aleft);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("MAP",44, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticoFS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
              return CUP$sintacticoFS$do_action_part00000000(
                               CUP$sintacticoFS$act_num,
                               CUP$sintacticoFS$parser,
                               CUP$sintacticoFS$stack,
                               CUP$sintacticoFS$top);
    }
}

}
