
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.GXML;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintacticoGXML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintacticoGXML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintacticoGXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\014\012\000\002\003\012\000\002\004\013" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\010\005\000\002\011" +
    "\005\000\002\012\003\000\002\013\003\000\002\015\004" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\005\000\002\020" +
    "\005\000\002\021\005\000\002\022\005\000\002\023\005" +
    "\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\004\022\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\113\001\002\000\006\010\011\017\010" +
    "\001\002\000\004\002\uffff\001\002\000\014\012\031\026" +
    "\020\027\030\030\026\031\021\001\002\000\004\023\012" +
    "\001\002\000\004\025\013\001\002\000\004\022\014\001" +
    "\002\000\004\020\015\001\002\000\004\010\016\001\002" +
    "\000\004\023\017\001\002\000\004\002\ufffd\001\002\000" +
    "\004\021\111\001\002\000\016\012\ufff0\023\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\001\002\000\016\012\ufffa\023" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\001\002\000\016" +
    "\012\ufff6\023\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\001" +
    "\002\000\016\012\ufff7\023\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\001\002\000\016\012\ufff8\023\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\001\002\000\016\012\ufff1\023\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\001\002\000\016\012" +
    "\ufff5\023\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\001\002" +
    "\000\004\021\107\001\002\000\004\021\105\001\002\000" +
    "\016\012\031\023\035\026\020\027\030\030\026\031\021" +
    "\001\002\000\016\012\ufff9\023\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\001\002\000\016\012\ufffb\023\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\001\002\000\004\022\037\001" +
    "\002\000\004\022\101\001\002\000\004\007\040\001\002" +
    "\000\020\012\031\027\030\032\051\033\047\034\043\035" +
    "\056\036\053\001\002\000\022\012\031\023\074\027\030" +
    "\032\051\033\047\034\043\035\056\036\053\001\002\000" +
    "\022\012\uffe7\023\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\001\002\000\004\021\071\001\002\000" +
    "\022\012\uffeb\023\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\001\002\000\022\012\uffec\023\uffec\027" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\001\002" +
    "\000\022\012\uffe8\023\uffe8\027\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\001\002\000\004\021\067\001\002" +
    "\000\022\012\uffe9\023\uffe9\027\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\001\002\000\004\021\065\001\002" +
    "\000\022\012\uffea\023\uffea\027\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\001\002\000\004\021\061\001\002" +
    "\000\022\012\uffee\023\uffee\027\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\001\002\000\022\012\uffed\023\uffed" +
    "\027\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\001" +
    "\002\000\004\021\057\001\002\000\004\041\060\001\002" +
    "\000\022\012\uffe3\023\uffe3\027\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\001\002\000\006\037\063\040\062" +
    "\001\002\000\022\012\uffe0\023\uffe0\027\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\022\012\uffe1" +
    "\023\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\001\002\000\022\012\uffe2\023\uffe2\027\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002\000\004\041" +
    "\066\001\002\000\022\012\uffe6\023\uffe6\027\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000\004\041" +
    "\070\001\002\000\022\012\uffe5\023\uffe5\027\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000\004\041" +
    "\072\001\002\000\022\012\uffe4\023\uffe4\027\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002\000\022\012" +
    "\uffef\023\uffef\027\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\001\002\000\004\022\075\001\002\000\004\020" +
    "\076\001\002\000\004\007\077\001\002\000\004\023\100" +
    "\001\002\000\004\022\ufffe\001\002\000\004\020\102\001" +
    "\002\000\004\017\103\001\002\000\004\023\104\001\002" +
    "\000\004\002\ufffc\001\002\000\004\005\106\001\002\000" +
    "\030\012\ufff4\023\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\001\002\000" +
    "\004\005\110\001\002\000\030\012\ufff2\023\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\001\002\000\004\005\112\001\002\000\016" +
    "\012\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\010\002\004\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\031\006\021\007\032\010\024\011" +
    "\023\012\022\013\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\033\007\032\010\024\011\023\012\022\013\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\054" +
    "\011\045\015\040\016\053\017\044\020\043\021\051\022" +
    "\047\023\041\001\001\000\022\007\054\011\045\016\072" +
    "\017\044\020\043\021\051\022\047\023\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la Línea " + s.left +" Columna "+(s.right+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }
         /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");   
	}
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintacticoGXML$actions {
  private final sintacticoGXML parser;

  /** Constructor */
  CUP$sintacticoGXML$actions(sintacticoGXML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action_part00000000(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGXML$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGXML$parser.done_parsing();
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ETQ_TEXTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= ETQ_VENTANA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ETQ_CONTENEDOR ::= res_MenorQue res_contenedor ELEMENTOS_CONTENEDOR res_MayorQue res_MenorQue res_slash res_contenedor res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ETQ_TEXTO ::= res_MenorQue res_texto res_MayorQue tTexto res_MenorQue res_slash res_texto res_MayorQue 
            {
              Object RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int texright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		 System.out.println(tex);
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_TEXTO",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ETQ_VENTANA ::= res_MenorQue res_ventana ELEMENTOS_VENTANA res_MayorQue ETQ_CONTENEDOR res_MenorQue res_slash res_ventana res_MayorQue 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETQ_VENTANA",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENTOS_VENTANA ::= ELEMENTOS_VENTANA ELEMENTO_VENTANA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ELEMENTOS_VENTANA ::= ELEMENTO_VENTANA 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELEMENTO_VENTANA ::= ELEMENTO_ID 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELEMENTO_VENTANA ::= ELEMENTO_TIPO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELEMENTO_VENTANA ::= ELEMENTO_COLOR 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTO_VENTANA ::= ELEMENTO_ACCION_INICIAL 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTO_VENTANA ::= ELEMENTO_ACCION_FINAL 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO_ID ::= res_id res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ID",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO_TIPO ::= res_tipo res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TIPO",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO_COLOR ::= res_color res_Igual tCad 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_COLOR",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO_ACCION_INICIAL ::= res_accioninicial 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCION_INICIAL",8, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO_ACCION_FINAL ::= res_accionfinal 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ACCION_FINAL",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTOS_CONTENEDOR ::= ELEMENTOS_CONTENEDOR ELEMENTO_CONTENEDOR 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTOS_CONTENEDOR ::= ELEMENTO_CONTENEDOR 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO_CONTENEDOR ::= ELEMENTO_ID 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO_CONTENEDOR ::= ELEMENTO_X 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO_CONTENEDOR ::= ELEMENTO_Y 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO_CONTENEDOR ::= ELEMENTO_ALTO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO_CONTENEDOR ::= ELEMENTO_ANCHO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELEMENTO_CONTENEDOR ::= ELEMENTO_COLOR 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELEMENTO_CONTENEDOR ::= ELEMENTO_BORDE 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTO_X ::= res_x res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_X",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO_Y ::= res_y res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_Y",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO_ALTO ::= res_alto res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ALTO",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTO_ANCHO ::= res_ancho res_Igual tNumerico 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ANCHO",16, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMENTO_BORDE ::= res_borde res_Igual BOOLEANO 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BORDE",17, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BOOLEANO ::= res_verdadero 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("BOOLEANO",18, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BOOLEANO ::= res_falso 
            {
              Object RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("BOOLEANO",18, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintacticoGXML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
              return CUP$sintacticoGXML$do_action_part00000000(
                               CUP$sintacticoGXML$act_num,
                               CUP$sintacticoGXML$parser,
                               CUP$sintacticoGXML$stack,
                               CUP$sintacticoGXML$top);
    }
}

}
